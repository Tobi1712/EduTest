{"ast":null,"code":"import _objectSpread from \"C:\\\\React_project\\\\EduTest\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\React_project\\\\EduTest\\\\frontend\\\\src\\\\components\\\\admin\\\\Slides\\\\newslide.js\";\nimport React, { Component } from 'react';\nimport '../Division/newdivision.css';\nimport { Form, Input, Button, Icon, Select, Upload, Row, Col } from 'antd';\nimport { SecurePost } from '../../../services/axiosCall';\nimport apis from '../../../services/Apis';\nimport { connect } from 'react-redux';\nimport { ChangeSlideConfirmDirty, ChangeSlideModalState, ChangeSlideTableData } from '../../../actions/chapterAction';\nimport Alert from '../../../components/common/alert';\nimport auth from '../../../services/AuthServices';\nconst Option = Select.Option;\n\nclass NewSlide extends Component {\n  constructor(props) {\n    super(props);\n\n    this.SlideTextChange = (e, i) => {\n      var newSlides = [...this.state.slideDetails.slides];\n      newSlides[i] = _objectSpread({}, this.state.slideDetails.slides[i], {\n        body: e.target.value\n      });\n\n      if ((newSlides[i].image === 'undefined' || newSlides[i].image === undefined || newSlides[i].image === null || newSlides[i].image === 'null') && (newSlides[i].body === 'undefined' || newSlides[i].body === undefined || newSlides[i].body === 'null' || newSlides[i].body === '' || newSlides[i].body === null)) {\n        newSlides[i] = _objectSpread({}, this.state.slideDetails.slides[i]);\n        this.setState((ps, pp) => {\n          return {\n            slideDetails: _objectSpread({}, ps.slideDetails, {\n              slides: newSlides\n            })\n          };\n        });\n      }\n\n      this.setState((ps, pp) => {\n        return {\n          slideDetails: _objectSpread({}, ps.slideDetails, {\n            slides: newSlides\n          })\n        };\n      });\n    };\n\n    this.SlideImageonChange = (f, i) => {\n      var newSlides = [...this.state.slideDetails.slides];\n\n      if (!f) {\n        delete newSlides[i].image;\n        newSlides[i].image = null;\n      } else {\n        newSlides[i] = _objectSpread({}, this.state.slideDetails.slides[i], {\n          image: \"\".concat(apis.BASE, \"/\").concat(f.link)\n        });\n      }\n\n      this.setState({\n        submitDisabled: false\n      });\n\n      if ((newSlides[i].image === 'undefined' || newSlides[i].image === undefined || newSlides[i].image === null || newSlides[i].image === 'null') && (newSlides[i].body === 'undefined' || newSlides[i].body === undefined || newSlides[i].body === 'null' || newSlides[i].body === '' || newSlides[i].body === null)) {\n        newSlides[i] = _objectSpread({}, this.state.slideDetails.slides[i]);\n      }\n\n      this.setState((ps, pp) => {\n        return {\n          slideDetails: _objectSpread({}, ps.slideDetails, {\n            slides: newSlides\n          })\n        };\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        console.log(values);\n\n        if (!err) {\n          var f = 1;\n          var sl = [];\n          console.log('Полученные значения формы: ', values);\n          this.state.slideDetails.slides.forEach((element, i) => {\n            sl.push({\n              slbody: element.body,\n              slimage: element.image\n            });\n\n            if ((element.image === 'undefined' || element.image === undefined || element.image === null || element.image === 'null') && (element.body === '' || element.body === null || element.body === 'null' || element.body === 'undefined' || element.body === undefined)) {\n              f = 0;\n            }\n          });\n\n          if (f) {\n            this.setState({\n              adding: true\n            });\n            SecurePost({\n              url: apis.CREATE_SLIDES,\n              data: {\n                slides: sl\n              }\n            }).then(response => {\n              console.log(response);\n              this.setState({\n                adding: false\n              });\n\n              if (response.data.success) {\n                this.props.ChangeSlideModalState(false);\n                Alert('success', 'Успешно', response.data.message);\n              } else {\n                this.props.ChangeSlideModalState(false);\n                this.props.form.resetFields();\n                return Alert('warning', 'Предупреждение!', response.data.message);\n              }\n            }).catch(error => {\n              console.log(error);\n              this.props.form.resetFields();\n              this.setState({\n                adding: false,\n                slideDetails: {\n                  slides: [{\n                    image: null,\n                    body: null\n                  }]\n                }\n              });\n              this.props.ChangeSlideModalState(false);\n              return Alert('error', 'Ошибка!', 'Ошибка сервера');\n            });\n          }\n        }\n      });\n    };\n\n    this.state = {\n      slideDetails: {\n        slides: [{\n          //_id:null,\n          body: null,\n          image: null\n        }]\n      },\n      submitDisabled: false,\n      adding: false\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const TextArea = Input.TextArea;\n    var SlideImageprops = {\n      name: 'file',\n      action: \"\".concat(apis.BASE).concat(apis.FILE_UPLOAD, \"?Token=\").concat(auth.retriveToken()),\n      listType: 'picture'\n    };\n    return React.createElement(\"div\", {\n      className: \"register-division-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"register-division-form-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        paddingTop: '20px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, this.state.slideDetails.slides.map((slide, i) => {\n      return React.createElement(Row, {\n        key: i,\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(Col, {\n        offset: 1,\n        span: 13,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(Form.Item, {\n        label: \"option\".concat(i + 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(TextArea, {\n        value: this.state.slideDetails.slides[i].body,\n        onChange: e => this.SlideTextChange(e, i),\n        rows: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        offset: 2,\n        span: 6,\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(Form.Item, {\n        label: \"Option\".concat(i + 1, \" Image\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(Upload, Object.assign({}, SlideImageprops, {\n        beforeUpload: this.upl,\n        onRemove: f => this.SlideImageonChange(null, i),\n        onSuccess: f => this.SlideImageonChange(f, i),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }), React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"upload\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }), \" \\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C\")))));\n    })), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      block: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, this.props.chapter.Slidemode)))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  admin: state.admin,\n  chapter: state.chapter\n});\n\nconst NewSlideForm = Form.create({\n  name: 'register'\n})(NewSlide);\nexport default connect(mapStateToProps, {\n  ChangeSlideConfirmDirty,\n  ChangeSlideModalState,\n  ChangeSlideTableData\n})(NewSlideForm);","map":{"version":3,"sources":["C:\\React_project\\EduTest\\frontend\\src\\components\\admin\\Slides\\newslide.js"],"names":["React","Component","Form","Input","Button","Icon","Select","Upload","Row","Col","SecurePost","apis","connect","ChangeSlideConfirmDirty","ChangeSlideModalState","ChangeSlideTableData","Alert","auth","Option","NewSlide","constructor","props","SlideTextChange","e","i","newSlides","state","slideDetails","slides","body","target","value","image","undefined","setState","ps","pp","SlideImageonChange","f","BASE","link","submitDisabled","handleSubmit","preventDefault","form","validateFieldsAndScroll","err","values","console","log","sl","forEach","element","push","slbody","slimage","adding","url","CREATE_SLIDES","data","then","response","success","message","resetFields","catch","error","render","getFieldDecorator","TextArea","SlideImageprops","name","action","FILE_UPLOAD","retriveToken","listType","paddingTop","map","slide","textAlign","upl","chapter","Slidemode","mapStateToProps","admin","NewSlideForm","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport '../Division/newdivision.css';\r\nimport {\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Icon,\r\n    Select,\r\n    Upload,\r\n    Row,\r\n    Col\r\n} from 'antd';\r\nimport {SecurePost} from '../../../services/axiosCall';\r\nimport apis from '../../../services/Apis';\r\nimport { connect } from 'react-redux';\r\nimport { \r\n    ChangeSlideConfirmDirty,\r\n    ChangeSlideModalState,\r\n    ChangeSlideTableData\r\n} from '../../../actions/chapterAction';\r\nimport Alert from '../../../components/common/alert';\r\nimport auth from '../../../services/AuthServices';\r\nconst { Option } = Select;\r\nclass NewSlide extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            slideDetails : {\r\n                slides :[\r\n                    {\r\n                        //_id:null,\r\n                        body : null,\r\n                        image :null,\r\n                    },\r\n                ],\r\n            },\r\n            submitDisabled:false,\r\n            adding : false,\r\n        }\r\n    }\r\n\r\n    SlideTextChange =(e,i)=>{\r\n        var newSlides = [...this.state.slideDetails.slides]\r\n        newSlides[i]={\r\n            ...this.state.slideDetails.slides[i],\r\n            body : e.target.value\r\n        }\r\n        if((newSlides[i].image==='undefined' || newSlides[i].image===undefined || newSlides[i].image===null || newSlides[i].image==='null') && \r\n            (newSlides[i].body==='undefined' || newSlides[i].body===undefined || newSlides[i].body==='null' || newSlides[i].body==='' || newSlides[i].body===null)){\r\n                newSlides[i]={\r\n                    ...this.state.slideDetails.slides[i],\r\n                }\r\n                this.setState((ps,pp)=>{\r\n                    return({\r\n                        slideDetails:{\r\n                            ...ps.slideDetails,\r\n                            slides:newSlides\r\n                        }\r\n                    })\r\n                })\r\n        }\r\n        this.setState((ps,pp)=>{\r\n            return({\r\n                slideDetails:{\r\n                    ...ps.slideDetails,\r\n                    slides:newSlides\r\n                }\r\n            })\r\n        })     \r\n    }\r\n\r\n     SlideImageonChange = (f,i)=>{\r\n        var newSlides = [...this.state.slideDetails.slides]\r\n        if(!f){\r\n            delete newSlides[i].image\r\n            newSlides[i].image=null\r\n        }\r\n        else{\r\n            newSlides[i]={\r\n                ...this.state.slideDetails.slides[i],\r\n                image :`${apis.BASE}/${f.link}`\r\n            }\r\n        }\r\n        this.setState({\r\n            submitDisabled:false\r\n        })\r\n        if((newSlides[i].image==='undefined' || newSlides[i].image===undefined || newSlides[i].image===null || newSlides[i].image==='null') && \r\n            (newSlides[i].body==='undefined' || newSlides[i].body===undefined || newSlides[i].body==='null' || newSlides[i].body==='' || newSlides[i].body===null)){\r\n                newSlides[i]={\r\n                    ...this.state.slideDetails.slides[i],\r\n                }\r\n        }\r\n        this.setState((ps,pp)=>{\r\n            return({\r\n                slideDetails:{\r\n                    ...ps.slideDetails,\r\n                    slides:newSlides\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n            console.log(values);\r\n            if (!err) {\r\n                var f=1;\r\n                var sl=[]\r\n                console.log('Полученные значения формы: ', values);\r\n                this.state.slideDetails.slides.forEach((element,i) => {\r\n                    sl.push({\r\n                        slbody:element.body,\r\n                        slimage:element.image,\r\n                    });\r\n                    if((element.image==='undefined' || element.image===undefined || element.image===null || element.image==='null')&&(element.body==='' ||element.body===null || element.body==='null' || element.body==='undefined' || element.body===undefined )){\r\n                        f=0;\r\n                    }\r\n                    \r\n                })\r\n                if(f){\r\n                        this.setState({\r\n                            adding:true\r\n                        });\r\n                        SecurePost({\r\n                            url:apis.CREATE_SLIDES,\r\n                            data:{\r\n                                slides:sl,\r\n                            }\r\n                        }).then((response)=>{\r\n                            console.log(response);\r\n                            this.setState({\r\n                                adding:false\r\n                            });\r\n                            if(response.data.success){\r\n                                this.props.ChangeSlideModalState(false);\r\n                                Alert('success','Успешно',response.data.message);\r\n                            }\r\n                            else{\r\n                                this.props.ChangeSlideModalState(false);\r\n                                this.props.form.resetFields();\r\n                                return Alert('warning','Предупреждение!',response.data.message);\r\n                            }\r\n\r\n                        }).catch((error)=>{\r\n                            console.log(error);\r\n                            this.props.form.resetFields();\r\n                            this.setState({\r\n                                adding:false,\r\n                                slideDetails:{\r\n                                    slides :[\r\n                                        {\r\n                                            image :null,\r\n                                            body : null,\r\n                                        },\r\n                                    ] ,  \r\n                                }\r\n                            });\r\n                            this.props.ChangeSlideModalState(false);\r\n                            return Alert('error','Ошибка!','Ошибка сервера');\r\n                        })\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        const { TextArea } = Input;\r\n        var SlideImageprops={\r\n            name: 'file',\r\n            action: `${apis.BASE}${apis.FILE_UPLOAD}?Token=${auth.retriveToken()}`,\r\n            listType: 'picture',\r\n        }\r\n        return (\r\n            <div className=\"register-division-form\">\r\n                <div className=\"register-division-form-body\">\r\n                    \r\n                <Form onSubmit={this.handleSubmit}>\r\n                    \r\n                    <div style={{paddingTop:'20px'}}>\r\n                        {\r\n                            this.state.slideDetails.slides.map((slide,i)=>{\r\n                                        return(\r\n                                            <Row key={i} className=\"\">\r\n                                                <Col offset={1} span={13}>\r\n                                                    <Form.Item label={`option${i+1}`}>\r\n                                                        <TextArea value={this.state.slideDetails.slides[i].body} onChange={ (e)=>this.SlideTextChange(e,i)} rows={3} />\r\n                                                    </Form.Item>\r\n                                                </Col>\r\n                                                <Col offset={2} span={6} style={{textAlign:'center'}}>\r\n                                                    <Form.Item label={`Option${i+1} Image`}>\r\n                                                        <Upload {...SlideImageprops} beforeUpload={this.upl} onRemove={(f)=>this.SlideImageonChange(null,i)} onSuccess={(f)=>this.SlideImageonChange(f,i)}>\r\n                                                            <Button>\r\n                                                                <Icon type=\"upload\" /> Загрузить\r\n                                                            </Button>\r\n                                                        </Upload>\r\n                                                    </Form.Item>\r\n                                                </Col>\r\n                                            </Row>                                                \r\n                                        )\r\n                                    })\r\n                                }\r\n                            </div>\r\n\r\n{/* \r\n\r\n                        <Form.Item label=\"Название\" hasFeedback className=\"input-admin-division\">\r\n                            {getFieldDecorator('slbody', {\r\n                                initialValue : this.props.chapter.slidedetails.slbody,\r\n                                rules: [{ required: true, message: 'Пожалуйста, введите название подразделения!', whitespace: true }],\r\n                            })(<Input />)}\r\n                        </Form.Item>\r\n                    \r\n                        <Form.Item label=\"Слайд\">\r\n                        <Upload {...SlideImageprops} beforeUpload={this.upl} onRemove={(f)=>this.SlideImageonChange(null)} onSuccess={(f)=>this.SlideImageonChange(f)}>\r\n                                {getFieldDecorator('slimage', {\r\n                                    initialValue : this.props.chapter.slidedetails.slimage,\r\n                                    rules: [{ required: false, message: 'Пожалуйста, загрузите логотип вашей компании!', whitespace: true }],\r\n                                })(<img src={this.props.chapter.slidedetails.slimage} style={{width: \"60px\",height: \"60px\",}}/>)\r\n                                }\r\n                                \r\n                                <Button style={{marginLeft: '100px'}}>\r\n                                    <Icon type=\"upload\" /> Загрузить\r\n                                </Button>\r\n                                \r\n                            </Upload>\r\n                        </Form.Item> */}\r\n\r\n                        \r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\" block>\r\n                                {this.props.chapter.Slidemode}\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    admin : state.admin,\r\n    chapter : state.chapter\r\n});\r\n\r\nconst NewSlideForm = Form.create({ name: 'register' })(NewSlide);\r\n\r\nexport default connect(mapStateToProps,{\r\n    ChangeSlideConfirmDirty,\r\n    ChangeSlideModalState,\r\n    ChangeSlideTableData\r\n})(NewSlideForm);\r\n\r\n"]},"metadata":{},"sourceType":"module"}
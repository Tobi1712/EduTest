{"ast":null,"code":"import _objectSpread from \"C:\\\\React_project\\\\EduTest\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\React_project\\\\EduTest\\\\frontend\\\\src\\\\components\\\\trainer\\\\allquestions\\\\allquestion.js\";\nimport React, { Component } from 'react';\nimport { Table, Input, Button, Icon, Typography, Popconfirm, Divider, Modal, Select, Row, Col } from 'antd';\nimport Highlighter from 'react-highlight-words';\nimport { connect } from 'react-redux';\nimport { ChangeQuestionModalState, ChangeQuestionTableData, ChangeQuestionSearchText } from //ChangeSelectedSubjects,\n// ChangeSelectedChapter,\n// ChangeSelectedMaterials\n'../../../actions/trainerAction'; // import { \n//   ChangeSubjectTableData\n// } from '../../../actions/adminAction';\n\nimport { ChangeMaterialTableData, ChangeChapterTableData } from '../../../actions/chapterAction';\nimport './allquestion.css';\nimport Alert from '../../../components/common/alert';\nimport { SecurePost } from '../../../services/axiosCall';\nimport apis from '../../../services/Apis';\nimport NewQuestionForm from '../newquestion/newquestion';\nimport QuestionDetails from '../questionDetails/questiondetails';\n\nclass AllQuestions extends Component {\n  constructor(props) {\n    super(props);\n\n    this.OpendetailsModal = id => {\n      this.setState((previousState, previousProps) => {\n        return {\n          questiondetailsId: id,\n          questiondetailsModelVisible: true\n        };\n      });\n    };\n\n    this.ClosedetailsModal = () => {\n      this.setState((previousState, previousProps) => {\n        return {\n          questiondetailsId: null,\n          questiondetailsModelVisible: false\n        };\n      });\n    };\n\n    this.openModal = (id, mode) => {\n      this.props.ChangeQuestionModalState(true, id, mode);\n    };\n\n    this.closeModal = () => {\n      this.props.ChangeQuestionModalState(false, null, 'Регистрация');\n    };\n\n    this.deleteQuestion = id => {\n      SecurePost({\n        url: \"\".concat(apis.DELETE_QUESTION),\n        data: {\n          _id: id\n        }\n      }).then(response => {\n        if (response.data.success) {\n          Alert('success', 'Успешно', response.data.message); //this.props.ChangeQuestionTableData(this.props.trainer.selectedChapter);\n          //this.props.ChangeQuestionTableData(this.props.trainer.selectedMaterials);\n        } else {\n          return Alert('warning', 'Предупреждение!', response.data.message);\n        }\n      }).catch(error => {\n        return Alert('error', 'Ошибка!', 'Ошибка сервера');\n      });\n    };\n\n    this.getColumnSearchProps = dataIndex => ({\n      filterDropdown: ({\n        setSelectedKeys,\n        selectedKeys,\n        confirm,\n        clearFilters\n      }) => React.createElement(\"div\", {\n        style: {\n          padding: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(Input, {\n        ref: node => {\n          this.searchInput = node;\n        },\n        placeholder: \"Search \".concat(dataIndex),\n        value: selectedKeys[0],\n        onChange: e => setSelectedKeys(e.target.value ? [e.target.value] : []),\n        onPressEnter: () => this.handleSearch(selectedKeys, confirm),\n        style: {\n          width: 188,\n          marginBottom: 8,\n          display: 'block'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        onClick: () => this.handleSearch(selectedKeys, confirm),\n        icon: \"search\",\n        size: \"small\",\n        style: {\n          width: 90,\n          marginRight: 8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Search\"), React.createElement(Button, {\n        onClick: () => this.handleReset(clearFilters),\n        size: \"small\",\n        style: {\n          width: 90\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"Reset\")),\n      filterIcon: filtered => React.createElement(Icon, {\n        type: \"search\",\n        style: {\n          color: filtered ? '#1890ff' : undefined\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }),\n      onFilter: (value, record) => record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\n      onFilterDropdownVisibleChange: visible => {\n        if (visible) {\n          setTimeout(() => this.searchInput.select());\n        }\n      },\n      render: text => React.createElement(Highlighter, {\n        highlightStyle: {\n          backgroundColor: '#ffc069',\n          padding: 0\n        },\n        searchWords: [this.props.trainer.QuestionsearchText],\n        autoEscape: true,\n        textToHighlight: text.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      })\n    });\n\n    this.handleSearch = (selectedKeys, confirm) => {\n      confirm();\n      this.props.ChangeQuestionSearchText(selectedKeys[0]);\n    };\n\n    this.handleReset = clearFilters => {\n      clearFilters();\n      this.props.ChangeQuestionSearchText('');\n    };\n\n    console.log(\"Question123\", this.props);\n    this.state = {\n      questiondetailsId: null,\n      questiondetailsModelVisible: false,\n      QuestionTableLoading: false\n    };\n  }\n\n  componentDidMount() {\n    //this.props.ChangeMaterialTableData();\n    // this.props.ChangeChapterTableData();\n    this.props.ChangeQuestionTableData(this.props.id); //this.props.ChangeQuestionTableData(this.props.trainer.selectedMaterials);\n  } // openNewModal = (mode)=>{\n  //   this.props.ChangeQuestionModalState(true);\n  // }\n  // closeNewModal = ()=>{\n  //   this.props.ChangeQuestionModalState(false);\n  // }\n\n\n  render() {\n    const Title = Typography.Title;\n    const columns = [// {\n    //   title: 'Chapter',\n    //   dataIndex: 'chapter.name',\n    //   key: 'chapter.name',\n    //   width: '15%',\n    // },\n    // {\n    //   title: 'Material',\n    //   dataIndex: 'materials.topic',\n    //   key: 'materials.topic',\n    //   width: '15%',\n    // },\n    _objectSpread({\n      title: 'Question',\n      dataIndex: 'body',\n      key: 'body',\n      width: '50%'\n    }, this.getColumnSearchProps('body')), {\n      title: 'Created By',\n      dataIndex: 'createdBy.name',\n      key: 'createdBy.name',\n      width: '15%'\n    }, {\n      title: 'Action',\n      key: '_id',\n      dataIndex: '_id',\n      width: '15%',\n      render: key => React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"primary\",\n        shape: \"circle\",\n        onClick: () => this.OpendetailsModal(key),\n        icon: \"info-circle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"primary\",\n        shape: \"circle\",\n        onClick: () => this.openModal(null, 'Регистрация'),\n        icon: \"info-circle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }), React.createElement(Divider, {\n        type: \"vertical\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }), React.createElement(Popconfirm, {\n        title: \"\\u0412\\u044B \\u0443\\u0432\\u0435\\u0440\\u0435\\u043D\\u044B\\uFF1F\",\n        cancelText: \"\\u041D\\u0435\\u0442\",\n        okText: \"\\u0414\\u0430\",\n        onConfirm: () => {\n          this.deleteQuestion(key);\n        },\n        icon: React.createElement(Icon, {\n          type: \"delete\",\n          style: {\n            color: 'red'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"danger\",\n        shape: \"circle\",\n        icon: \"delete\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      })))\n    }];\n    return React.createElement(\"div\", {\n      className: \"admin-table-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      icon: \"question-circle\",\n      style: {\n        marginBottom: '10px'\n      },\n      onClick: () => this.openModal('Добавить новый вопрос'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u043D\\u043E\\u0432\\u044B\\u0439 \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\")))), React.createElement(\"div\", {\n      className: \"register-trainer-form-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(Title, {\n      level: 4,\n      style: {\n        color: '#fff',\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"\\u0412\\u043E\\u043F\\u0440\\u043E\\u0441\\u044B\")), React.createElement(Table, {\n      bordered: true,\n      columns: columns,\n      dataSource: this.props.trainer.QuestionTableData,\n      size: \"medium\",\n      pagination: {\n        pageSize: 5\n      },\n      loading: this.props.trainer.QuestionTableLoading,\n      rowKey: \"_id\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      visible: this.props.trainer.NewQuestionmodalOpened,\n      title: \"\\u041D\\u043E\\u0432\\u044B\\u0439 \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\",\n      onCancel: this.closeModal,\n      style: {\n        top: '20px',\n        padding: '0px',\n        backgroundColor: 'rgb(155,175,190)'\n      },\n      width: \"90%\",\n      destroyOnClose: true,\n      footer: [],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(NewQuestionForm, {\n      qnid: this.props.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    })), React.createElement(Modal, {\n      visible: this.state.questiondetailsModelVisible,\n      title: \"Question Details\",\n      onCancel: this.ClosedetailsModal,\n      style: {\n        top: '20px',\n        padding: '0px',\n        backgroundColor: 'rgb(155,175,190)'\n      },\n      width: \"70%\",\n      destroyOnClose: true,\n      footer: [],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(QuestionDetails, {\n      id: this.state.questiondetailsId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  trainer: state.trainer,\n  admin: state.admin,\n  chapter: state.chapter\n});\n\nexport default connect(mapStateToProps, {\n  ChangeQuestionModalState,\n  ChangeQuestionTableData,\n  ChangeQuestionSearchText // ChangeSelectedSubjects,\n  // ChangeSelectedChapter,\n  // ChangeSelectedMaterials,\n  // ChangeChapterTableData,\n  // ChangeMaterialTableData\n\n})(AllQuestions);","map":{"version":3,"sources":["C:\\React_project\\EduTest\\frontend\\src\\components\\trainer\\allquestions\\allquestion.js"],"names":["React","Component","Table","Input","Button","Icon","Typography","Popconfirm","Divider","Modal","Select","Row","Col","Highlighter","connect","ChangeQuestionModalState","ChangeQuestionTableData","ChangeQuestionSearchText","ChangeMaterialTableData","ChangeChapterTableData","Alert","SecurePost","apis","NewQuestionForm","QuestionDetails","AllQuestions","constructor","props","OpendetailsModal","id","setState","previousState","previousProps","questiondetailsId","questiondetailsModelVisible","ClosedetailsModal","openModal","mode","closeModal","deleteQuestion","url","DELETE_QUESTION","data","_id","then","response","success","message","catch","error","getColumnSearchProps","dataIndex","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","padding","node","searchInput","e","target","value","handleSearch","width","marginBottom","display","marginRight","handleReset","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","onFilterDropdownVisibleChange","visible","setTimeout","select","render","text","backgroundColor","trainer","QuestionsearchText","console","log","state","QuestionTableLoading","componentDidMount","Title","columns","title","key","textAlign","QuestionTableData","pageSize","NewQuestionmodalOpened","top","mapStateToProps","admin","chapter"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Table, Input, Button, Icon, Typography,Popconfirm,Divider, Modal, Select, Row, Col  } from 'antd';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { connect } from 'react-redux';\r\nimport { \r\n  ChangeQuestionModalState,\r\n  ChangeQuestionTableData,\r\n  ChangeQuestionSearchText,\r\n  //ChangeSelectedSubjects,\r\n  // ChangeSelectedChapter,\r\n  // ChangeSelectedMaterials\r\n} from '../../../actions/trainerAction';\r\n// import { \r\n//   ChangeSubjectTableData\r\n// } from '../../../actions/adminAction';\r\nimport { \r\n  ChangeMaterialTableData,\r\n  ChangeChapterTableData\r\n} from '../../../actions/chapterAction';\r\nimport './allquestion.css'\r\nimport Alert from '../../../components/common/alert';\r\nimport {SecurePost} from '../../../services/axiosCall';\r\nimport apis from '../../../services/Apis';\r\nimport NewQuestionForm from '../newquestion/newquestion';\r\nimport QuestionDetails from '../questionDetails/questiondetails';\r\n\r\n\r\n\r\nclass AllQuestions extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    console.log(\"Question123\",this.props);\r\n    this.state={\r\n      questiondetailsId : null,\r\n      questiondetailsModelVisible:false,\r\n      QuestionTableLoading : false\r\n    }\r\n  }\r\n  OpendetailsModal = (id)=>{\r\n    this.setState((previousState,previousProps)=>{\r\n      return{\r\n        questiondetailsId:id,\r\n        questiondetailsModelVisible:true\r\n      }\r\n    })\r\n  }\r\n  ClosedetailsModal = ()=>{\r\n    this.setState((previousState,previousProps)=>{\r\n      return{\r\n        questiondetailsId:null,\r\n        questiondetailsModelVisible:false\r\n      }\r\n    })\r\n  }\r\n\r\n  componentDidMount(){\r\n    //this.props.ChangeMaterialTableData();\r\n    // this.props.ChangeChapterTableData();\r\n    this.props.ChangeQuestionTableData(this.props.id);\r\n    //this.props.ChangeQuestionTableData(this.props.trainer.selectedMaterials);\r\n  }\r\n\r\n  // openNewModal = (mode)=>{\r\n  //   this.props.ChangeQuestionModalState(true);\r\n  // }\r\n\r\n  // closeNewModal = ()=>{\r\n  //   this.props.ChangeQuestionModalState(false);\r\n  // }\r\n\r\n  openModal = (id,mode)=>{\r\n    this.props.ChangeQuestionModalState(true, id, mode);\r\n  }\r\n\r\n  closeModal = ()=>{\r\n    this.props.ChangeQuestionModalState(false, null, 'Регистрация');\r\n  }\r\n\r\n  deleteQuestion = (id)=>{\r\n    SecurePost({\r\n      url : `${apis.DELETE_QUESTION}`,\r\n      data : {\r\n          _id : id\r\n      }\r\n    }).then((response)=>{\r\n      if(response.data.success){\r\n        Alert('success','Успешно',response.data.message);\r\n        //this.props.ChangeQuestionTableData(this.props.trainer.selectedChapter);\r\n        //this.props.ChangeQuestionTableData(this.props.trainer.selectedMaterials);\r\n      }\r\n      else{\r\n        return Alert('warning','Предупреждение!',response.data.message);\r\n      }\r\n    }).catch((error)=>{\r\n      return Alert('error','Ошибка!','Ошибка сервера');\r\n    })\r\n  }\r\n\r\n    getColumnSearchProps = dataIndex => ({\r\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n          <div style={{ padding: 8 }}>\r\n            <Input\r\n              ref={node => {\r\n                this.searchInput = node;\r\n              }}\r\n              placeholder={`Search ${dataIndex}`}\r\n              value={selectedKeys[0]}\r\n              onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n              onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\r\n              style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n            />\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => this.handleSearch(selectedKeys, confirm)}\r\n              icon=\"search\"\r\n              size=\"small\"\r\n              style={{ width: 90, marginRight: 8 }}\r\n            >\r\n              Search\r\n            </Button>\r\n            <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        ),\r\n        filterIcon: filtered => (\r\n          <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\r\n        ),\r\n        onFilter: (value, record) =>\r\n          record[dataIndex]\r\n            .toString()\r\n            .toLowerCase()\r\n            .includes(value.toLowerCase()),\r\n        onFilterDropdownVisibleChange: visible => {\r\n          if (visible) {\r\n            setTimeout(() => this.searchInput.select());\r\n          }\r\n        },\r\n        render: text => (\r\n          <Highlighter\r\n            highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n            searchWords={[this.props.trainer.QuestionsearchText]}\r\n            autoEscape\r\n            textToHighlight={text.toString()}\r\n          />\r\n        ),\r\n      });\r\n    \r\n      handleSearch = (selectedKeys, confirm) => {\r\n        confirm();\r\n        this.props.ChangeQuestionSearchText(selectedKeys[0])\r\n      };\r\n    \r\n      handleReset = clearFilters => {\r\n        clearFilters();\r\n        this.props.ChangeQuestionSearchText('')\r\n      };\r\n\r\n    render() {\r\n      const { Title } = Typography;\r\n      const columns = [\r\n        // {\r\n        //   title: 'Chapter',\r\n        //   dataIndex: 'chapter.name',\r\n        //   key: 'chapter.name',\r\n        //   width: '15%',\r\n        // },\r\n        // {\r\n        //   title: 'Material',\r\n        //   dataIndex: 'materials.topic',\r\n        //   key: 'materials.topic',\r\n        //   width: '15%',\r\n        // },\r\n        {\r\n          title: 'Question',\r\n          dataIndex: 'body',\r\n          key: 'body',\r\n          width: '50%',\r\n          ...this.getColumnSearchProps('body'),\r\n        },\r\n        {\r\n          title: 'Created By',\r\n          dataIndex: 'createdBy.name',\r\n          key: 'createdBy.name',\r\n          width: '15%'\r\n        },\r\n        \r\n        {\r\n          title: 'Action',\r\n          key: '_id',\r\n          dataIndex: '_id',\r\n          width: '15%',\r\n          render: (key) => (\r\n            <span>\r\n              <Button type=\"primary\" shape=\"circle\" onClick={()=>this.OpendetailsModal(key)} icon=\"info-circle\" />\r\n              <Button type=\"primary\" shape=\"circle\" onClick={()=>this.openModal(null,'Регистрация')} icon=\"info-circle\" />\r\n              <Divider type=\"vertical\" />\r\n              <Popconfirm\r\n                  title=\"Вы уверены？\"\r\n                  cancelText=\"Нет\"\r\n                  okText=\"Да\"\r\n                  onConfirm={()=>{this.deleteQuestion(key)}}\r\n                  icon={<Icon type=\"delete\" style={{ color: 'red' }} />}\r\n                >\r\n                  <Button type=\"danger\" shape=\"circle\" icon=\"delete\" />\r\n                </Popconfirm>\r\n            </span>\r\n          ),\r\n        },\r\n      ];\r\n        return (\r\n            <div className=\"admin-table-container\">\r\n              <div>\r\n                <Row>\r\n                  <Col span={12}>\r\n                    <Button type=\"primary\" icon=\"question-circle\" style={{marginBottom:'10px'}} onClick={()=>this.openModal('Добавить новый вопрос')}>\r\n                      Добавить новый вопрос\r\n                    </Button>\r\n                  </Col>\r\n                  {/* <Col span={12}>\r\n                    <Select\r\n                      mode=\"multiple\"\r\n                      placeholder=\"Выберите одну или несколько глав\"\r\n                      defaultValue={this.props.trainer.selectedChapter}\r\n                      onChange={this.handleChapterChange}\r\n                      style={{ width: '100%' }}\r\n                      allowClear={true}\r\n                      optionFilterProp=\"s\"\r\n                    >\r\n                      {this.props.chapter.chapterTableData.map(item => (\r\n                        <Select.Option key={item._id} value={item._id} s={item.name}>\r\n                          {item.name}\r\n                        </Select.Option>\r\n                      ))}\r\n                    </Select>\r\n                  </Col> */}\r\n                </Row>\r\n              </div>\r\n              <div className=\"register-trainer-form-header\">\r\n                <Title level={4} style={{color:'#fff',textAlign:'center'}}>Вопросы</Title>\r\n              </div>\r\n              <Table \r\n                bordered={true} \r\n                columns={columns} \r\n                dataSource={this.props.trainer.QuestionTableData} \r\n                size=\"medium\" \r\n                pagination={{ pageSize: 5 }}\r\n                loading={this.props.trainer.QuestionTableLoading}\r\n                rowKey=\"_id\" \r\n              />\r\n              <Modal\r\n                visible={this.props.trainer.NewQuestionmodalOpened}\r\n                title=\"Новый вопрос\"\r\n                onCancel={this.closeModal}\r\n                style={{top :'20px',padding:'0px',backgroundColor:'rgb(155,175,190)'}}\r\n                width=\"90%\"\r\n                destroyOnClose={true}\r\n                footer={[]}\r\n              >\r\n                <NewQuestionForm qnid={this.props.id}/>\r\n              </Modal>\r\n\r\n              <Modal\r\n                visible={this.state.questiondetailsModelVisible}\r\n                title=\"Question Details\"\r\n                onCancel={this.ClosedetailsModal}\r\n                style={{top :'20px',padding:'0px',backgroundColor:'rgb(155,175,190)'}}\r\n                width=\"70%\"\r\n                destroyOnClose={true}\r\n                footer={[]}\r\n              >\r\n                <QuestionDetails id={this.state.questiondetailsId} />\r\n              </Modal>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    trainer : state.trainer,\r\n    admin : state.admin,\r\n    chapter : state.chapter\r\n});\r\n\r\nexport default connect(mapStateToProps,{\r\n  ChangeQuestionModalState,\r\n  ChangeQuestionTableData,\r\n  ChangeQuestionSearchText,\r\n // ChangeSelectedSubjects,\r\n  // ChangeSelectedChapter,\r\n  // ChangeSelectedMaterials,\r\n  // ChangeChapterTableData,\r\n  // ChangeMaterialTableData\r\n})(AllQuestions);"]},"metadata":{},"sourceType":"module"}
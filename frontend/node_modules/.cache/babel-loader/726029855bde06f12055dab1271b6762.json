{"ast":null,"code":"import apis from '../services/Apis';\nimport Alert from '../components/common/alert';\nimport { SecurePost, SecureGet } from '../services/axiosCall';\nexport const ChangeQuestionModalState = d1 => dispatch => {\n  dispatch({\n    type: 'CHANGE_QUESTION_MODAL_STATE',\n    payload1: d1\n  });\n};\nexport const ChangeQuestionModalState2 = (d1, d2, d3) => dispatch => {\n  if (d3 === 'Сохранить') {\n    SecureGet({\n      url: \"\".concat(apis.FETCH_SINGLE_QUESTION, \"/\").concat(d2)\n    }).then(response => {\n      console.log(response);\n\n      if (response.data.success) {\n        dispatch({\n          type: 'CHANGE_QUESTION_MODAL_STATE',\n          payload1: true,\n          payload2: d2,\n          payload3: 'Сохранить',\n          payload4: response.data.data[0]\n        });\n      } else {\n        return Alert('warning', 'Предупреждение!', response.data.message);\n      }\n    }).catch(error => {\n      return Alert('error', 'Ошибка!', 'Ошибка сервера');\n    });\n  } else {\n    dispatch({\n      type: 'CHANGE_QUESTION_MODAL_STATE',\n      payload1: d1,\n      payload2: d2,\n      payload3: d3,\n      payload4: {\n        body: null,\n        options: null,\n        quesimg: null,\n        material: null\n      }\n    });\n  }\n};\nexport const ChangeQuestionConfirmDirty = d => dispatch => {\n  dispatch({\n    type: 'CHANGE_QUESTION_FORM_CONFIRMDIRTY',\n    payload: d\n  });\n};\nexport const ChangeQuestionSearchText = d => dispatch => {\n  dispatch({\n    type: 'CHANGE_QUESTION_SEARCH_TEXT',\n    payload: d\n  });\n};\nexport const ChangeQuestionTableData = materialId => dispatch => {\n  dispatch({\n    type: 'CHANGE_QUESTION_TABLE_LOADING_STATUS',\n    payload1: true,\n    payload2: []\n  });\n  SecurePost({\n    url: \"\".concat(apis.GET_ALL_QUESTIONS, \"/\").concat(materialId),\n    data: {\n      //chapter : d,\n      material: materialId // SecureGet({\n      //     url:  `${apis.GET_ALL_QUESTIONS}/${materialId}`\n\n    }\n  }).then(response => {\n    console.log(response);\n\n    if (response.data.success) {\n      dispatch({\n        type: 'CHANGE_QUESTION_TABLE_LOADING_STATUS',\n        payload1: false,\n        payload2: response.data.data\n      });\n    } else {\n      Alert('error', 'Ошибкаsd!', response.data.message);\n      dispatch({\n        type: 'CHANGE_QUESTION_TABLE_LOADING_STATUS',\n        payload1: false,\n        payload2: []\n      });\n    }\n  }).catch(error => {\n    Alert('error', 'Ошибка!', 'Ошибка сервера');\n    dispatch({\n      type: 'CHANGE_QUESTION_TABLE_LOADING_STATUS',\n      payload1: false,\n      payload2: []\n    });\n  });\n}; // export const ChangeSelectedChapter = (d)=> dispatch =>{\n//     dispatch({\n//        type : 'CHANGE_SELECTED_CHAPTER',\n//        payload : d\n//     })\n// }\n// export const ChangeSelectedMaterials = (d)=> dispatch =>{\n//     dispatch({\n//        type : 'CHANGE_SELECTED_MATERIAL',\n//        payload : d\n//     })\n// }\n\nexport const ChangeQuestionFormData = d => dispatch => {\n  dispatch({\n    type: 'CHANGE_QUESTION_FORM_DATA',\n    payload: d\n  });\n}; // export const AddFifthOptionInQuestion = ()=> dispatch =>{\n//     dispatch({\n//        type : 'ADD_FIFTH_OPTION'\n//     })\n// }\n\nexport const ChangeTestDetailsModalState = (d1, d2) => dispatch => {\n  dispatch({\n    type: 'CHANGE_TEST_DETAILS_MODAL_STATE',\n    payload1: d1,\n    payload2: d2\n  });\n};\nexport const NewTestModalState = (d1, d2) => dispatch => {\n  dispatch({\n    type: 'NEW_TEST_MODAL_STATE',\n    payload1: d1,\n    payload2: d2\n  });\n};\nexport const ChangeTestSearchText = d => dispatch => {\n  dispatch({\n    type: 'CHANGE_TEST_SEARCH_TEXT',\n    payload: d\n  });\n};\nexport const ChangeTestTableData = () => dispatch => {\n  dispatch({\n    type: 'CHANGE_TEST_TABLE_LOADING_STATUS',\n    payload1: true,\n    payload2: []\n  });\n  SecurePost({\n    url: \"\".concat(apis.GET_ALL_TESTS)\n  }).then(response => {\n    console.log(response.data);\n\n    if (response.data.success) {\n      dispatch({\n        type: 'CHANGE_TEST_TABLE_LOADING_STATUS',\n        payload1: false,\n        payload2: response.data.data\n      });\n    } else {\n      Alert('error', 'Ошибка!', response.data.message);\n      dispatch({\n        type: 'CHANGE_TEST_TABLE_LOADING_STATUS',\n        payload1: false,\n        payload2: []\n      });\n    }\n  }).catch(error => {\n    console.log(error);\n    Alert('error', 'Ошибка!', 'Ошибка сервера');\n    dispatch({\n      type: 'CHANGE_TEST_TABLE_LOADING_STATUS',\n      payload1: false,\n      payload2: []\n    });\n  });\n};\nexport const updateQuestiosnActiveTest = d => {\n  return {\n    type: 'CHANGE_CURRENT_ACTIVE_TEST_QUESTION',\n    payload: d\n  };\n};","map":{"version":3,"sources":["C:\\React_project\\EduTest\\frontend\\src\\actions\\trainerAction.js"],"names":["apis","Alert","SecurePost","SecureGet","ChangeQuestionModalState","d1","dispatch","type","payload1","ChangeQuestionModalState2","d2","d3","url","FETCH_SINGLE_QUESTION","then","response","console","log","data","success","payload2","payload3","payload4","message","catch","error","body","options","quesimg","material","ChangeQuestionConfirmDirty","d","payload","ChangeQuestionSearchText","ChangeQuestionTableData","materialId","GET_ALL_QUESTIONS","ChangeQuestionFormData","ChangeTestDetailsModalState","NewTestModalState","ChangeTestSearchText","ChangeTestTableData","GET_ALL_TESTS","updateQuestiosnActiveTest"],"mappings":"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","sourcesContent":["import apis from '../services/Apis';\r\nimport Alert from '../components/common/alert';\r\nimport { SecurePost, SecureGet } from '../services/axiosCall';\r\n\r\nexport const ChangeQuestionModalState = (d1)=> dispatch =>{\r\n        dispatch({\r\n            type : 'CHANGE_QUESTION_MODAL_STATE',\r\n            payload1 : d1,\r\n        })\r\n    }\r\n    \r\n\r\n    export const ChangeQuestionModalState2 = (d1,d2,d3)=> dispatch =>{\r\n        if(d3==='Сохранить'){\r\n            SecureGet({\r\n                url : `${apis.FETCH_SINGLE_QUESTION}/${d2}`\r\n            }).then((response)=>{\r\n                console.log(response);\r\n                if(response.data.success){\r\n                    dispatch({\r\n                        type : 'CHANGE_QUESTION_MODAL_STATE',\r\n                        payload1 : true,\r\n                        payload2 : d2,\r\n                        payload3 : 'Сохранить',\r\n                        payload4 : response.data.data[0],\r\n                        \r\n                    })\r\n                }\r\n                else{\r\n                    return Alert('warning','Предупреждение!',response.data.message);\r\n                }\r\n            }).catch((error)=>{\r\n                return Alert('error','Ошибка!','Ошибка сервера');\r\n            })\r\n        }\r\n        else{\r\n            dispatch({\r\n                type : 'CHANGE_QUESTION_MODAL_STATE',\r\n                payload1 : d1,\r\n                payload2 : d2,\r\n                payload3 : d3,\r\n                payload4: {\r\n                    body: null,\r\n                    options:null,\r\n                    quesimg : null,\r\n                    material:null,\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\nexport const ChangeQuestionConfirmDirty = (d)=> dispatch =>{\r\n    dispatch({\r\n       type : 'CHANGE_QUESTION_FORM_CONFIRMDIRTY',\r\n       payload : d\r\n    })\r\n}\r\n\r\n\r\nexport const ChangeQuestionSearchText = (d)=> dispatch =>{\r\n    dispatch({\r\n       type : 'CHANGE_QUESTION_SEARCH_TEXT',\r\n       payload : d\r\n    })\r\n}\r\n\r\nexport const ChangeQuestionTableData = (materialId)=> dispatch =>{\r\n    dispatch({\r\n       type : 'CHANGE_QUESTION_TABLE_LOADING_STATUS',\r\n       payload1 : true,\r\n       payload2:[]\r\n    });\r\n    SecurePost({\r\n        url : `${apis.GET_ALL_QUESTIONS}/${materialId}`,\r\n        data:{\r\n            //chapter : d,\r\n            material : materialId,\r\n        }\r\n    // SecureGet({\r\n    //     url:  `${apis.GET_ALL_QUESTIONS}/${materialId}`\r\n    }).then((response)=>{\r\n        console.log(response);\r\n        if(response.data.success){\r\n            dispatch({\r\n                type : 'CHANGE_QUESTION_TABLE_LOADING_STATUS',\r\n                payload1 : false,\r\n                payload2 : response.data.data\r\n            })\r\n        }\r\n        else{\r\n            Alert('error','Ошибкаsd!',response.data.message);\r\n            dispatch({\r\n                type : 'CHANGE_QUESTION_TABLE_LOADING_STATUS',\r\n                payload1 : false,\r\n                payload2 : []\r\n            })\r\n        }\r\n    }).catch((error)=>{\r\n        Alert('error','Ошибка!','Ошибка сервера');\r\n        dispatch({\r\n            type : 'CHANGE_QUESTION_TABLE_LOADING_STATUS',\r\n            payload1 : false,\r\n            payload2 : []\r\n        })\r\n    })\r\n\r\n}\r\n\r\n// export const ChangeSelectedChapter = (d)=> dispatch =>{\r\n//     dispatch({\r\n//        type : 'CHANGE_SELECTED_CHAPTER',\r\n//        payload : d\r\n//     })\r\n// }\r\n\r\n// export const ChangeSelectedMaterials = (d)=> dispatch =>{\r\n//     dispatch({\r\n//        type : 'CHANGE_SELECTED_MATERIAL',\r\n//        payload : d\r\n//     })\r\n// }\r\n\r\nexport const ChangeQuestionFormData = (d)=> dispatch =>{\r\n    dispatch({\r\n       type : 'CHANGE_QUESTION_FORM_DATA',\r\n       payload : d\r\n    })\r\n}\r\n\r\n// export const AddFifthOptionInQuestion = ()=> dispatch =>{\r\n//     dispatch({\r\n//        type : 'ADD_FIFTH_OPTION'\r\n//     })\r\n// }\r\n\r\n\r\n\r\n\r\n\r\nexport const ChangeTestDetailsModalState = (d1,d2)=> dispatch =>{\r\n    dispatch({\r\n       type : 'CHANGE_TEST_DETAILS_MODAL_STATE',\r\n       payload1 : d1,\r\n       payload2 : d2\r\n    })\r\n}\r\n\r\nexport const NewTestModalState = (d1,d2)=> dispatch =>{\r\n    dispatch({\r\n       type : 'NEW_TEST_MODAL_STATE',\r\n       payload1 : d1,\r\n       payload2 : d2\r\n    })\r\n}\r\n\r\nexport const ChangeTestSearchText = (d)=> dispatch =>{\r\n    dispatch({\r\n       type : 'CHANGE_TEST_SEARCH_TEXT',\r\n       payload : d\r\n    })\r\n}\r\n\r\nexport const ChangeTestTableData = ()=> dispatch =>{\r\n    dispatch({\r\n        type : 'CHANGE_TEST_TABLE_LOADING_STATUS',\r\n        payload1 : true,\r\n        payload2:[]\r\n    });\r\n    SecurePost({\r\n        url : `${apis.GET_ALL_TESTS}`,\r\n    }).then((response)=>{\r\n        console.log(response.data);\r\n        if(response.data.success){\r\n            dispatch({\r\n                type : 'CHANGE_TEST_TABLE_LOADING_STATUS',\r\n                payload1 : false,\r\n                payload2 : response.data.data\r\n            })\r\n        }\r\n        else{\r\n            Alert('error','Ошибка!',response.data.message);\r\n            dispatch({\r\n                type : 'CHANGE_TEST_TABLE_LOADING_STATUS',\r\n                payload1 : false,\r\n                payload2 : []\r\n            })\r\n    }\r\n    }).catch((error)=>{\r\n        console.log(error);\r\n        Alert('error','Ошибка!','Ошибка сервера');\r\n        dispatch({\r\n            type : 'CHANGE_TEST_TABLE_LOADING_STATUS',\r\n            payload1 : false,\r\n            payload2 : []\r\n        })\r\n    })\r\n}\r\n\r\nexport const updateQuestiosnActiveTest = (d)=>{\r\n    return{\r\n        type:'CHANGE_CURRENT_ACTIVE_TEST_QUESTION',\r\n        payload:d\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}
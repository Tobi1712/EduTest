{"ast":null,"code":"// import React, { Component, useState,useEffect } from 'react'\n// import { connect } from 'react-redux';\n// import { Button } from 'antd';\n// // import Highlighter from 'react-highlight-words';\n// import  { css } from 'styled-components/macro'\n// import { \n//   //LoginInfo,\n//   ChangeTestSearchText,\n//   ChangeTestTableData,\n//   // ChangeTestModalState,\n//   ChangeAnswersSearchText,\n//   ChangeAnswersTableData,\n//   // ChangeAnswersModalState,\n// } from '../../../actions/chapterAction';\n// import Alert from '../../../components/common/alert';\n// import { SecurePost } from '../../../services/axiosCall';\n// import apis from '../../../services/Apis';\n// import TestPage from './testpage';\n// import styled from \"styled-components\";\n// import \"react-multi-carousel/lib/styles.css\";\n// //import Counter from './Counter';\n// import  LocalizedStrings  from  'react-localization' ;\n// let strings = new LocalizedStrings({\n//   ru:{\n//     Succes:\"Успешно\",\n//     Warning:\"Предупреждение!\",\n//     Err:\"Ошибка!\",\n//     ErrorServer:\"Ошибка сервера\",\n//     Testing:\"Тестирование\",\n//     GoTest:\"Начать тест\",\n//     ContTest:\"Продолжить тест\",\n//   },\n//   kz: {\n//     Succes:\"Сәтті\",\n//     Warning:\"Ескерту!\",\n//     Err:\"Қате!\",\n//     ErrorServer:\"Сервердің қатесі\",\n//     Testing:\"Тестілеу\",\n//     GoTest:\"Тесттi бастау\",\n//     ContTest:\"Тесттi жалғастыру\",\n//   }\n//  });\n// const Container = styled.div`\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n//   min-height: 80vh;\n//   width: 100%;\n//   /*background: #7159c1;*/\n// `;\n// const ScreenQuiz = styled.div`\n//   display: flex;\n//   justify-content: ${props => (props.screen ? \"space-between\" : \"center\")};\n//   align-items: center;\n//   flex-direction: column;\n//   max-width: 1200px;\n//   padding: ${props => (props.screen ? \"5rem\" : \".5rem\")};\n//   width: 100%;\n//   height: 80vh;\n//   background: #fff;\n//   border-radius: 5px;\n//   box-shadow: 0px 5px 40px -20px #000;\n// `;\n// const Title = styled.h1`\n//   font-size: 2.5rem;\n//   // color: #7159c1;\n//   margin-bottom: 0.5rem;\n//   text-align: center;\n//   max-width: 90%;\n// `;\n// // const Paragraph = styled.p`\n// //   font-size: 1.5rem;\n// // `;\n// // const Button = styled.button`\n// //   font-size: 1.2rem;\n// //   font-weight: bold;\n// //   width: 40%;\n// //   height: 3rem;\n// //   // color: #fff;\n// //   border: none;\n// //   // background: #7159c1;\n// //   border-radius: 5px;\n// //   box-shadow: 0px 3px 3px 0px #666;\n// //   @-webkit-keyframes pulsate {\n// //     0% {transform: scale(0.1, 0.1); opacity: 0.0;}\n// //     50% {opacity: 1.0;}\n// //     100% {transform: scale(7, 7); opacity: 0.0;}\n// // }\n// // `;\n// const ButtonScr = styled.button`\n//   font-size: 1.4rem;\n//   z-index: 10;\n//   position: fixed;\n//   top: 15%;\n//   ${(props) =>\n//     props.right\n//       ? css`\n//           right: 25rem;\n//         `\n//       : css`\n//           left: 25rem;\n//         `}\n// `\n// const ContainerLabel = styled.div`\n//   display: flex;\n//   align-items: flex-start;\n//   flex-direction: column;\n//   margin: 0 auto 0.5rem auto;\n// `;\n// const Label = styled.label`\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n// `;\n// const Radio = styled.input.attrs({ type: 'checkbox' })`\n//   display: flex;\n//   justify-content: center;\n//   align-items: center;\n//   width: 15px;\n//   height: 15px;\n//   border-radius: 50%;\n//   border: 7.5px solid black;\n//   margin: 0 0.5rem 0 0;\n//   background: ${props => (props.clickedLabel ? \"#7159c1\" : \"#fff\")};\n// `;\n// // const IntoRadio = styled.div`\n// //   width: 5px;\n// //   height: 5px;\n// //   border-radius: 3px;\n// //   background: #fff;\n// // `;\n// // const Error = styled.div`\n// //   top: 22rem;\n// //   color: red;\n// //   position: absolute;\n// //   font-weight: bold;\n// // `;\n// function Test(props){\n//   const [loading, setLoading] = useState(false)\n//   const [screen, setScreen] = useState(true);\n//   const [count, setCount] = useState(0)\n//   const [answer, setAnswer] = useState(0);\n//   const [matId, setMatId] = useState(props.id);\n//   const [disableButton, setDisableButton] = useState(false);\n//   const [testStarted, setTestStarted] = useState(false);\n//   const [testEnded, setTestEnded] = useState(false);\n//   const [testDidNotStart, setTestDidNotStart] = useState(true);\n//   const [testCreated, setTestCreated] = useState(false);\n//   const [startDate, setStartDate] = useState(Date());\n//   var i=0;\n//   useEffect(()=>{\n//     console.log(\"matId\", matId)\n//     props.ChangeTestTableData(props.id);\n//     props.ChangeAnswersTableData(props.id);\n//   }, [])\n//   const renderInitial = () => {\n//     setScreen(false);\n//     console.log(\"screen\", screen)\n//     setLoading(false);\n//     console.log(\"loading\", loading)\n//     setCount(1);\n//     console.log(\"count\", count)\n//     setTestStarted(true);\n//     console.log(\"testStarted\", testStarted)\n//     setTestEnded(false);\n//     console.log(\"testEnded\", testEnded)\n//     setTestDidNotStart(false);\n//     console.log(\"TestDidNotStart\", testDidNotStart)\n//     setStartDate(new Date());\n//     console.log(\"startDate\", startDate)\n//     return renderScreenInitial();\n//   };\n//   const renderScreenInitial = () => {\n//     console.log(\"renderScreenInitial\")\n//     if((props.chapter.testTableData === undefined)){\n//       console.log(\"1 CREATE_TEST\", props.chapter.testId)\n//       console.log(\"Before CREATE_TEST\", startDate, testStarted, testEnded)\n//       SecurePost({\n//         url : `${apis.CREATE_TEST}`,\n//         data : {\n//           _id: props.chapter.testId,\n//             chapterid : props.chid,\n//             materialid : props.id,\n//             startDate : startDate,\n//             complationDate : startDate,\n//             startTest: testStarted,\n//             endTest: testEnded,\n//             result: 0\n//           }\n//         })\n//         // .then((response)=>{\n//         //   if(response.data.success){\n//         //       // props.ChangeTestModalState(false,null, 'Save'); \n//         //       Alert('success','Успешно',response.data.message);\n//         //   }\n//         //   else{\n//         //       // props.ChangeTestModalState(false,null, 'Save');\n//         //       return Alert('warning','Предупреждение!',response.data.message);\n//         //   }\n//         // })\n//         // .catch((error)=>{\n//         //     // props.ChangeTestModalState(false,null, 'Save');\n//         //     return Alert('error','Ошибка!','Ошибка сервера');\n//         // })\n//     }\n//     else if(props.chapter.testTableData!==null || props.chapter.testTableData!==undefined) {\n//       console.log('else if')\n//       i= i+1;\n//       console.log(\"IIIIIIIIIIIIIIIIIIIIIIIIIIIII:\",i);\n//       SecurePost({\n//         url : `${apis.UPDATE_TEST}`,\n//         data : {\n//             _id: \"634259d0409b00a9880e379c\",\n//             // chapterid : props.chid,\n//             // materialid : props.id,\n//             // startDate : startDate,\n//             // complationDate : startDate,\n//             startTest: true,\n//             endTest: testEnded,\n//             result: 15\n//           }\n//         })\n//         // .then((response)=>{\n//           // if(response.data.success){\n//           //   // console.log(response);\n//           //     // props.ChangeTestModalState(false,null, 'Save'); \n//           //     i = i+1;\n//           //     console.log(i)\n//           //     Alert('success','Успешно',response.data.message);\n//           // }\n//         //   else{\n//         //       // props.ChangeTestModalState(false,null, 'Save');\n//         //       return Alert('warning','Предупреждение!',response.data.message);\n//         //   }\n//         // })\n//         // .catch((error)=>{\n//         //     // props.ChangeTestModalState(false,null, 'Save');\n//         //     return Alert('error','Ошибка!','Ошибка сервера');\n//         // })\n//     // })\n//   }\n//       console.log(\"CREATE_ANSWERS\", props.chapter.testid) \n//       console.log(\"this.props.chapter.testTableData:\", props.chapter.testTableData)\n//       if (props.chapter.testTableData===null || props.chapter.testTableData===undefined) {\n//       SecurePost({\n//         url : `${apis.CREATE_ANSWERS}`,\n//         data : {\n//           materialId : props.id,\n//          testid : null,\n//         }\n//       });\n//     }\n//     if (testStarted==false){\n//       return (\n//         <Container>\n//           <ScreenQuiz screen={screen}>\n//             <Title>Тестирование</Title>\n//             {/* {console.log('ASDFGH:', new Date(this.props.chapter.testTableData.complationDate).getTime())}\n//             {console.log('ZXCVBN:', new Date().getTime())} */}\n//             <Button \n//               onClick={\n//                 renderInitial\n//               } \n//               style={{\n//                 fontSize: \"1.2rem\", \n//                 fontWeight: \"bold\",\n//                 width: \"40%\",\n//                 height: \"3rem\",\n//                 border: \"none\",\n//                 borderRadius: \"5px\",\n//                 boxShadow: \"0px 3px 3px 0px #666\"\n//               }}\n//               >\n//                 Начать тест\n//             </Button>\n//           </ScreenQuiz>\n//         </Container>\n//       );\n//     } \n//     else if (testStarted==true && testEnded==false){\n//       return (\n//         <Container>\n//           <ScreenQuiz screen={screen}>\n//             <Title>Тестирование</Title>\n//             <Button \n//               onClick={renderInitial} \n//               style={{\n//                 fontSize: \"1.2rem\", \n//                 fontWeight: \"bold\",\n//                 width: \"40%\",\n//                 height: \"3rem\",\n//                 border: \"none\",\n//                 borderRadius: \"5px\",\n//                 boxShadow: \"0px 3px 3px 0px #666\"\n//               }}\n//               >\n//                 Продолжить тест\n//             </Button>\n//           </ScreenQuiz>\n//         </Container>\n//       );\n//     }\n//     if(props.chapter.testTableData.complationDate<new Date()){\n//       setTestEnded(true);\n//     }\n//   };\n//   console.log(testStarted);\n//     return screen ? renderScreenInitial() : \n//         <TestPage t={props.chapter.testTableData} q={props.chapter.AnswerTableData} id={props.id} count={count} screen={screen} answer={answer} chid={props.chid} tend={testEnded}/>\n//   }\n// const mapStateToProps = state => ({\n//     chapter : state.chapter\n// });\n// export default connect(mapStateToProps,{\n//     ChangeTestSearchText,\n//     ChangeTestTableData,\n//     // ChangeTestModalState,\n//     ChangeAnswersSearchText,\n//     ChangeAnswersTableData,\n//     // ChangeAnswersModalState\n// })(Test);","map":{"version":3,"names":[],"sources":["C:/React_project/EduTest/frontend/src/components/customer/Testing/test.js"],"sourcesContent":["\r\n\r\n\r\n// import React, { Component, useState,useEffect } from 'react'\r\n// import { connect } from 'react-redux';\r\n// import { Button } from 'antd';\r\n// // import Highlighter from 'react-highlight-words';\r\n// import  { css } from 'styled-components/macro'\r\n// import { \r\n//   //LoginInfo,\r\n//   ChangeTestSearchText,\r\n//   ChangeTestTableData,\r\n//   // ChangeTestModalState,\r\n//   ChangeAnswersSearchText,\r\n//   ChangeAnswersTableData,\r\n//   // ChangeAnswersModalState,\r\n// } from '../../../actions/chapterAction';\r\n\r\n// import Alert from '../../../components/common/alert';\r\n// import { SecurePost } from '../../../services/axiosCall';\r\n// import apis from '../../../services/Apis';\r\n// import TestPage from './testpage';\r\n// import styled from \"styled-components\";\r\n// import \"react-multi-carousel/lib/styles.css\";\r\n// //import Counter from './Counter';\r\n\r\n// import  LocalizedStrings  from  'react-localization' ;\r\n// let strings = new LocalizedStrings({\r\n//   ru:{\r\n//     Succes:\"Успешно\",\r\n//     Warning:\"Предупреждение!\",\r\n//     Err:\"Ошибка!\",\r\n//     ErrorServer:\"Ошибка сервера\",\r\n//     Testing:\"Тестирование\",\r\n//     GoTest:\"Начать тест\",\r\n//     ContTest:\"Продолжить тест\",\r\n//   },\r\n//   kz: {\r\n//     Succes:\"Сәтті\",\r\n//     Warning:\"Ескерту!\",\r\n//     Err:\"Қате!\",\r\n//     ErrorServer:\"Сервердің қатесі\",\r\n//     Testing:\"Тестілеу\",\r\n//     GoTest:\"Тесттi бастау\",\r\n//     ContTest:\"Тесттi жалғастыру\",\r\n//   }\r\n//  });\r\n// const Container = styled.div`\r\n//   display: flex;\r\n//   justify-content: center;\r\n//   align-items: center;\r\n//   min-height: 80vh;\r\n//   width: 100%;\r\n//   /*background: #7159c1;*/\r\n// `;\r\n\r\n// const ScreenQuiz = styled.div`\r\n//   display: flex;\r\n//   justify-content: ${props => (props.screen ? \"space-between\" : \"center\")};\r\n//   align-items: center;\r\n//   flex-direction: column;\r\n//   max-width: 1200px;\r\n//   padding: ${props => (props.screen ? \"5rem\" : \".5rem\")};\r\n//   width: 100%;\r\n//   height: 80vh;\r\n//   background: #fff;\r\n//   border-radius: 5px;\r\n//   box-shadow: 0px 5px 40px -20px #000;\r\n\r\n// `;\r\n\r\n// const Title = styled.h1`\r\n//   font-size: 2.5rem;\r\n//   // color: #7159c1;\r\n//   margin-bottom: 0.5rem;\r\n//   text-align: center;\r\n//   max-width: 90%;\r\n// `;\r\n\r\n// // const Paragraph = styled.p`\r\n// //   font-size: 1.5rem;\r\n// // `;\r\n\r\n// // const Button = styled.button`\r\n// //   font-size: 1.2rem;\r\n// //   font-weight: bold;\r\n// //   width: 40%;\r\n// //   height: 3rem;\r\n// //   // color: #fff;\r\n// //   border: none;\r\n// //   // background: #7159c1;\r\n// //   border-radius: 5px;\r\n// //   box-shadow: 0px 3px 3px 0px #666;\r\n\r\n// //   @-webkit-keyframes pulsate {\r\n// //     0% {transform: scale(0.1, 0.1); opacity: 0.0;}\r\n// //     50% {opacity: 1.0;}\r\n// //     100% {transform: scale(7, 7); opacity: 0.0;}\r\n// // }\r\n// // `;\r\n\r\n// const ButtonScr = styled.button`\r\n//   font-size: 1.4rem;\r\n//   z-index: 10;\r\n//   position: fixed;\r\n//   top: 15%;\r\n//   ${(props) =>\r\n//     props.right\r\n//       ? css`\r\n//           right: 25rem;\r\n//         `\r\n//       : css`\r\n//           left: 25rem;\r\n//         `}\r\n// `\r\n\r\n// const ContainerLabel = styled.div`\r\n//   display: flex;\r\n//   align-items: flex-start;\r\n//   flex-direction: column;\r\n//   margin: 0 auto 0.5rem auto;\r\n// `;\r\n\r\n// const Label = styled.label`\r\n//   display: flex;\r\n//   justify-content: center;\r\n//   align-items: center;\r\n// `;\r\n\r\n// const Radio = styled.input.attrs({ type: 'checkbox' })`\r\n//   display: flex;\r\n//   justify-content: center;\r\n//   align-items: center;\r\n//   width: 15px;\r\n//   height: 15px;\r\n//   border-radius: 50%;\r\n//   border: 7.5px solid black;\r\n//   margin: 0 0.5rem 0 0;\r\n//   background: ${props => (props.clickedLabel ? \"#7159c1\" : \"#fff\")};\r\n// `;\r\n\r\n// // const IntoRadio = styled.div`\r\n// //   width: 5px;\r\n// //   height: 5px;\r\n// //   border-radius: 3px;\r\n// //   background: #fff;\r\n// // `;\r\n\r\n// // const Error = styled.div`\r\n// //   top: 22rem;\r\n// //   color: red;\r\n// //   position: absolute;\r\n// //   font-weight: bold;\r\n// // `;\r\n\r\n\r\n// function Test(props){\r\n//   const [loading, setLoading] = useState(false)\r\n//   const [screen, setScreen] = useState(true);\r\n//   const [count, setCount] = useState(0)\r\n//   const [answer, setAnswer] = useState(0);\r\n//   const [matId, setMatId] = useState(props.id);\r\n//   const [disableButton, setDisableButton] = useState(false);\r\n//   const [testStarted, setTestStarted] = useState(false);\r\n//   const [testEnded, setTestEnded] = useState(false);\r\n//   const [testDidNotStart, setTestDidNotStart] = useState(true);\r\n//   const [testCreated, setTestCreated] = useState(false);\r\n//   const [startDate, setStartDate] = useState(Date());\r\n//   var i=0;\r\n//   useEffect(()=>{\r\n//     console.log(\"matId\", matId)\r\n//     props.ChangeTestTableData(props.id);\r\n//     props.ChangeAnswersTableData(props.id);\r\n//   }, [])\r\n\r\n//   const renderInitial = () => {\r\n//     setScreen(false);\r\n//     console.log(\"screen\", screen)\r\n//     setLoading(false);\r\n//     console.log(\"loading\", loading)\r\n//     setCount(1);\r\n//     console.log(\"count\", count)\r\n//     setTestStarted(true);\r\n//     console.log(\"testStarted\", testStarted)\r\n//     setTestEnded(false);\r\n//     console.log(\"testEnded\", testEnded)\r\n//     setTestDidNotStart(false);\r\n//     console.log(\"TestDidNotStart\", testDidNotStart)\r\n//     setStartDate(new Date());\r\n//     console.log(\"startDate\", startDate)\r\n//     return renderScreenInitial();\r\n//   };\r\n\r\n//   const renderScreenInitial = () => {\r\n//     console.log(\"renderScreenInitial\")\r\n//     if((props.chapter.testTableData === undefined)){\r\n//       console.log(\"1 CREATE_TEST\", props.chapter.testId)\r\n//       console.log(\"Before CREATE_TEST\", startDate, testStarted, testEnded)\r\n//       SecurePost({\r\n//         url : `${apis.CREATE_TEST}`,\r\n//         data : {\r\n//           _id: props.chapter.testId,\r\n//             chapterid : props.chid,\r\n//             materialid : props.id,\r\n//             startDate : startDate,\r\n//             complationDate : startDate,\r\n//             startTest: testStarted,\r\n//             endTest: testEnded,\r\n//             result: 0\r\n//           }\r\n//         })\r\n//         // .then((response)=>{\r\n//         //   if(response.data.success){\r\n//         //       // props.ChangeTestModalState(false,null, 'Save'); \r\n//         //       Alert('success','Успешно',response.data.message);\r\n//         //   }\r\n//         //   else{\r\n//         //       // props.ChangeTestModalState(false,null, 'Save');\r\n//         //       return Alert('warning','Предупреждение!',response.data.message);\r\n//         //   }\r\n//         // })\r\n//         // .catch((error)=>{\r\n//         //     // props.ChangeTestModalState(false,null, 'Save');\r\n//         //     return Alert('error','Ошибка!','Ошибка сервера');\r\n//         // })\r\n//     }\r\n//     else if(props.chapter.testTableData!==null || props.chapter.testTableData!==undefined) {\r\n//       console.log('else if')\r\n//       i= i+1;\r\n//       console.log(\"IIIIIIIIIIIIIIIIIIIIIIIIIIIII:\",i);\r\n//       SecurePost({\r\n//         url : `${apis.UPDATE_TEST}`,\r\n//         data : {\r\n//             _id: \"634259d0409b00a9880e379c\",\r\n//             // chapterid : props.chid,\r\n//             // materialid : props.id,\r\n//             // startDate : startDate,\r\n//             // complationDate : startDate,\r\n//             startTest: true,\r\n//             endTest: testEnded,\r\n//             result: 15\r\n//           }\r\n//         })\r\n//         // .then((response)=>{\r\n//           // if(response.data.success){\r\n//           //   // console.log(response);\r\n//           //     // props.ChangeTestModalState(false,null, 'Save'); \r\n//           //     i = i+1;\r\n//           //     console.log(i)\r\n//           //     Alert('success','Успешно',response.data.message);\r\n//           // }\r\n//         //   else{\r\n//         //       // props.ChangeTestModalState(false,null, 'Save');\r\n//         //       return Alert('warning','Предупреждение!',response.data.message);\r\n//         //   }\r\n//         // })\r\n//         // .catch((error)=>{\r\n//         //     // props.ChangeTestModalState(false,null, 'Save');\r\n//         //     return Alert('error','Ошибка!','Ошибка сервера');\r\n//         // })\r\n//     // })\r\n//   }\r\n  \r\n\r\n\r\n//       console.log(\"CREATE_ANSWERS\", props.chapter.testid) \r\n//       console.log(\"this.props.chapter.testTableData:\", props.chapter.testTableData)\r\n//       if (props.chapter.testTableData===null || props.chapter.testTableData===undefined) {\r\n//       SecurePost({\r\n//         url : `${apis.CREATE_ANSWERS}`,\r\n//         data : {\r\n//           materialId : props.id,\r\n//          testid : null,\r\n//         }\r\n//       });\r\n//     }\r\n//     if (testStarted==false){\r\n//       return (\r\n//         <Container>\r\n//           <ScreenQuiz screen={screen}>\r\n//             <Title>Тестирование</Title>\r\n//             {/* {console.log('ASDFGH:', new Date(this.props.chapter.testTableData.complationDate).getTime())}\r\n//             {console.log('ZXCVBN:', new Date().getTime())} */}\r\n//             <Button \r\n//               onClick={\r\n//                 renderInitial\r\n//               } \r\n//               style={{\r\n//                 fontSize: \"1.2rem\", \r\n//                 fontWeight: \"bold\",\r\n//                 width: \"40%\",\r\n//                 height: \"3rem\",\r\n//                 border: \"none\",\r\n//                 borderRadius: \"5px\",\r\n//                 boxShadow: \"0px 3px 3px 0px #666\"\r\n//               }}\r\n//               >\r\n//                 Начать тест\r\n//             </Button>\r\n            \r\n//           </ScreenQuiz>\r\n//         </Container>\r\n//       );\r\n//     } \r\n//     else if (testStarted==true && testEnded==false){\r\n//       return (\r\n//         <Container>\r\n//           <ScreenQuiz screen={screen}>\r\n//             <Title>Тестирование</Title>\r\n//             <Button \r\n//               onClick={renderInitial} \r\n//               style={{\r\n//                 fontSize: \"1.2rem\", \r\n//                 fontWeight: \"bold\",\r\n//                 width: \"40%\",\r\n//                 height: \"3rem\",\r\n//                 border: \"none\",\r\n//                 borderRadius: \"5px\",\r\n//                 boxShadow: \"0px 3px 3px 0px #666\"\r\n//               }}\r\n//               >\r\n//                 Продолжить тест\r\n//             </Button>\r\n//           </ScreenQuiz>\r\n//         </Container>\r\n//       );\r\n//     }\r\n//     if(props.chapter.testTableData.complationDate<new Date()){\r\n//       setTestEnded(true);\r\n//     }\r\n//   };\r\n\r\n//   console.log(testStarted);\r\n//     return screen ? renderScreenInitial() : \r\n//         <TestPage t={props.chapter.testTableData} q={props.chapter.AnswerTableData} id={props.id} count={count} screen={screen} answer={answer} chid={props.chid} tend={testEnded}/>\r\n//   }\r\n\r\n// const mapStateToProps = state => ({\r\n//     chapter : state.chapter\r\n// });\r\n\r\n// export default connect(mapStateToProps,{\r\n//     ChangeTestSearchText,\r\n//     ChangeTestTableData,\r\n//     // ChangeTestModalState,\r\n//     ChangeAnswersSearchText,\r\n//     ChangeAnswersTableData,\r\n//     // ChangeAnswersModalState\r\n// })(Test);\r\n"],"mappings},"metadata":{},"sourceType":"module"}
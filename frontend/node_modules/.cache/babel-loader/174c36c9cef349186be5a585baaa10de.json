{"ast":null,"code":"import _slicedToArray from \"C:\\\\React_project\\\\EduTest\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"C:\\\\React_project\\\\EduTest\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nimport { css as _css } from \"styled-components\";\nvar _jsxFileName = \"C:\\\\React_project\\\\EduTest\\\\frontend\\\\src\\\\components\\\\customer\\\\Testing\\\\test.js\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n          left: 25rem;\\n        \"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n          right: 25rem;\\n        \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from 'antd'; // import Highlighter from 'react-highlight-words';\n\nimport { ChangeQuestionSearchText, ChangeQuestionTableData, ChangeQuestionModalState } from '../../../actions/trainerAction';\nimport { ChangeTestSearchText, ChangeTestTableData, ChangeTestModalState, ChangeAnswersSearchText, ChangeAnswersTableData // ChangeAnswersModalState,\n} from '../../../actions/chapterAction';\nimport Alert from '../../../components/common/alert';\nimport { SecurePost } from '../../../services/axiosCall';\nimport apis from '../../../services/Apis'; // import Test2 from './test2';\n// import Test3 from './test3';\n\nimport styled from \"styled-components\"; // import Carousel from \"react-multi-carousel\";\n\nimport \"react-multi-carousel/lib/styles.css\";\nimport Counter from './Counter';\nconst Container = styled.div.withConfig({\n  displayName: \"test__Container\",\n  componentId: \"sc-13myauf-0\"\n})([\"display:flex;justify-content:center;align-items:center;min-height:80vh;width:100%;\"]);\nconst ScreenQuiz = styled.div.withConfig({\n  displayName: \"test__ScreenQuiz\",\n  componentId: \"sc-13myauf-1\"\n})([\"display:flex;justify-content:\", \";align-items:center;flex-direction:column;max-width:1200px;padding:\", \";width:100%;height:80vh;background:#fff;border-radius:5px;box-shadow:0px 5px 40px -20px #000;\"], props => props.screen ? \"space-between\" : \"center\", props => props.screen ? \"5rem\" : \".5rem\");\nconst Title = styled.h1.withConfig({\n  displayName: \"test__Title\",\n  componentId: \"sc-13myauf-2\"\n})([\"font-size:2.5rem;margin-bottom:0.5rem;text-align:center;max-width:90%;\"]);\nconst Paragraph = styled.p.withConfig({\n  displayName: \"test__Paragraph\",\n  componentId: \"sc-13myauf-3\"\n})([\"font-size:1.5rem;\"]); // const Button = styled.button`\n//   font-size: 1.2rem;\n//   font-weight: bold;\n//   width: 40%;\n//   height: 3rem;\n//   // color: #fff;\n//   border: none;\n//   // background: #7159c1;\n//   border-radius: 5px;\n//   box-shadow: 0px 3px 3px 0px #666;\n//   @-webkit-keyframes pulsate {\n//     0% {transform: scale(0.1, 0.1); opacity: 0.0;}\n//     50% {opacity: 1.0;}\n//     100% {transform: scale(7, 7); opacity: 0.0;}\n// }\n// `;\n\nconst ButtonScr = styled.button.withConfig({\n  displayName: \"test__ButtonScr\",\n  componentId: \"sc-13myauf-4\"\n})([\"font-size:1.4rem;z-index:10;position:fixed;top:15%;\", \"\"], props => props.right ? _css(_templateObject()) : _css(_templateObject2()));\nconst ContainerLabel = styled.div.withConfig({\n  displayName: \"test__ContainerLabel\",\n  componentId: \"sc-13myauf-5\"\n})([\"display:flex;align-items:flex-start;flex-direction:column;margin:0 auto 0.5rem auto;\"]);\nconst Label = styled.label.withConfig({\n  displayName: \"test__Label\",\n  componentId: \"sc-13myauf-6\"\n})([\"display:flex;justify-content:center;align-items:center;\"]);\nconst Radio = styled.input.attrs({\n  type: 'checkbox'\n}).withConfig({\n  displayName: \"test__Radio\",\n  componentId: \"sc-13myauf-7\"\n})([\"display:flex;justify-content:center;align-items:center;width:15px;height:15px;border-radius:50%;border:7.5px solid black;margin:0 0.5rem 0 0;background:\", \";\"], props => props.clickedLabel ? \"#7159c1\" : \"#fff\"); // const IntoRadio = styled.div`\n//   width: 5px;\n//   height: 5px;\n//   border-radius: 3px;\n//   background: #fff;\n// `;\n// const Error = styled.div`\n//   top: 22rem;\n//   color: red;\n//   position: absolute;\n//   font-weight: bold;\n// `;\n\nexport default function Test(props) {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        questions = _useState2[0],\n        setQuestions = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        screen = _useState4[0],\n        setScreen = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        count = _useState6[0],\n        setCount = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        clickedLabel = _useState8[0],\n        setClickedLabel = _useState8[1];\n\n  const _useState9 = useState(0),\n        _useState10 = _slicedToArray(_useState9, 2),\n        answer = _useState10[0],\n        setAnswer = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        screenFinish = _useState12[0],\n        setScreenFinish = _useState12[1];\n\n  const _useState13 = useState(60),\n        _useState14 = _slicedToArray(_useState13, 2),\n        second = _useState14[0],\n        setSecond = _useState14[1];\n\n  const _useState15 = useState(false),\n        _useState16 = _slicedToArray(_useState15, 2),\n        checked = _useState16[0],\n        setChecked = _useState16[1];\n\n  console.log(\"FFFFFFFFFFFFFFFFFFFFFF:\", props); //         questions:[],\n  //         loading:false,\n  //         screen: true,\n  //         count: 0,\n  //         clickedLabel: [],\n  //         answer: 0,\n  //         error:false,\n  //         screenFinish:false,\n  //         second:60,\n  //         time:{},\n  //         checked:false,\n  //         testStarted:false,\n  //         testEnded:false,\n  //         testDidNotStart:true,\n\n  useEffect(() => {\n    // this.props.ChangeQuestionTableData(this.props.id);\n    // this.props.ChangeAnswersTableData(this.props.id);\n    // props.ChangeTestTableData(this.props.id);\n    // console.log('CHID',this.props.chid);\n    console.log();\n    var questions = [];\n\n    if (props.asn.length === 0) {\n      return Alert('warning', \"Сперва пройдите материалы\");\n    } else {\n      props.asn[0].chosenOption.map((d, i) => {\n        questions[i] = {\n          question: d.questionText,\n          isOneTrueAnswer: d.options[0].isAnswer + d.options[1].isAnswer + d.options[2].isAnswer + d.options[3].isAnswer + d.options[4].isAnswer === 1 ? true : false,\n          // questionImage : d.quesimg,\n          answerOptions: [{\n            answerText: d.options[0].answers,\n            UserAnswer: d.options[0].userAnswer,\n            correctAnswer: d.options[0].isAnswer\n          }, {\n            answerText: d.options[1].answers,\n            UserAnswer: d.options[1].userAnswer,\n            correctAnswer: d.options[1].isAnswer\n          }, {\n            answerText: d.options[2].answers,\n            UserAnswer: d.options[2].userAnswer,\n            correctAnswer: d.options[2].isAnswer\n          }, {\n            answerText: d.options[3].answers,\n            UserAnswer: d.options[3].userAnswer,\n            correctAnswer: d.options[3].isAnswer\n          }, {\n            answerText: d.options[4].answers,\n            UserAnswer: d.options[4].userAnswer,\n            correctAnswer: d.options[4].isAnswer\n          }]\n        };\n      });\n    }\n\n    setQuestions(questions);\n  });\n\n  const handleNextClick = () => {\n    setCount(count + 1);\n  };\n\n  const handlePrevClick = () => {\n    if (questions.length >= count && count > 0) {\n      setCount(count - 1);\n    }\n  };\n\n  const handleClick = c => {\n    if (questions.length >= count && clickedLabel.answerText) {\n      setCount(c + 1);\n      setQuestions(questions);\n      setAnswer(clickedLabel.correctAnswer ? answer + 1 : answer);\n    }\n  };\n\n  const handleEndClick = c => {\n    if (questions.length === count) {\n      setScreenFinish(true);\n    }\n  };\n\n  const renderInitial = () => {\n    setScreen(false);\n    setCount(1); // this.setState({\n    //   screen: false,\n    //   loading:false,\n    //   count: 1,\n    //   testStarted:true,\n    //   testEnded:false,\n    //   testDidNotStart:false,\n    // });\n    // console.log(\"1  CREATE_TEST\")\n    // SecurePost({\n    //   url : `${apis.CREATE_TEST}`,\n    //   data : {\n    //     // _id: props.chapter.testid,\n    //       chapterid : props.chid,\n    //       materialid : props.id,\n    //       startDate : Date().toLocaleString(),\n    //       complationDate : Date().toLocaleString(),\n    //       startTest: true,\n    //       endTest: false,\n    //       result: count\n    //     }\n    //   })\n    // .then((response)=>{\n    //   if(response.data.success){\n    //       this.props.ChangeTestModalState(false,null, 'Save'); \n    //       Alert('success','Успешно',response.data.message);\n    //   }\n    //   else{\n    //       this.props.ChangeTestModalState(false,null, 'Save');\n    //       return Alert('warning','Предупреждение!',response.data.message);\n    //   }\n    // })\n    // .catch((error)=>{\n    //     this.props.ChangeTestModalState(false,null, 'Save');\n    //     return Alert('error','Ошибка!','Ошибка сервера');\n    // })\n    // SecurePost({\n    //   url : `${apis.CREATE_TST}`,\n    //   data : {\n    //     materialId : props.id,\n    //     // testid : props.chapter.testid,\n    //   }\n    // })\n  };\n\n  const renderScreenInitial = () => {\n    return /*#__PURE__*/React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, /*#__PURE__*/React.createElement(ScreenQuiz, {\n      screen: screen,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, /*#__PURE__*/React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, \"\\u0422\\u0435\\u0441\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u0438\\u0435\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: renderInitial,\n      style: {\n        fontSize: \"1.2rem\",\n        fontWeight: \"bold\",\n        width: \"40%\",\n        height: \"3rem\",\n        border: \"none\",\n        borderRadius: \"5px\",\n        boxShadow: \"0px 3px 3px 0px #666\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, \"\\u041D\\u0430\\u0447\\u0430\\u0442\\u044C \\u0442\\u0435\\u0441\\u0442\")));\n  };\n\n  const handleOptions = (answerOptions, c) => {\n    return answerOptions.map((a, i) => {\n      return /*#__PURE__*/React.createElement(Label, {\n        key: i,\n        onClick: () => {\n          setQuestions(questions);\n          setClickedLabel(clickedLabel);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }, questions[c].isOneTrueAnswer === false ? /*#__PURE__*/React.createElement(Radio, {\n        checked: a.UserAnswer,\n        onChange: e => this.handleChange(e, answerOptions, c, i),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }) : /*#__PURE__*/React.createElement(Radio, {\n        checked: a.UserAnswer,\n        onChange: e => this.handleChange2(e, answerOptions, c, i),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }), /*#__PURE__*/React.createElement(Paragraph, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      }, a.answerText));\n    });\n  };\n\n  const handleChange = (e, answerOptions, c, i) => {\n    questions[c].answerOptions[i].UserAnswer = true;\n    setQuestions(questions);\n  };\n\n  const handleChange2 = (e, answerOptions, c, i) => {\n    questions[c].answerOptions[i].UserAnswer = true;\n\n    if (questions[c].answerOptions[i].UserAnswer === true) {\n      answerOptions.map((d, j) => {\n        if (i !== j) {\n          questions[c].answerOptions[j].UserAnswer = false;\n        }\n      });\n    }\n\n    setQuestions(questions);\n  };\n\n  const renderQuestions = () => {\n    const NewQuestions = Array.from(questions);\n    const removeQuestions = NewQuestions.slice(count - 1, count);\n    return removeQuestions.map((q, i) => /*#__PURE__*/React.createElement(Container, {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, /*#__PURE__*/React.createElement(ScreenQuiz, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, /*#__PURE__*/React.createElement(Counter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, count, \"/\", questions.length), /*#__PURE__*/React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, q.question), /*#__PURE__*/React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, count), /*#__PURE__*/React.createElement(ContainerLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, handleOptions(q.answerOptions, count - 1)), /*#__PURE__*/React.createElement(Button, {\n      onClick: () => handleClick(count - 1),\n      style: {\n        fontSize: \"1.2rem\",\n        fontWeight: \"bold\",\n        width: \"40%\",\n        height: \"3rem\",\n        border: \"none\",\n        borderRadius: \"5px\",\n        boxShadow: \"0px 3px 3px 0px #666\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"), count === questions.length ? /*#__PURE__*/React.createElement(Button, {\n      onClick: handleEndClick,\n      style: {\n        marginTop: '30px',\n        fontSize: \"1.2rem\",\n        fontWeight: \"bold\",\n        width: \"40%\",\n        height: \"3rem\",\n        border: \"none\",\n        borderRadius: \"5px\",\n        boxShadow: \"0px 3px 3px 0px #666\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, \"\\u0417\\u0430\\u0432\\u0435\\u0440\\u0448\\u0438\\u0442\\u044C \\u0442\\u0435\\u0441\\u0442\") : null, /*#__PURE__*/React.createElement(ButtonScr, {\n      onClick: () => handleNextClick(count),\n      right: true,\n      disabled: count === questions.length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, \"\\u0421\\u043B\\u0435\\u0434\\u0443\\u044E\\u0449\\u0438\\u0439\"), /*#__PURE__*/React.createElement(ButtonScr, {\n      onClick: handlePrevClick,\n      left: true,\n      disabled: count === 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, \"\\u041F\\u0440\\u0435\\u0434\\u044B\\u0434\\u0443\\u0449\\u0438\\u0439\"))));\n  };\n\n  const renderResult = () => {\n    return /*#__PURE__*/React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }, /*#__PURE__*/React.createElement(ScreenQuiz, {\n      screen: screenFinish,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, /*#__PURE__*/React.createElement(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, \"\\u0412\\u044B \\u043F\\u0440\\u0430\\u0432\\u0438\\u043B\\u044C\\u043D\\u043E \\u043E\\u0442\\u0432\\u0435\\u0442\\u0438\\u043B\\u0438 \", answer, \" \\u0438\\u0437 \", questions.length, \" \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\\u043E\\u0432\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: (() => setCount(0), setScreenFinish(false), setScreen(true), setAnswer(0)),\n      style: {\n        fontSize: \"1.2rem\",\n        fontWeight: \"bold\",\n        width: \"40%\",\n        height: \"3rem\",\n        border: \"none\",\n        borderRadius: \"5px\",\n        boxShadow: \"0px 3px 3px 0px #666\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, \"\\u0422\\u0435\\u0441\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u0437\\u0430\\u043D\\u043E\\u0432\\u043E\")));\n  };\n\n  return !screenFinish && questions ? /*#__PURE__*/React.createElement(React.Fragment, null, screen ? renderScreenInitial() : renderQuestions()) : renderResult();\n} // class Test extends Component {\n//     constructor(props){\n//       super(props);\n//       this.state={\n//         questions:[],\n//         loading:false,\n//         screen: true,\n//         count: 0,\n//         clickedLabel: [],\n//         answer: 0,\n//         error:false,\n//         screenFinish:false,\n//         second:60,\n//         time:{},\n//         checked:false,\n//         testStarted:false,\n//         testEnded:false,\n//         testDidNotStart:true,\n//       }\n//     }\n//     componentDidMount(){\n//       console.log(\"1 - componentDidMount\")\n//       // this.props.ChangeQuestionTableData(this.props.id);\n//       this.props.ChangeAnswersTableData(this.props.id);\n//       this.props.ChangeTestTableData(this.props.id);\n//       // console.log('CHID',this.props.chid);\n//       console.log()\n//       var questions=[];\n//       if(this.props.asn.length === 0){\n//         return Alert('warning',\"Сперва пройдите материалы\")\n//       }\n//       else{\n//         this.props.asn[0].chosenOption.map((d,i)=>{\n//           questions[i]=(\n//                 {\n//                   question : d.questionText,\n//                   isOneTrueAnswer : (d.options[0].isAnswer + d.options[1].isAnswer + d.options[2].isAnswer + d.options[3].isAnswer \n//                     + d.options[4].isAnswer)===1 ? true : false,\n//                   // questionImage : d.quesimg,\n//                   answerOptions: [\n//                     { answerText: d.options[0].answers, UserAnswer: d.options[0].userAnswer, correctAnswer: d.options[0].isAnswer },\n//                     { answerText: d.options[1].answers, UserAnswer: d.options[1].userAnswer, correctAnswer: d.options[1].isAnswer },\n//                     { answerText: d.options[2].answers, UserAnswer: d.options[2].userAnswer, correctAnswer: d.options[2].isAnswer },\n//                     { answerText: d.options[3].answers, UserAnswer: d.options[3].userAnswer, correctAnswer: d.options[3].isAnswer },\n//                     { answerText: d.options[4].answers, UserAnswer: d.options[4].userAnswer, correctAnswer: d.options[4].isAnswer }\n//                   ]\n//                 }\n//               )\n//         })\n//       }\n//       // console.log(\"TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\", this.props.asn[0].chosenOption[0])\n//       // this.props.details1.map((d,i)=>{\n//       //   questions[i]=(\n//       //     {\n//       //       qid:d._id,\n//       //       question : d.body,\n//       //       isOneTrueAnswer : (d.trueans1+d.trueans2+d.trueans3+d.trueans4+d.trueans5)==1 ? true : false,\n//       //       // questionImage : d.quesimg,\n//       //       answerOptions: [\n//       //         { answerText: d.answer1, UserAnswer: d.userAnswer1, correctAnswer: d.trueans1 },\n//       //         { answerText: d.answer2, UserAnswer: d.userAnswer2, correctAnswer: d.trueans2 },\n//       //         { answerText: d.answer3, UserAnswer: d.userAnswer3, correctAnswer: d.trueans3 },\n//       //         { answerText: d.answer4, UserAnswer: d.userAnswer4, correctAnswer: d.trueans4 },\n//       //         { answerText: d.answer5, UserAnswer: d.userAnswer5, correctAnswer: d.trueans5 }\n//       //       ]\n//       //     }\n//       //   )\n//       // });\n//       console.log(\"1 - End cDM\")\n//       this.setState({\n//         questions:questions,\n//         loading:true\n//       })\n//     }\n//     handleNextClick=(c)=>{\n//       const { count} = this.state;\n//         this.setState({\n//           count: count+1,\n//           checked:false,\n//         });\n//     }\n//     handlePrevClick=()=>{\n//       const { count, questions} = this.state;\n//       if (questions.length >= count && count>0) {\n//         this.setState({\n//           count: count - 1,\n//           checked:false,\n//         });\n//       } \n//     }\n//     handleClick = (c)=> {\n//       const { count, questions, clickedLabel, answer} = this.state;\n//       // questions[c].question=questions[c].question+'fg';\n//       if (questions.length >= count && clickedLabel.answerText) {\n//         this.setState({\n//           questions:questions,\n//           count: c+1,\n//           clickedLabel: {},\n//           answer: clickedLabel.correctAnswer ? answer + 1 : answer,\n//           error: false,\n//           checked:false,\n//         });\n//       }\n//     }\n//     handleEndClick = (c)=> {\n//       const { count, questions, clickedLabel } = this.state;\n//       if (questions.length === count) {\n//         this.setState({\n//           screenFinish: true,\n//           testEnded:true,\n//           testStarted:false,\n//         });\n//       }\n//     }\n//     renderInitial = () => {\n//       const { count } = this.state;\n//       this.setState({\n//         screen: false,\n//         loading:false,\n//         count: 1,\n//         testStarted:true,\n//         testEnded:false,\n//         testDidNotStart:false,\n//       });\n//       console.log(\"1  CREATE_TEST\")\n//       SecurePost({\n//         url : `${apis.CREATE_TEST}`,\n//         data : {\n//           _id: this.props.chapter.testid,\n//             chapterid : this.props.chid,\n//             materialid : this.props.id,\n//             startDate : Date().toLocaleString(),\n//             complationDate : Date().toLocaleString(),\n//             startTest: true,\n//             endTest: false,\n//             result: count\n//           }\n//         })\n//         .then((response)=>{\n//           if(response.data.success){\n//               this.props.ChangeTestModalState(false,null, 'Save'); \n//               Alert('success','Успешно',response.data.message);\n//           }\n//           else{\n//               this.props.ChangeTestModalState(false,null, 'Save');\n//               return Alert('warning','Предупреждение!',response.data.message);\n//           }\n//         })\n//         .catch((error)=>{\n//             this.props.ChangeTestModalState(false,null, 'Save');\n//             return Alert('error','Ошибка!','Ошибка сервера');\n//         })\n//       //   console.log('ZZZZZZZZZZZZZZZZZZZ',questions);\n//       //   console.log('XXXXXXXXXXXXXXXXX',this.props.details1);\n//       //   var opts= [];\n//         // var vOptions;\n//         // // var varOptions=[...this.state.questionDetails];\n//         // this.props.details1.map((el, i) => {\n//         //   // vOptions=[...this.state.questionDetails.options];\n//         //   questions[i].answerOptions.map((d,i)=>{\n//         //     this.setState((ps,pp)=>{\n//         //       return({\n//         //           questionDetails:{\n//         //               ...ps.questionDetails,\n//         //               questionid:el.id,\n//         //               options:[\n//         //                   ...ps.questionDetails.options,\n//         //                   {\n//         //                       answer :d.answerText,\n//         //                       isAnswer : d.correctAnswer,\n//         //                       userAnswer :d.UserAnswer\n//         //                   }\n//         //               ]\n//         //           }\n//         //       })\n//         //   })\n//         //   console.log('DDDDDDDDDDDDDDDDD',questionDetails);\n//         //     // vOptions[i]={\n//         //     //   ...this.state.questionDetails.options[i],\n//         //     //   answer: d.answerText,\n//         //     //   isAnswer: d.correctAnswer,\n//         //     //   userAnswer: d.UserAnswer\n//         //     // }\n//         //   })\n//         // })\n//       //   var arr = [];\n//       //   // arr[0] = [];\n//       //   // console.log('DDDDDDDDDDDDDDDDD',questionDetails);\n//       //   questions.map((k, i) => {\n//       //     arr[i]=({\n//       //       questionid:k.qid\n//       //     })\n//       //     questions[i].answerOptions.map((d, j)=>{\n//       //       arr[i][j]=({\n//       //         answers:d.answerText,\n//       //         isAnswer:d.correctAnswer,\n//       //         userAnswer:d.UserAnswer,\n//       //       })\n//       //     })\n//       //     // arr.push(opts)\n//       // })\n//       // console.log('dddddddefgerf', arr);\n//       // // console.log('ddddddddddfvd', opts);\n//       // console.log('testid',this.props.chapter.testTableData);\n//       SecurePost({\n//         url : `${apis.CREATE_TST}`,\n//         data : {\n//           materialId : this.props.id,\n//           testid : this.props.chapter.testid,\n//         }\n//       })\n//     };\n//     renderScreenInitial = () => {\n//       return (\n//         <Container>\n//           <ScreenQuiz screen={this.state.screen}>\n//             <Title>Тестирование</Title>\n//             <Button \n//               onClick={this.renderInitial} \n//               style={{\n//                 fontSize: \"1.2rem\", \n//                 fontWeight: \"bold\",\n//                 width: \"40%\",\n//                 height: \"3rem\",\n//                 border: \"none\",\n//                 borderRadius: \"5px\",\n//                 boxShadow: \"0px 3px 3px 0px #666\"\n//               }}\n//               >\n//                 Начать тест\n//             </Button>\n//             {/* //   font-size: 1.2rem;\n// //   font-weight: bold;\n// //   width: 40%;\n// //   height: 3rem;\n// //   // color: #fff;\n// //   border: none;\n// //   // background: #7159c1;\n// //   border-radius: 5px;\n// //   box-shadow: 0px 3px 3px 0px #666; */}\n//           </ScreenQuiz>\n//         </Container>\n//       );\n//     };\n//     handleOptions = (answerOptions,c) => {\n//       const { clickedLabel,questions } = this.state;\n//       // console.log('click:',clickedLabel);\n//       // console.log('answer1:',answerOptions);\n//       return answerOptions.map((a, i) => {\n//         return (\n//           <Label\n//             key={i}\n//             onClick={() =>{\n//               // console.log('Onclick c:', c);\n//               //  questions[c].answerOptions.answerText=questions[c].answerOptions[2].answerText; \n//               this.setState({\n//                 questions:questions,\n//                 clickedLabel: a,\n//                 error: false\n//               })}\n//             }\n//           >\n//             { questions[c].isOneTrueAnswer===false ?\n//             <Radio \n//               // clickedLabel={} \n//               checked={a.UserAnswer} \n//               // id={'r'c,'s', i}\n//               onChange={e => this.handleChange(e,answerOptions, c,i)}\n//             />\n//             :\n//             <Radio  \n//               // clickedLabel={clickedLabel.answerText} \n//               checked={a.UserAnswer}\n//               onChange={e => this.handleChange2(e,answerOptions, c,i)}\n//             />\n//             }\n//             <Paragraph>{a.answerText}</Paragraph>\n//           </Label>\n//         );\n//       });\n//     };\n//     handleChange = (e,answerOptions, c, i) => {\n//       // console.log(\"handleChange:\", e.target ,answerOptions, c, i);\n//       const { questions } = this.state\n//       // return answerOptions.map((a, i) => {\n//         // console.log(\"Onclick\", c);\n//         // console.log(\"I\", i);\n//         questions[c].answerOptions[i].UserAnswer=true;\n//         this.setState({\n//           // checked: false,\n//           questions:questions,\n//           // clickedLabel: \n//         });\n//       // })\n//       // console.log('check', e.target.checked);\n//       // console.log('I',i)\n//     };\n//     handleChange2 = (e,answerOptions, c, i) => {\n//       // console.log(\"handleChange:\", e.target.checked ,answerOptions, c, i);\n//       const { questions } = this.state\n//       questions[c].answerOptions[i].UserAnswer=true;\n//       if(questions[c].answerOptions[i].UserAnswer===true){\n//         answerOptions.map((d,j) =>{\n//           if(i!==j){\n//             questions[c].answerOptions[j].UserAnswer=false;\n//           }\n//         })\n//       }\n//         this.setState({\n//           questions:questions,\n//         });\n//     };\n//     renderQuestions = () => {\n//       const { count,questions } = this.state;\n//       const NewQuestions = Array.from(questions);\n//       const removeQuestions = NewQuestions.slice(count - 1, count);\n//       return removeQuestions.map((q, i) => (\n//         <Container key={i}>\n//           <ScreenQuiz>\n//             {/* <div className=\"timer-container\">\n//               <p>\n//                 <span className={classnames('right valid', {\n//                   'warning': time.distance <= 120000,\n//                   'invalid': time.distance < 30000\n//                   })} style={{paddingLeft:'10px'}}>\n//                   {time.minutes}:{time.seconds}\n//                   <span  className=\"mdi mdi-clock-outline mdi-24px\"></span></span>\n//               </p>\n//             </div> */}\n//             <Counter/>\n//             <h3>{count}/{questions.length}</h3>\n//             <Title>{q.question}</Title>         \n//             <label>{count}</label>\n//             <ContainerLabel>\n//               {this.handleOptions(q.answerOptions, count-1)}\n//             </ContainerLabel>\n//             <Button onClick={()=>this.handleClick(count-1)}\n//                           style={{\n//                             fontSize: \"1.2rem\", \n//                             fontWeight: \"bold\",\n//                             width: \"40%\",\n//                             height: \"3rem\",\n//                             border: \"none\",\n//                             borderRadius: \"5px\",\n//                             boxShadow: \"0px 3px 3px 0px #666\"\n//                           }}\n//             >\n//                 Сохранить\n//             </Button>\n//             { count===questions.length ?\n//             <Button onClick={this.handleEndClick}\n//               style={{\n//                 marginTop: '30px',\n//                 fontSize: \"1.2rem\", \n//                 fontWeight: \"bold\",\n//                 width: \"40%\",\n//                 height: \"3rem\",\n//                 border: \"none\",\n//                 borderRadius: \"5px\",\n//                 boxShadow: \"0px 3px 3px 0px #666\"\n//               }}\n//             >\n//                 Завершить тест\n//             </Button>\n//               : null\n//           }\n//             {/* {error && <Error>Пожалуйста, проверьте варианты.</Error>} */}\n//             <ButtonScr onClick={()=>this.handleNextClick(count)} right disabled={count === questions.length}>Следующий</ButtonScr>\n//             <ButtonScr onClick={this.handlePrevClick} left disabled={count===1}>Предыдущий</ButtonScr>\n//             {/* {console.log('Count:',count)} */}\n//           </ScreenQuiz>\n//         </Container>\n//       ));\n//     };\n//     renderResult = () => {\n//       const { answer,questions, screenFinish } = this.state;\n//       return (\n//         <Container>\n//           <ScreenQuiz screen={screenFinish}>\n//             <Title>Вы правильно ответили {answer} из {questions.length} вопросов</Title>\n//             <Button\n//               onClick={() =>\n//                 this.setState({\n//                   count: 0,\n//                   screenFinish: false,\n//                   screen: true,\n//                   answer: 0\n//                 })\n//               }\n//               style={{\n//                 fontSize: \"1.2rem\", \n//                 fontWeight: \"bold\",\n//                 width: \"40%\",\n//                 height: \"3rem\",\n//                 border: \"none\",\n//                 borderRadius: \"5px\",\n//                 boxShadow: \"0px 3px 3px 0px #666\"\n//               }}\n//             >\n//               Тестировать заново\n//             </Button>\n//           </ScreenQuiz>\n//         </Container>\n//       );\n//     };\n//     render() {\n//       const { screenFinish, questions, screen } = this.state;\n//       return !screenFinish && questions ? (\n//         <>{screen ? this.renderScreenInitial() : this.renderQuestions()}</>\n//       ) : (\n//         this.renderResult()\n//       );\n//     }\n//     // render() {\n//     //   console.log('qas',this.props.trainer.QuestionTableData);\n//     //   console.log('qaz',this.state);\n//     //   return (\n//     //     <div>\n//     //       <h1>Тестирование номер 1</h1>\n//     //       {this.state.isStarted ? null : (\n//     //         <div id=\"button\">\n//     //           <Button variant=\"contained\" color=\"secondary\" onClick={()=>this.handleClick}>\n//     //             Начать тест\n//     //           </Button>\n//     //         </div>\n//     //       )}\n//     //     {this.state.isStarted ? (\n//     //     // <Test2  details={this.props.trainer.QuestionTableData}/>\n//     //     ) : null}\n//     //     </div>\n//     //   )\n//     // }\n//   }\n//   const mapStateToProps = state => ({\n//       chapter : state.chapter,\n//       trainer : state.trainer\n//   });\n//   export default connect(mapStateToProps,{\n//       ChangeQuestionSearchText,\n//       ChangeQuestionTableData,\n//       ChangeQuestionModalState,\n//       ChangeTestSearchText,\n//       ChangeTestTableData,\n//       ChangeTestModalState,\n//       ChangeAnswersSearchText,\n//       ChangeAnswersTableData,\n//       // ChangeAnswersModalState\n//   })(Test);","map":{"version":3,"names":["React","Component","useState","useEffect","connect","Button","ChangeQuestionSearchText","ChangeQuestionTableData","ChangeQuestionModalState","ChangeTestSearchText","ChangeTestTableData","ChangeTestModalState","ChangeAnswersSearchText","ChangeAnswersTableData","Alert","SecurePost","apis","styled","Counter","Container","div","ScreenQuiz","props","screen","Title","h1","Paragraph","p","ButtonScr","button","right","css","ContainerLabel","Label","label","Radio","input","attrs","type","clickedLabel","Test","questions","setQuestions","setScreen","count","setCount","setClickedLabel","answer","setAnswer","screenFinish","setScreenFinish","second","setSecond","checked","setChecked","console","log","asn","length","chosenOption","map","d","i","question","questionText","isOneTrueAnswer","options","isAnswer","answerOptions","answerText","answers","UserAnswer","userAnswer","correctAnswer","handleNextClick","handlePrevClick","handleClick","c","handleEndClick","renderInitial","renderScreenInitial","fontSize","fontWeight","width","height","border","borderRadius","boxShadow","handleOptions","a","e","handleChange","handleChange2","j","renderQuestions","NewQuestions","Array","from","removeQuestions","slice","q","marginTop","renderResult"],"sources":["C:/React_project/EduTest/frontend/src/components/customer/Testing/test.js"],"sourcesContent":["import React, { Component, useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { Button } from 'antd';\r\n// import Highlighter from 'react-highlight-words';\r\nimport  { css } from 'styled-components/macro'\r\nimport { \r\n    ChangeQuestionSearchText,\r\n    ChangeQuestionTableData,\r\n    ChangeQuestionModalState,\r\n} from '../../../actions/trainerAction';\r\nimport { \r\n  ChangeTestSearchText,\r\n  ChangeTestTableData,\r\n  ChangeTestModalState,\r\n  ChangeAnswersSearchText,\r\n  ChangeAnswersTableData,\r\n  // ChangeAnswersModalState,\r\n} from '../../../actions/chapterAction';\r\n\r\nimport Alert from '../../../components/common/alert';\r\nimport { SecurePost } from '../../../services/axiosCall';\r\nimport apis from '../../../services/Apis';\r\n// import Test2 from './test2';\r\n// import Test3 from './test3';\r\nimport styled from \"styled-components\";\r\n// import Carousel from \"react-multi-carousel\";\r\nimport \"react-multi-carousel/lib/styles.css\";\r\nimport Counter from './Counter';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 80vh;\r\n  width: 100%;\r\n  /*background: #7159c1;*/\r\n`;\r\n\r\nconst ScreenQuiz = styled.div`\r\n  display: flex;\r\n  justify-content: ${props => (props.screen ? \"space-between\" : \"center\")};\r\n  align-items: center;\r\n  flex-direction: column;\r\n  max-width: 1200px;\r\n  padding: ${props => (props.screen ? \"5rem\" : \".5rem\")};\r\n  width: 100%;\r\n  height: 80vh;\r\n  background: #fff;\r\n  border-radius: 5px;\r\n  box-shadow: 0px 5px 40px -20px #000;\r\n\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-size: 2.5rem;\r\n  // color: #7159c1;\r\n  margin-bottom: 0.5rem;\r\n  text-align: center;\r\n  max-width: 90%;\r\n`;\r\n\r\nconst Paragraph = styled.p`\r\n  font-size: 1.5rem;\r\n`;\r\n\r\n// const Button = styled.button`\r\n//   font-size: 1.2rem;\r\n//   font-weight: bold;\r\n//   width: 40%;\r\n//   height: 3rem;\r\n//   // color: #fff;\r\n//   border: none;\r\n//   // background: #7159c1;\r\n//   border-radius: 5px;\r\n//   box-shadow: 0px 3px 3px 0px #666;\r\n\r\n//   @-webkit-keyframes pulsate {\r\n//     0% {transform: scale(0.1, 0.1); opacity: 0.0;}\r\n//     50% {opacity: 1.0;}\r\n//     100% {transform: scale(7, 7); opacity: 0.0;}\r\n// }\r\n// `;\r\n\r\nconst ButtonScr = styled.button`\r\n  font-size: 1.4rem;\r\n  z-index: 10;\r\n  position: fixed;\r\n  top: 15%;\r\n  ${(props) =>\r\n    props.right\r\n      ? css`\r\n          right: 25rem;\r\n        `\r\n      : css`\r\n          left: 25rem;\r\n        `}\r\n`\r\n\r\nconst ContainerLabel = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  flex-direction: column;\r\n  margin: 0 auto 0.5rem auto;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst Radio = styled.input.attrs({ type: 'checkbox' })`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 15px;\r\n  height: 15px;\r\n  border-radius: 50%;\r\n  border: 7.5px solid black;\r\n  margin: 0 0.5rem 0 0;\r\n  background: ${props => (props.clickedLabel ? \"#7159c1\" : \"#fff\")};\r\n`;\r\n\r\n// const IntoRadio = styled.div`\r\n//   width: 5px;\r\n//   height: 5px;\r\n//   border-radius: 3px;\r\n//   background: #fff;\r\n// `;\r\n\r\n// const Error = styled.div`\r\n//   top: 22rem;\r\n//   color: red;\r\n//   position: absolute;\r\n//   font-weight: bold;\r\n// `;\r\n\r\nexport default function Test(props){\r\n      const [questions, setQuestions] = useState([]);\r\n      const [screen, setScreen] = useState(true);\r\n      const [count, setCount] = useState(0);\r\n      const [clickedLabel, setClickedLabel] = useState([]);\r\n      const [answer, setAnswer] = useState(0);\r\n      const [screenFinish, setScreenFinish] = useState(false);\r\n      const [second, setSecond] = useState(60);\r\n      const [checked, setChecked] = useState(false);\r\n      console.log(\"FFFFFFFFFFFFFFFFFFFFFF:\", props);\r\n      //         questions:[],\r\n//         loading:false,\r\n//         screen: true,\r\n//         count: 0,\r\n//         clickedLabel: [],\r\n//         answer: 0,\r\n//         error:false,\r\n//         screenFinish:false,\r\n//         second:60,\r\n//         time:{},\r\n//         checked:false,\r\n//         testStarted:false,\r\n//         testEnded:false,\r\n//         testDidNotStart:true,\r\n\r\n    useEffect(()=>{\r\n\r\n      // this.props.ChangeQuestionTableData(this.props.id);\r\n      // this.props.ChangeAnswersTableData(this.props.id);\r\n      // props.ChangeTestTableData(this.props.id);\r\n      // console.log('CHID',this.props.chid);\r\n      console.log()\r\n      var questions=[];\r\n      if(props.asn.length === 0){\r\n        return Alert('warning',\"Сперва пройдите материалы\")\r\n      }\r\n      else{\r\n        props.asn[0].chosenOption.map((d,i)=>{\r\n          questions[i]=(\r\n                {\r\n                  question : d.questionText,\r\n                  isOneTrueAnswer : (d.options[0].isAnswer + d.options[1].isAnswer + d.options[2].isAnswer + d.options[3].isAnswer \r\n                    + d.options[4].isAnswer)===1 ? true : false,\r\n                  // questionImage : d.quesimg,\r\n                  answerOptions: [\r\n                    { answerText: d.options[0].answers, UserAnswer: d.options[0].userAnswer, correctAnswer: d.options[0].isAnswer },\r\n                    { answerText: d.options[1].answers, UserAnswer: d.options[1].userAnswer, correctAnswer: d.options[1].isAnswer },\r\n                    { answerText: d.options[2].answers, UserAnswer: d.options[2].userAnswer, correctAnswer: d.options[2].isAnswer },\r\n                    { answerText: d.options[3].answers, UserAnswer: d.options[3].userAnswer, correctAnswer: d.options[3].isAnswer },\r\n                    { answerText: d.options[4].answers, UserAnswer: d.options[4].userAnswer, correctAnswer: d.options[4].isAnswer }\r\n                  ]\r\n                }\r\n              )\r\n        })\r\n      }\r\n      setQuestions(questions);\r\n    });\r\n\r\n    const handleNextClick=()=>{\r\n        setCount(count+1)\r\n    }\r\n\r\n    const handlePrevClick=()=>{\r\n      if (questions.length >= count && count>0) {\r\n        setCount(count - 1);\r\n      } \r\n    }\r\n\r\n    const handleClick = (c)=> {\r\n      if (questions.length >= count && clickedLabel.answerText) {\r\n        setCount(c+1);\r\n        setQuestions(questions);\r\n        setAnswer(clickedLabel.correctAnswer ? answer + 1 : answer);\r\n      }\r\n    }\r\n\r\n    const handleEndClick = (c)=> {\r\n      if (questions.length === count) {\r\n        setScreenFinish(true)\r\n      }\r\n    }\r\n\r\n    const renderInitial = () => {\r\n      setScreen(false);\r\n      setCount(1);\r\n      // this.setState({\r\n      //   screen: false,\r\n      //   loading:false,\r\n      //   count: 1,\r\n      //   testStarted:true,\r\n      //   testEnded:false,\r\n      //   testDidNotStart:false,\r\n      // });\r\n\r\n      // console.log(\"1  CREATE_TEST\")\r\n      // SecurePost({\r\n      //   url : `${apis.CREATE_TEST}`,\r\n      //   data : {\r\n      //     // _id: props.chapter.testid,\r\n      //       chapterid : props.chid,\r\n      //       materialid : props.id,\r\n      //       startDate : Date().toLocaleString(),\r\n      //       complationDate : Date().toLocaleString(),\r\n      //       startTest: true,\r\n      //       endTest: false,\r\n      //       result: count\r\n      //     }\r\n      //   })\r\n        // .then((response)=>{\r\n        //   if(response.data.success){\r\n        //       this.props.ChangeTestModalState(false,null, 'Save'); \r\n        //       Alert('success','Успешно',response.data.message);\r\n        //   }\r\n        //   else{\r\n        //       this.props.ChangeTestModalState(false,null, 'Save');\r\n        //       return Alert('warning','Предупреждение!',response.data.message);\r\n        //   }\r\n        // })\r\n        // .catch((error)=>{\r\n        //     this.props.ChangeTestModalState(false,null, 'Save');\r\n        //     return Alert('error','Ошибка!','Ошибка сервера');\r\n        // })\r\n      \r\n        \r\n      // SecurePost({\r\n      //   url : `${apis.CREATE_TST}`,\r\n      //   data : {\r\n      //     materialId : props.id,\r\n      //     // testid : props.chapter.testid,\r\n      //   }\r\n      // })\r\n    };\r\n\r\n    const renderScreenInitial = () => {\r\n      return (\r\n        <Container>\r\n          <ScreenQuiz screen={screen}>\r\n            <Title>Тестирование</Title>\r\n            <Button \r\n              onClick={renderInitial} \r\n              style={{\r\n                fontSize: \"1.2rem\", \r\n                fontWeight: \"bold\",\r\n                width: \"40%\",\r\n                height: \"3rem\",\r\n                border: \"none\",\r\n                borderRadius: \"5px\",\r\n                boxShadow: \"0px 3px 3px 0px #666\"\r\n              }}\r\n              >\r\n                Начать тест\r\n            </Button>\r\n          </ScreenQuiz>\r\n        </Container>\r\n      );\r\n    };\r\n  \r\n    const handleOptions = (answerOptions,c) => {\r\n      return answerOptions.map((a, i) => {\r\n        return (\r\n          <Label\r\n            key={i}\r\n            onClick={() =>{\r\n              setQuestions(questions);\r\n              setClickedLabel(clickedLabel)\r\n              }\r\n            }\r\n          >\r\n            { questions[c].isOneTrueAnswer===false ?\r\n            <Radio \r\n              checked={a.UserAnswer} \r\n              onChange={e => this.handleChange(e,answerOptions, c,i)}\r\n            />\r\n            :\r\n            <Radio  \r\n              checked={a.UserAnswer}\r\n              onChange={e => this.handleChange2(e,answerOptions, c,i)}\r\n            />\r\n            }\r\n            <Paragraph>{a.answerText}</Paragraph>\r\n          </Label>\r\n          \r\n        );\r\n      });\r\n    };\r\n\r\n    const handleChange = (e,answerOptions, c, i) => {\r\n        questions[c].answerOptions[i].UserAnswer=true;\r\n        setQuestions(questions);\r\n    };\r\n\r\n    const handleChange2 = (e,answerOptions, c, i) => {\r\n      questions[c].answerOptions[i].UserAnswer=true;\r\n      if(questions[c].answerOptions[i].UserAnswer===true){\r\n        answerOptions.map((d,j) =>{\r\n          if(i!==j){\r\n            questions[c].answerOptions[j].UserAnswer=false;\r\n          }\r\n        })\r\n      }\r\n      setQuestions(questions);\r\n    };\r\n\r\n\r\n  \r\n  \r\n    const renderQuestions = () => {\r\n      const NewQuestions = Array.from(questions);\r\n      const removeQuestions = NewQuestions.slice(count - 1, count);\r\n      return removeQuestions.map((q, i) => (\r\n        <Container key={i}>\r\n          <ScreenQuiz>\r\n            <Counter/>\r\n            <h3>{count}/{questions.length}</h3>\r\n            <Title>{q.question}</Title>         \r\n            <label>{count}</label>\r\n            <ContainerLabel>\r\n              {handleOptions(q.answerOptions, count-1)}\r\n            </ContainerLabel>\r\n            <Button onClick={()=>handleClick(count-1)}\r\n                          style={{\r\n                            fontSize: \"1.2rem\", \r\n                            fontWeight: \"bold\",\r\n                            width: \"40%\",\r\n                            height: \"3rem\",\r\n                            border: \"none\",\r\n                            borderRadius: \"5px\",\r\n                            boxShadow: \"0px 3px 3px 0px #666\"\r\n                          }}\r\n            >\r\n                Сохранить\r\n            </Button>\r\n            { count===questions.length ?\r\n            <Button onClick={handleEndClick}\r\n              style={{\r\n                marginTop: '30px',\r\n                fontSize: \"1.2rem\", \r\n                fontWeight: \"bold\",\r\n                width: \"40%\",\r\n                height: \"3rem\",\r\n                border: \"none\",\r\n                borderRadius: \"5px\",\r\n                boxShadow: \"0px 3px 3px 0px #666\"\r\n              }}\r\n            >\r\n                Завершить тест\r\n            </Button>\r\n              : null\r\n          }\r\n            <ButtonScr onClick={()=>handleNextClick(count)} right disabled={count === questions.length}>Следующий</ButtonScr>\r\n            <ButtonScr onClick={handlePrevClick} left disabled={count===1}>Предыдущий</ButtonScr>\r\n          </ScreenQuiz>\r\n        </Container>\r\n\r\n      ));\r\n    };\r\n  \r\n    const renderResult = () => {\r\n      return (\r\n        <Container>\r\n          <ScreenQuiz screen={screenFinish}>\r\n            <Title>Вы правильно ответили {answer} из {questions.length} вопросов</Title>\r\n            <Button\r\n              onClick={() =>\r\n                setCount(0),\r\n                setScreenFinish(false),\r\n                setScreen(true),\r\n                setAnswer(0)\r\n              }\r\n\r\n              style={{\r\n                fontSize: \"1.2rem\", \r\n                fontWeight: \"bold\",\r\n                width: \"40%\",\r\n                height: \"3rem\",\r\n                border: \"none\",\r\n                borderRadius: \"5px\",\r\n                boxShadow: \"0px 3px 3px 0px #666\"\r\n              }}\r\n            >\r\n              Тестировать заново\r\n            </Button>\r\n          </ScreenQuiz>\r\n        </Container>\r\n      );\r\n    };\r\n\r\n\r\n      return !screenFinish && questions ? (\r\n        <>{screen ? renderScreenInitial() : renderQuestions()}</>\r\n      ) : (\r\n        renderResult()\r\n      );\r\n}\r\n\r\n// class Test extends Component {\r\n//     constructor(props){\r\n//       super(props);\r\n//       this.state={\r\n//         questions:[],\r\n//         loading:false,\r\n//         screen: true,\r\n//         count: 0,\r\n//         clickedLabel: [],\r\n//         answer: 0,\r\n//         error:false,\r\n//         screenFinish:false,\r\n//         second:60,\r\n//         time:{},\r\n//         checked:false,\r\n//         testStarted:false,\r\n//         testEnded:false,\r\n//         testDidNotStart:true,\r\n       \r\n//       }\r\n//     }\r\n  \r\n//     componentDidMount(){\r\n//       console.log(\"1 - componentDidMount\")\r\n//       // this.props.ChangeQuestionTableData(this.props.id);\r\n//       this.props.ChangeAnswersTableData(this.props.id);\r\n//       this.props.ChangeTestTableData(this.props.id);\r\n//       // console.log('CHID',this.props.chid);\r\n//       console.log()\r\n//       var questions=[];\r\n//       if(this.props.asn.length === 0){\r\n//         return Alert('warning',\"Сперва пройдите материалы\")\r\n//       }\r\n//       else{\r\n//         this.props.asn[0].chosenOption.map((d,i)=>{\r\n//           questions[i]=(\r\n//                 {\r\n//                   question : d.questionText,\r\n//                   isOneTrueAnswer : (d.options[0].isAnswer + d.options[1].isAnswer + d.options[2].isAnswer + d.options[3].isAnswer \r\n//                     + d.options[4].isAnswer)===1 ? true : false,\r\n//                   // questionImage : d.quesimg,\r\n//                   answerOptions: [\r\n//                     { answerText: d.options[0].answers, UserAnswer: d.options[0].userAnswer, correctAnswer: d.options[0].isAnswer },\r\n//                     { answerText: d.options[1].answers, UserAnswer: d.options[1].userAnswer, correctAnswer: d.options[1].isAnswer },\r\n//                     { answerText: d.options[2].answers, UserAnswer: d.options[2].userAnswer, correctAnswer: d.options[2].isAnswer },\r\n//                     { answerText: d.options[3].answers, UserAnswer: d.options[3].userAnswer, correctAnswer: d.options[3].isAnswer },\r\n//                     { answerText: d.options[4].answers, UserAnswer: d.options[4].userAnswer, correctAnswer: d.options[4].isAnswer }\r\n//                   ]\r\n//                 }\r\n//               )\r\n//         })\r\n//       }\r\n\r\n//       // console.log(\"TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\", this.props.asn[0].chosenOption[0])\r\n//       // this.props.details1.map((d,i)=>{\r\n//       //   questions[i]=(\r\n//       //     {\r\n//       //       qid:d._id,\r\n//       //       question : d.body,\r\n//       //       isOneTrueAnswer : (d.trueans1+d.trueans2+d.trueans3+d.trueans4+d.trueans5)==1 ? true : false,\r\n//       //       // questionImage : d.quesimg,\r\n//       //       answerOptions: [\r\n//       //         { answerText: d.answer1, UserAnswer: d.userAnswer1, correctAnswer: d.trueans1 },\r\n//       //         { answerText: d.answer2, UserAnswer: d.userAnswer2, correctAnswer: d.trueans2 },\r\n//       //         { answerText: d.answer3, UserAnswer: d.userAnswer3, correctAnswer: d.trueans3 },\r\n//       //         { answerText: d.answer4, UserAnswer: d.userAnswer4, correctAnswer: d.trueans4 },\r\n//       //         { answerText: d.answer5, UserAnswer: d.userAnswer5, correctAnswer: d.trueans5 }\r\n//       //       ]\r\n//       //     }\r\n//       //   )\r\n//       // });\r\n//       console.log(\"1 - End cDM\")\r\n//       this.setState({\r\n//         questions:questions,\r\n//         loading:true\r\n//       })\r\n//     }\r\n\r\n//     handleNextClick=(c)=>{\r\n//       const { count} = this.state;\r\n//         this.setState({\r\n//           count: count+1,\r\n//           checked:false,\r\n//         });\r\n//     }\r\n\r\n//     handlePrevClick=()=>{\r\n//       const { count, questions} = this.state;\r\n//       if (questions.length >= count && count>0) {\r\n//         this.setState({\r\n//           count: count - 1,\r\n//           checked:false,\r\n//         });\r\n//       } \r\n//     }\r\n\r\n//     handleClick = (c)=> {\r\n//       const { count, questions, clickedLabel, answer} = this.state;\r\n//       // questions[c].question=questions[c].question+'fg';\r\n//       if (questions.length >= count && clickedLabel.answerText) {\r\n//         this.setState({\r\n//           questions:questions,\r\n//           count: c+1,\r\n//           clickedLabel: {},\r\n//           answer: clickedLabel.correctAnswer ? answer + 1 : answer,\r\n//           error: false,\r\n//           checked:false,\r\n//         });\r\n//       }\r\n//     }\r\n\r\n//     handleEndClick = (c)=> {\r\n//       const { count, questions, clickedLabel } = this.state;\r\n//       if (questions.length === count) {\r\n//         this.setState({\r\n//           screenFinish: true,\r\n//           testEnded:true,\r\n//           testStarted:false,\r\n//         });\r\n//       }\r\n\r\n\r\n//     }\r\n\r\n//     renderInitial = () => {\r\n//       const { count } = this.state;\r\n\r\n//       this.setState({\r\n//         screen: false,\r\n//         loading:false,\r\n//         count: 1,\r\n//         testStarted:true,\r\n//         testEnded:false,\r\n//         testDidNotStart:false,\r\n//       });\r\n\r\n//       console.log(\"1  CREATE_TEST\")\r\n//       SecurePost({\r\n//         url : `${apis.CREATE_TEST}`,\r\n//         data : {\r\n//           _id: this.props.chapter.testid,\r\n//             chapterid : this.props.chid,\r\n//             materialid : this.props.id,\r\n//             startDate : Date().toLocaleString(),\r\n//             complationDate : Date().toLocaleString(),\r\n//             startTest: true,\r\n//             endTest: false,\r\n//             result: count\r\n//           }\r\n//         })\r\n//         .then((response)=>{\r\n//           if(response.data.success){\r\n//               this.props.ChangeTestModalState(false,null, 'Save'); \r\n//               Alert('success','Успешно',response.data.message);\r\n//           }\r\n//           else{\r\n//               this.props.ChangeTestModalState(false,null, 'Save');\r\n//               return Alert('warning','Предупреждение!',response.data.message);\r\n//           }\r\n//         })\r\n//         .catch((error)=>{\r\n//             this.props.ChangeTestModalState(false,null, 'Save');\r\n//             return Alert('error','Ошибка!','Ошибка сервера');\r\n//         })\r\n      \r\n\r\n//       //   console.log('ZZZZZZZZZZZZZZZZZZZ',questions);\r\n//       //   console.log('XXXXXXXXXXXXXXXXX',this.props.details1);\r\n//       //   var opts= [];\r\n//         // var vOptions;\r\n//         // // var varOptions=[...this.state.questionDetails];\r\n//         // this.props.details1.map((el, i) => {\r\n//         //   // vOptions=[...this.state.questionDetails.options];\r\n//         //   questions[i].answerOptions.map((d,i)=>{\r\n//         //     this.setState((ps,pp)=>{\r\n//         //       return({\r\n//         //           questionDetails:{\r\n//         //               ...ps.questionDetails,\r\n//         //               questionid:el.id,\r\n//         //               options:[\r\n//         //                   ...ps.questionDetails.options,\r\n//         //                   {\r\n//         //                       answer :d.answerText,\r\n//         //                       isAnswer : d.correctAnswer,\r\n//         //                       userAnswer :d.UserAnswer\r\n//         //                   }\r\n//         //               ]\r\n//         //           }\r\n//         //       })\r\n//         //   })\r\n//         //   console.log('DDDDDDDDDDDDDDDDD',questionDetails);\r\n//         //     // vOptions[i]={\r\n//         //     //   ...this.state.questionDetails.options[i],\r\n//         //     //   answer: d.answerText,\r\n//         //     //   isAnswer: d.correctAnswer,\r\n//         //     //   userAnswer: d.UserAnswer\r\n//         //     // }\r\n//         //   })\r\n\r\n//         // })\r\n\r\n//       //   var arr = [];\r\n//       //   // arr[0] = [];\r\n//       //   // console.log('DDDDDDDDDDDDDDDDD',questionDetails);\r\n//       //   questions.map((k, i) => {\r\n//       //     arr[i]=({\r\n//       //       questionid:k.qid\r\n//       //     })\r\n//       //     questions[i].answerOptions.map((d, j)=>{\r\n//       //       arr[i][j]=({\r\n//       //         answers:d.answerText,\r\n//       //         isAnswer:d.correctAnswer,\r\n//       //         userAnswer:d.UserAnswer,\r\n//       //       })\r\n            \r\n//       //     })\r\n//       //     // arr.push(opts)\r\n//       // })\r\n//       // console.log('dddddddefgerf', arr);\r\n//       // // console.log('ddddddddddfvd', opts);\r\n//       // console.log('testid',this.props.chapter.testTableData);\r\n        \r\n//       SecurePost({\r\n//         url : `${apis.CREATE_TST}`,\r\n//         data : {\r\n//           materialId : this.props.id,\r\n//           testid : this.props.chapter.testid,\r\n//         }\r\n//       })\r\n//     };\r\n\r\n//     renderScreenInitial = () => {\r\n//       return (\r\n//         <Container>\r\n//           <ScreenQuiz screen={this.state.screen}>\r\n//             <Title>Тестирование</Title>\r\n//             <Button \r\n//               onClick={this.renderInitial} \r\n//               style={{\r\n//                 fontSize: \"1.2rem\", \r\n//                 fontWeight: \"bold\",\r\n//                 width: \"40%\",\r\n//                 height: \"3rem\",\r\n//                 border: \"none\",\r\n//                 borderRadius: \"5px\",\r\n//                 boxShadow: \"0px 3px 3px 0px #666\"\r\n//               }}\r\n//               >\r\n//                 Начать тест\r\n//             </Button>\r\n\r\n\r\n//             {/* //   font-size: 1.2rem;\r\n// //   font-weight: bold;\r\n// //   width: 40%;\r\n// //   height: 3rem;\r\n// //   // color: #fff;\r\n// //   border: none;\r\n// //   // background: #7159c1;\r\n// //   border-radius: 5px;\r\n// //   box-shadow: 0px 3px 3px 0px #666; */}\r\n            \r\n//           </ScreenQuiz>\r\n//         </Container>\r\n//       );\r\n//     };\r\n  \r\n//     handleOptions = (answerOptions,c) => {\r\n//       const { clickedLabel,questions } = this.state;\r\n//       // console.log('click:',clickedLabel);\r\n//       // console.log('answer1:',answerOptions);\r\n//       return answerOptions.map((a, i) => {\r\n//         return (\r\n//           <Label\r\n//             key={i}\r\n//             onClick={() =>{\r\n\r\n//               // console.log('Onclick c:', c);\r\n//               //  questions[c].answerOptions.answerText=questions[c].answerOptions[2].answerText; \r\n              \r\n//               this.setState({\r\n//                 questions:questions,\r\n//                 clickedLabel: a,\r\n\r\n//                 error: false\r\n//               })}\r\n//             }\r\n//           >\r\n//             { questions[c].isOneTrueAnswer===false ?\r\n//             <Radio \r\n//               // clickedLabel={} \r\n//               checked={a.UserAnswer} \r\n//               // id={'r'c,'s', i}\r\n//               onChange={e => this.handleChange(e,answerOptions, c,i)}\r\n//             />\r\n//             :\r\n//             <Radio  \r\n//               // clickedLabel={clickedLabel.answerText} \r\n//               checked={a.UserAnswer}\r\n//               onChange={e => this.handleChange2(e,answerOptions, c,i)}\r\n//             />\r\n//             }\r\n//             <Paragraph>{a.answerText}</Paragraph>\r\n//           </Label>\r\n          \r\n//         );\r\n//       });\r\n//     };\r\n\r\n//     handleChange = (e,answerOptions, c, i) => {\r\n//       // console.log(\"handleChange:\", e.target ,answerOptions, c, i);\r\n//       const { questions } = this.state\r\n//       // return answerOptions.map((a, i) => {\r\n//         // console.log(\"Onclick\", c);\r\n//         // console.log(\"I\", i);\r\n//         questions[c].answerOptions[i].UserAnswer=true;\r\n        \r\n//         this.setState({\r\n//           // checked: false,\r\n//           questions:questions,\r\n//           // clickedLabel: \r\n//         });\r\n//       // })\r\n//       // console.log('check', e.target.checked);\r\n//       // console.log('I',i)\r\n//     };\r\n\r\n//     handleChange2 = (e,answerOptions, c, i) => {\r\n//       // console.log(\"handleChange:\", e.target.checked ,answerOptions, c, i);\r\n//       const { questions } = this.state\r\n//       questions[c].answerOptions[i].UserAnswer=true;\r\n\r\n//       if(questions[c].answerOptions[i].UserAnswer===true){\r\n//         answerOptions.map((d,j) =>{\r\n//           if(i!==j){\r\n//             questions[c].answerOptions[j].UserAnswer=false;\r\n//           }\r\n//         })\r\n//       }\r\n//         this.setState({\r\n//           questions:questions,\r\n//         });\r\n//     };\r\n\r\n\r\n  \r\n  \r\n//     renderQuestions = () => {\r\n//       const { count,questions } = this.state;\r\n//       const NewQuestions = Array.from(questions);\r\n//       const removeQuestions = NewQuestions.slice(count - 1, count);\r\n//       return removeQuestions.map((q, i) => (\r\n\r\n//         <Container key={i}>\r\n//           <ScreenQuiz>\r\n            \r\n//             {/* <div className=\"timer-container\">\r\n//               <p>\r\n//                 <span className={classnames('right valid', {\r\n//                   'warning': time.distance <= 120000,\r\n//                   'invalid': time.distance < 30000\r\n//                   })} style={{paddingLeft:'10px'}}>\r\n//                   {time.minutes}:{time.seconds}\r\n//                   <span  className=\"mdi mdi-clock-outline mdi-24px\"></span></span>\r\n//               </p>\r\n//             </div> */}\r\n//             <Counter/>\r\n\r\n//             <h3>{count}/{questions.length}</h3>\r\n//             <Title>{q.question}</Title>         \r\n//             <label>{count}</label>\r\n//             <ContainerLabel>\r\n//               {this.handleOptions(q.answerOptions, count-1)}\r\n//             </ContainerLabel>\r\n//             <Button onClick={()=>this.handleClick(count-1)}\r\n//                           style={{\r\n//                             fontSize: \"1.2rem\", \r\n//                             fontWeight: \"bold\",\r\n//                             width: \"40%\",\r\n//                             height: \"3rem\",\r\n//                             border: \"none\",\r\n//                             borderRadius: \"5px\",\r\n//                             boxShadow: \"0px 3px 3px 0px #666\"\r\n//                           }}\r\n//             >\r\n//                 Сохранить\r\n//             </Button>\r\n//             { count===questions.length ?\r\n//             <Button onClick={this.handleEndClick}\r\n//               style={{\r\n//                 marginTop: '30px',\r\n//                 fontSize: \"1.2rem\", \r\n//                 fontWeight: \"bold\",\r\n//                 width: \"40%\",\r\n//                 height: \"3rem\",\r\n//                 border: \"none\",\r\n//                 borderRadius: \"5px\",\r\n//                 boxShadow: \"0px 3px 3px 0px #666\"\r\n//               }}\r\n//             >\r\n//                 Завершить тест\r\n//             </Button>\r\n//               : null\r\n//           }\r\n//             {/* {error && <Error>Пожалуйста, проверьте варианты.</Error>} */}\r\n//             <ButtonScr onClick={()=>this.handleNextClick(count)} right disabled={count === questions.length}>Следующий</ButtonScr>\r\n//             <ButtonScr onClick={this.handlePrevClick} left disabled={count===1}>Предыдущий</ButtonScr>\r\n//             {/* {console.log('Count:',count)} */}\r\n//           </ScreenQuiz>\r\n//         </Container>\r\n\r\n//       ));\r\n//     };\r\n  \r\n//     renderResult = () => {\r\n//       const { answer,questions, screenFinish } = this.state;\r\n  \r\n//       return (\r\n//         <Container>\r\n//           <ScreenQuiz screen={screenFinish}>\r\n//             <Title>Вы правильно ответили {answer} из {questions.length} вопросов</Title>\r\n//             <Button\r\n//               onClick={() =>\r\n//                 this.setState({\r\n//                   count: 0,\r\n//                   screenFinish: false,\r\n//                   screen: true,\r\n//                   answer: 0\r\n//                 })\r\n//               }\r\n\r\n//               style={{\r\n//                 fontSize: \"1.2rem\", \r\n//                 fontWeight: \"bold\",\r\n//                 width: \"40%\",\r\n//                 height: \"3rem\",\r\n//                 border: \"none\",\r\n//                 borderRadius: \"5px\",\r\n//                 boxShadow: \"0px 3px 3px 0px #666\"\r\n//               }}\r\n//             >\r\n//               Тестировать заново\r\n//             </Button>\r\n//           </ScreenQuiz>\r\n//         </Container>\r\n//       );\r\n//     };\r\n\r\n\r\n//     render() {\r\n//       const { screenFinish, questions, screen } = this.state;\r\n\r\n//       return !screenFinish && questions ? (\r\n//         <>{screen ? this.renderScreenInitial() : this.renderQuestions()}</>\r\n//       ) : (\r\n//         this.renderResult()\r\n//       );\r\n//     }\r\n\r\n//     // render() {\r\n//     //   console.log('qas',this.props.trainer.QuestionTableData);\r\n//     //   console.log('qaz',this.state);\r\n//     //   return (\r\n//     //     <div>\r\n//     //       <h1>Тестирование номер 1</h1>\r\n//     //       {this.state.isStarted ? null : (\r\n//     //         <div id=\"button\">\r\n//     //           <Button variant=\"contained\" color=\"secondary\" onClick={()=>this.handleClick}>\r\n//     //             Начать тест\r\n//     //           </Button>\r\n//     //         </div>\r\n//     //       )}\r\n        \r\n//     //     {this.state.isStarted ? (\r\n//     //     // <Test2  details={this.props.trainer.QuestionTableData}/>\r\n//     //     ) : null}\r\n//     //     </div>\r\n//     //   )\r\n//     // }\r\n//   }\r\n  \r\n//   const mapStateToProps = state => ({\r\n//       chapter : state.chapter,\r\n//       trainer : state.trainer\r\n//   });\r\n  \r\n//   export default connect(mapStateToProps,{\r\n//       ChangeQuestionSearchText,\r\n//       ChangeQuestionTableData,\r\n//       ChangeQuestionModalState,\r\n//       ChangeTestSearchText,\r\n//       ChangeTestTableData,\r\n//       ChangeTestModalState,\r\n//       ChangeAnswersSearchText,\r\n//       ChangeAnswersTableData,\r\n//       // ChangeAnswersModalState\r\n//   })(Test);\r\n\r\n"],"mappings":"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},"metadata":{},"sourceType":"module"}
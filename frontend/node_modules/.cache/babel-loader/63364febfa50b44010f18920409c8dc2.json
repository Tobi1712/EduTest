{"ast":null,"code":"var _jsxFileName = \"C:\\\\React_project\\\\EduTest\\\\frontend\\\\src\\\\components\\\\admin\\\\Options\\\\newoptions.js\";\nimport React, { Component } from 'react'; // import './newdivision.css';\n\nimport { Form, Input, Button, Select, Checkbox, Modal, Row, Col } from 'antd';\nimport { SecurePost } from '../../../services/axiosCall';\nimport apis from '../../../services/Apis';\nimport { connect } from 'react-redux';\nimport { ChangeOptionConfirmDirty, ChangeOptionModalState, ChangeOptionTableData } from '../../../actions/trainerAction';\nimport auth from '../../../services/AuthServices';\nimport Alert from '../../../components/common/alert';\nconst Option = Select.Option;\n\nclass NewOption extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Полученные значения формы: ', values);\n          SecurePost({\n            url: \"\".concat(apis.CREATE_OPTION),\n            data: {\n              _id: this.props.admin.optionId,\n              optbody: values.optbody,\n              isAnswer: values.isAnswer,\n              question: values.question\n            }\n          }).then(response => {\n            if (response.data.success) {\n              this.props.ChangeDivisionModalState(false, null, 'Регистрация');\n              Alert('success', 'Успешно', response.data.message);\n              this.props.ChangeDivisionTableData();\n            } else {\n              console.log(response.data);\n              this.props.ChangeDivisionModalState(false, null, 'Регистрация');\n              return Alert('warning', 'Предупреждение!', response.data.message);\n            }\n          }).catch(error => {\n            this.props.ChangeDivisionModalState(false, null, 'Регистрация');\n            return Alert('error', 'Ошибка!', 'Ошибка сервера');\n          });\n        }\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const TextArea = Input.TextArea;\n    return React.createElement(\"div\", {\n      className: \"register-division-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"register-division-form-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Row, {\n      key: i,\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Col, {\n      offset: 1,\n      span: 13,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"\\u0412\\u0430\\u0440\\u0438\\u0430\\u043D\\u0442\",\n      hasFeedback: true,\n      className: \"input-admin-division\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, getFieldDecorator('optbody', {\n      initialValue: this.props.trainer.optiondetails.optbody,\n      rules: [{\n        required: true,\n        message: 'Пожалуйста, введите название подразделения!',\n        whitespace: true\n      }]\n    })(React.createElement(TextArea, {\n      rows: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })))), React.createElement(Col, {\n      span: 2,\n      style: {\n        padding: '55px 10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      checked: this.props.trainer.optiondetails.isAnswer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })))))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  admin: state.admin,\n  trainer: state.trainer\n});\n\nconst NewOptionForm = Form.create({\n  name: 'newOption'\n})(NewOption);\nexport default connect(mapStateToProps, {\n  ChangeOptionConfirmDirty,\n  ChangeOptionModalState,\n  ChangeOptionTableData\n})(NewOptionForm);","map":{"version":3,"sources":["C:\\React_project\\EduTest\\frontend\\src\\components\\admin\\Options\\newoptions.js"],"names":["React","Component","Form","Input","Button","Select","Checkbox","Modal","Row","Col","SecurePost","apis","connect","ChangeOptionConfirmDirty","ChangeOptionModalState","ChangeOptionTableData","auth","Alert","Option","NewOption","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","url","CREATE_OPTION","data","_id","admin","optionId","optbody","isAnswer","question","then","response","success","ChangeDivisionModalState","message","ChangeDivisionTableData","catch","error","render","getFieldDecorator","TextArea","i","initialValue","trainer","optiondetails","rules","required","whitespace","padding","mapStateToProps","state","NewOptionForm","create","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\n// import './newdivision.css';\r\nimport {\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Select,\r\n    Checkbox,\r\n    Modal,\r\n    Row,\r\n    Col\r\n} from 'antd';\r\nimport {SecurePost} from '../../../services/axiosCall';\r\nimport apis from '../../../services/Apis';\r\nimport { connect } from 'react-redux';\r\nimport { \r\n    ChangeOptionConfirmDirty,\r\n    ChangeOptionModalState,\r\n    ChangeOptionTableData\r\n} from '../../../actions/trainerAction';\r\nimport auth from '../../../services/AuthServices';\r\nimport Alert from '../../../components/common/alert';\r\nconst { Option } = Select;\r\nclass NewOption extends Component {\r\n\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n            if (!err) {\r\n                console.log('Полученные значения формы: ', values);\r\n                \r\n                    SecurePost({\r\n                        url : `${apis.CREATE_OPTION}`,\r\n                        data : {\r\n                            _id : this.props.admin.optionId,\r\n                            optbody : values.optbody,                            \r\n                            isAnswer : values.isAnswer,\r\n                            question : values.question\r\n                        }\r\n                    }).then((response)=>{\r\n                        if(response.data.success){\r\n                            this.props.ChangeDivisionModalState(false,null,'Регистрация');\r\n                            Alert('success','Успешно',response.data.message);\r\n                            this.props.ChangeDivisionTableData();\r\n                        }\r\n                        else{\r\n                            console.log(response.data);\r\n                            this.props.ChangeDivisionModalState(false,null,'Регистрация');\r\n                            return Alert('warning','Предупреждение!',response.data.message);\r\n                        }\r\n                    }).catch((error)=>{\r\n                        this.props.ChangeDivisionModalState(false,null,'Регистрация');\r\n                        return Alert('error','Ошибка!','Ошибка сервера');\r\n                    })\r\n                \r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        const { TextArea } = Input;\r\n        return (\r\n            <div className=\"register-division-form\">\r\n                <div className=\"register-division-form-body\">\r\n                    <Form  onSubmit={this.handleSubmit}>\r\n                        <Row key={i} className=\"\">\r\n                            <Col offset={1} span={13}>\r\n                                <Form.Item label=\"Вариант\" hasFeedback className=\"input-admin-division\">\r\n                                {getFieldDecorator('optbody', {\r\n                                    initialValue : this.props.trainer.optiondetails.optbody,\r\n                                    rules: [{ required: true, message: 'Пожалуйста, введите название подразделения!', whitespace: true }],\r\n                                })(<TextArea rows={2} />)}\r\n                                </Form.Item>\r\n                            </Col>\r\n                            <Col span={2} style={{padding : '55px 10px'}}>\r\n                                <Form.Item>\r\n                                    <Checkbox checked={this.props.trainer.optiondetails.isAnswer} />\r\n                                </Form.Item>\r\n                            </Col>\r\n                        </Row>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    admin : state.admin,\r\n    trainer : state.trainer,\r\n});\r\n\r\nconst NewOptionForm = Form.create({ name: 'newOption' })(NewOption);\r\n\r\nexport default connect(mapStateToProps,{\r\n    ChangeOptionConfirmDirty,\r\n    ChangeOptionModalState,\r\n    ChangeOptionTableData\r\n})(NewOptionForm);\r\n\r\n"]},"metadata":{},"sourceType":"module"}
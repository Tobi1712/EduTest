{"ast":null,"code":"var _jsxFileName = \"C:\\\\React_project\\\\EduTest\\\\frontend\\\\src\\\\components\\\\admin\\\\Slides\\\\newslide.js\";\nimport React, { Component } from 'react';\nimport '../Division/newdivision.css';\nimport { Form, Input, Button, Icon, Select, Upload } from 'antd';\nimport { SecurePost } from '../../../services/axiosCall';\nimport apis from '../../../services/Apis';\nimport { connect } from 'react-redux';\nimport { ChangeSlideConfirmDirty, ChangeSlideModalState, ChangeSlideTableData } from '../../../actions/chapterAction';\nimport Alert from '../../../components/common/alert';\nimport auth from '../../../services/AuthServices';\nconst Option = Select.Option;\n\nclass NewSlide extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Полученные значения формы: ', values);\n          SecurePost({\n            url: \"\".concat(apis.CREATE_DIVISION),\n            data: {\n              _id: this.props.admin.divisionId,\n              name: values.name,\n              description: values.description\n            }\n          }).then(response => {\n            if (response.data.success) {\n              this.props.ChangeDivisionModalState(false, null, 'Регистрация');\n              Alert('success', 'Успешно', response.data.message);\n              this.props.ChangeDivisionTableData();\n            } else {\n              console.log(response.data);\n              this.props.ChangeDivisionModalState(false, null, 'Регистрация');\n              return Alert('warning', 'Предупреждение!', response.data.message);\n            }\n          }).catch(error => {\n            this.props.ChangeDivisionModalState(false, null, 'Регистрация');\n            return Alert('error', 'Ошибка!', 'Ошибка сервера');\n          });\n        }\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    var SlideImageprops = {\n      name: 'file',\n      action: \"\".concat(apis.BASE).concat(apis.FILE_UPLOAD, \"?Token=\").concat(auth.retriveToken()),\n      listType: 'picture'\n    };\n    return React.createElement(\"div\", {\n      className: \"register-division-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"register-division-form-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435\",\n      hasFeedback: true,\n      className: \"input-admin-division\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, getFieldDecorator('slbody', {\n      initialValue: this.props.chapter.slidedetails.slbody,\n      rules: [{\n        required: true,\n        message: 'Пожалуйста, введите название подразделения!',\n        whitespace: true\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"\\u0421\\u043B\\u0430\\u0439\\u0434\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Upload, Object.assign({}, SlideImageprops, {\n      beforeUpload: this.upl,\n      onRemove: f => this.SlideImageonChange(null),\n      onSuccess: f => this.SlideImageonChange(f),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), getFieldDecorator('slimage', {\n      initialValue: this.props.chapter.slidedetails.slimage,\n      rules: [{\n        required: false,\n        message: 'Пожалуйста, загрузите логотип вашей компании!',\n        whitespace: true\n      }]\n    })(React.createElement(\"img\", {\n      src: this.props.chapter.getAllSlides.slides,\n      style: {\n        width: \"60px\",\n        height: \"60px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })), React.createElement(Button, {\n      style: {\n        marginLeft: '100px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), \" \\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C\"))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      block: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, this.props.chapter.Slidemode)))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  admin: state.admin,\n  chapter: state.chapter\n});\n\nconst NewSlideForm = Form.create({\n  name: 'register'\n})(NewSlide);\nexport default connect(mapStateToProps, {\n  ChangeSlideConfirmDirty,\n  ChangeSlideModalState,\n  ChangeSlideTableData\n})(NewSlideForm);","map":{"version":3,"sources":["C:\\React_project\\EduTest\\frontend\\src\\components\\admin\\Slides\\newslide.js"],"names":["React","Component","Form","Input","Button","Icon","Select","Upload","SecurePost","apis","connect","ChangeSlideConfirmDirty","ChangeSlideModalState","ChangeSlideTableData","Alert","auth","Option","NewSlide","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","console","log","url","CREATE_DIVISION","data","_id","admin","divisionId","name","description","then","response","success","ChangeDivisionModalState","message","ChangeDivisionTableData","catch","error","render","getFieldDecorator","SlideImageprops","action","BASE","FILE_UPLOAD","retriveToken","listType","initialValue","chapter","slidedetails","slbody","rules","required","whitespace","upl","f","SlideImageonChange","slimage","getAllSlides","slides","width","height","marginLeft","Slidemode","mapStateToProps","state","NewSlideForm","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport '../Division/newdivision.css';\r\nimport {\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Icon,\r\n    Select,\r\n    Upload\r\n} from 'antd';\r\nimport {SecurePost} from '../../../services/axiosCall';\r\nimport apis from '../../../services/Apis';\r\nimport { connect } from 'react-redux';\r\nimport { \r\n    ChangeSlideConfirmDirty,\r\n    ChangeSlideModalState,\r\n    ChangeSlideTableData\r\n} from '../../../actions/chapterAction';\r\nimport Alert from '../../../components/common/alert';\r\nimport auth from '../../../services/AuthServices';\r\nconst { Option } = Select;\r\nclass NewSlide extends Component {\r\n\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n            if (!err) {\r\n                console.log('Полученные значения формы: ', values);\r\n                \r\n                    SecurePost({\r\n                        url : `${apis.CREATE_DIVISION}`,\r\n                        data : {\r\n                            _id : this.props.admin.divisionId,\r\n                            name : values.name,                            \r\n                            description : values.description\r\n                        }\r\n                    }).then((response)=>{\r\n                        if(response.data.success){\r\n                            this.props.ChangeDivisionModalState(false,null,'Регистрация');\r\n                            Alert('success','Успешно',response.data.message);\r\n                            this.props.ChangeDivisionTableData();\r\n                        }\r\n                        else{\r\n                            console.log(response.data);\r\n                            this.props.ChangeDivisionModalState(false,null,'Регистрация');\r\n                            return Alert('warning','Предупреждение!',response.data.message);\r\n                        }\r\n                    }).catch((error)=>{\r\n                        this.props.ChangeDivisionModalState(false,null,'Регистрация');\r\n                        return Alert('error','Ошибка!','Ошибка сервера');\r\n                    })\r\n                \r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        var SlideImageprops={\r\n            name: 'file',\r\n            action: `${apis.BASE}${apis.FILE_UPLOAD}?Token=${auth.retriveToken()}`,\r\n            listType: 'picture',\r\n        }\r\n        return (\r\n            <div className=\"register-division-form\">\r\n                <div className=\"register-division-form-body\">\r\n                    <Form  onSubmit={this.handleSubmit}>\r\n                        <Form.Item label=\"Название\" hasFeedback className=\"input-admin-division\">\r\n                            {getFieldDecorator('slbody', {\r\n                                initialValue : this.props.chapter.slidedetails.slbody,\r\n                                rules: [{ required: true, message: 'Пожалуйста, введите название подразделения!', whitespace: true }],\r\n                            })(<Input />)}\r\n                        </Form.Item>\r\n                    \r\n                        <Form.Item label=\"Слайд\">\r\n                        <Upload {...SlideImageprops} beforeUpload={this.upl} onRemove={(f)=>this.SlideImageonChange(null)} onSuccess={(f)=>this.SlideImageonChange(f)}>\r\n                                {getFieldDecorator('slimage', {\r\n                                    initialValue : this.props.chapter.slidedetails.slimage,\r\n                                    rules: [{ required: false, message: 'Пожалуйста, загрузите логотип вашей компании!', whitespace: true }],\r\n                                })(<img src={this.props.chapter.getAllSlides.slides} style={{width: \"60px\",height: \"60px\",}}/>)\r\n                                }\r\n                                \r\n                                <Button style={{marginLeft: '100px'}}>\r\n                                    <Icon type=\"upload\" /> Загрузить\r\n                                </Button>\r\n                                \r\n                            </Upload>\r\n                        </Form.Item>\r\n\r\n                        \r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\" block>\r\n                                {this.props.chapter.Slidemode}\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    admin : state.admin,\r\n    chapter : state.chapter\r\n});\r\n\r\n\r\n\r\nconst NewSlideForm = Form.create({ name: 'register' })(NewSlide);\r\n\r\nexport default connect(mapStateToProps,{\r\n    ChangeSlideConfirmDirty,\r\n    ChangeSlideModalState,\r\n    ChangeSlideTableData\r\n})(NewSlideForm);\r\n\r\n"]},"metadata":{},"sourceType":"module"}
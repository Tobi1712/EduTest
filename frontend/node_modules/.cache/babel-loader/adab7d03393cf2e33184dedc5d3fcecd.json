{"ast":null,"code":"import { css as _css } from \"styled-components\";\nimport { createGlobalStyle as _createGlobalStyle } from \"styled-components\";\nimport _styled from \"styled-components\";\nvar _jsxFileName = \"C:\\\\React_project\\\\EduTest\\\\frontend\\\\src\\\\components\\\\customer\\\\Testing\\\\test.js\";\nimport React, { Component, useState } from 'react';\nimport Slider from 'react-touch-drag-slider';\nimport { connect } from 'react-redux';\nimport { Table, Input, Button, Typography, Divider, Icon, Modal, Popconfirm } from 'antd';\nimport Highlighter from 'react-highlight-words';\nimport { ChangeQuestionSearchText, ChangeQuestionTableData, ChangeQuestionModalState } from '../../../actions/trainerAction';\nimport Alert from '../../../components/common/alert';\nimport { SecurePost } from '../../../services/axiosCall';\nimport apis from '../../../services/Apis';\nimport Test2 from './test2';\nimport Test3 from './test3';\n\nclass Test extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = () => {\n      const _this$state = this.state,\n            count = _this$state.count,\n            questions = _this$state.questions,\n            clickedLabel = _this$state.clickedLabel,\n            answer = _this$state.answer,\n            second = _this$state.second;\n\n      if (questions.length >= count && clickedLabel.label) {\n        this.setState({\n          count: count + 1,\n          clickedLabel: {},\n          answer: clickedLabel.currectAnswer ? answer + 1 : answer,\n          error: false // second: 1\n\n        });\n      } else {\n        this.setState({\n          count: count,\n          error: true\n        });\n      }\n\n      if (questions.length === count) {\n        this.setState({\n          screenFinish: true\n        });\n      }\n\n      this.handleCountDown();\n    };\n\n    this.handleCountDown = () => {\n      const _this$state2 = this.state,\n            second = _this$state2.second,\n            count = _this$state2.count;\n      clearInterval(this.timer);\n      let counter = 1;\n      this.timer = setInterval(() => {\n        if (counter >= 10) {\n          clearInterval(this.timer);\n\n          if (second >= 10) {\n            this.setState({\n              count: count + 1\n            });\n          }\n        }\n\n        this.setState({\n          second: counter\n        });\n        console.log(counter++);\n      }, 1000);\n    };\n\n    this.renderInitial = () => {\n      const _this$state3 = this.state,\n            second = _this$state3.second,\n            count = _this$state3.count;\n      this.setState({\n        screen: false,\n        count: 1\n      });\n      this.handleCountDown();\n    };\n\n    this.renderScreenInitial = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        screen: this.state.screen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Country Quiz\"), /*#__PURE__*/React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Click to start\"), /*#__PURE__*/React.createElement(Button, {\n        onClick: this.renderInitial,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Begin\")));\n    };\n\n    this.handleOptions = alternatives => {\n      const clickedLabel = this.state.clickedLabel;\n      return alternatives.map((alternative, index) => {\n        return /*#__PURE__*/React.createElement(Label, {\n          key: index,\n          onClick: () => this.setState({\n            clickedLabel: alternative,\n            error: false\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, /*#__PURE__*/React.createElement(Radio, {\n          clickedLabel: clickedLabel.label === alternative.label,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, /*#__PURE__*/React.createElement(IntoRadio, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        })), /*#__PURE__*/React.createElement(Paragraph, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, alternative.label));\n      });\n    };\n\n    this.renderQuestions = () => {\n      const _this$state4 = this.state,\n            questions = _this$state4.questions,\n            count = _this$state4.count,\n            error = _this$state4.error,\n            second = _this$state4.second;\n      const NewQuestions = Array.from(questions);\n      const removeQuestions = NewQuestions.slice(count - 1, count);\n      return removeQuestions.map((quest, index) => /*#__PURE__*/React.createElement(Container, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, /*#__PURE__*/React.createElement(ScreenQuiz, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, second), /*#__PURE__*/React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, quest.question), /*#__PURE__*/React.createElement(ContainerLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, this.handleOptions(quest.alternatives)), /*#__PURE__*/React.createElement(Button, {\n        onClick: this.handleClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"Submit\"), error && /*#__PURE__*/React.createElement(Error, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"Please check an alternative.\"))));\n    };\n\n    this.renderResult = () => {\n      const _this$state5 = this.state,\n            answer = _this$state5.answer,\n            screenFinish = _this$state5.screenFinish;\n      return /*#__PURE__*/React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, /*#__PURE__*/React.createElement(ScreenQuiz, {\n        screen: screenFinish,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, /*#__PURE__*/React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"you got \", answer, \" out of 5 questions\"), /*#__PURE__*/React.createElement(Button, {\n        onClick: () => this.setState({\n          count: 0,\n          screenFinish: false,\n          screen: true,\n          answer: 0\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"Play again\")));\n    };\n\n    this.state = {\n      screen: true,\n      count: 0,\n      clickedLabel: {},\n      answer: 0,\n      error: false,\n      screenFinish: false,\n      second: 1\n    };\n  }\n\n  componentDidMount() {\n    this.props.ChangeQuestionTableData(this.props.id);\n  }\n\n  render() {\n    const _this$state6 = this.state,\n          screenFinish = _this$state6.screenFinish,\n          screen = _this$state6.screen;\n    var questions = [];\n    props.details.map((d, i) => {\n      questions[i] = {\n        questionText: d.body,\n        questionImage: d.quesimg,\n        answerOptions: [{\n          answerText: d.answer1,\n          isCorrect: d.trueans1\n        }, {\n          answerText: d.answer2,\n          isCorrect: d.trueans2\n        }, {\n          answerText: d.answer3,\n          isCorrect: d.trueans3\n        }, {\n          answerText: d.answer4,\n          isCorrect: d.trueans4\n        }, {\n          answerText: d.answer5,\n          isCorrect: d.trueans5\n        }]\n      };\n    });\n    return !screenFinish ? /*#__PURE__*/React.createElement(React.Fragment, null, screen ? this.renderScreenInitial() : this.renderQuestions()) : this.renderResult();\n  } // render() {\n  //   console.log('qas',this.props.trainer.QuestionTableData);\n  //   console.log('qaz',this.state);\n  //   return (\n  //     <div>\n  //       <h1>Тестирование номер 1</h1>\n  //       {this.state.isStarted ? null : (\n  //         <div id=\"button\">\n  //           <Button variant=\"contained\" color=\"secondary\" onClick={()=>this.handleClick}>\n  //             Начать тест\n  //           </Button>\n  //         </div>\n  //       )}\n  //     {this.state.isStarted ? (\n  //     // <Test2  details={this.props.trainer.QuestionTableData}/>\n  //     ) : null}\n  //     </div>\n  //   )\n  // }\n\n\n}\n\nconst mapStateToProps = state => ({\n  chapter: state.chapter,\n  trainer: state.trainer\n});\n\nexport default connect(mapStateToProps, {\n  ChangeQuestionSearchText,\n  ChangeQuestionTableData,\n  ChangeQuestionModalState\n})(Test); // const Test = (props) => {\n//   var questions=[];\n//   props.details.map((d,i)=>{\n//     questions[i]=(\n//       {\n//         questionText : d.body,\n//         questionImage : d.quesimg,\n//                 // optionA : d.answer1,\n//                 // optionB : d.answer2,\n//                 // optionC : d.answer3,\n//                 // optionD : d.answer4,\n//                 // optionE : d.answer5,\n//                 // answer : (d.trueans1===true ? d.answer1 : null) || (d.trueans2===true ? d.answer2 : null) || (d.trueans3===true ? d.answer3 : null) ||\n//                 //          (d.trueans4===true ? d.answer4 : null) || (d.trueans5===true ? d.answer5 : null)\n//                 answerOptions: [\n//                   { answerText: d.answer1, isCorrect: d.trueans1 },\n//                   { answerText: d.answer2, isCorrect: d.trueans2 },\n//                   { answerText: d.answer3, isCorrect: d.trueans3 },\n//                   { answerText: d.answer4, isCorrect: d.trueans4 },\n//                   { answerText: d.answer5, isCorrect: d.trueans5}\n//                 ]\n//             }\n//         )\n//     });\n//     const [currentQuestion, setCurrentQuestion] = useState(0);\n//     const [showScore, setShowScore] = useState(false);\n//     const [score, setScore] = useState(0);\n//     const [checked, setChecked] = useState(true);\n//     const [numberOfQuestions, setNumberOfQuestions] = useState(0);\n//     const handleChange = (answerOption) => {\n//       setChecked(!checked);\n//     };\n//     const handleAnswerOptionClick = (isCorrect) => {\n//       if (isCorrect && checked) {\n//         setScore(score + 1);\n//       }\n//     };\n//     const handleButtonClick = () =>{\n//       const nextQuestion = currentQuestion + 1;\n//       if(nextQuestion < questions.length){\n//         setCurrentQuestion(nextQuestion);\n//       } else {\n//         setShowScore(true);\n//       }\n//     };\n//     // render() {\n//     let responsive = {\n//       desktop: {\n//         breakpoint: { max: 3000, min: 1024 },\n//         items: 1,\n//         slidesToSlide: 1 // optional, default to 1.\n//       },\n//       tablet: {\n//         breakpoint: { max: 1024, min: 464 },\n//         items: 1,\n//         slidesToSlide: 1 // optional, default to 1.\n//       },\n//       mobile: {\n//         breakpoint: { max: 464, min: 0 },\n//         items: 1,\n//         slidesToSlide: 1 // optional, default to 1.\n//       }\n//     };\n//       console.log('ptngjf:', questions);\n//         return (\n//           <div className=\"App\">\n//             <Carousel\n//             swipeable={false}\n//             draggable={false}\n//             showDots={true}\n//             responsive={responsive}\n//             ssr={true} // means to render carousel on server-side.\n//             infinite={true}\n//             // focusOnSelect={true}\n//             // autoPlay={this.props.deviceType !== \"mobile\" ? true : false}\n//             autoPlaySpeed={1000}\n//             keyBoardControl={true}\n//             customTransition=\"all .5\"\n//             transitionDuration={500}\n//             containerClass=\"carousel-container\"\n//             partialVisible=\"true\"\n//             // removeArrowOnDeviceType={[\"tablet\", \"mobile\"]}\n//             // deviceType={this.props.deviceType}\n//             // dotListClass=\"custom-dot-list-style\"\n//             itemClass=\"carousel-item-padding-left-400-px\"\n//           >\n//           {questions.map((d,i) => (\n//             <div key={i} style={{paddingLeft:'500px', paddingBottom: '50px', fontSize:'22px'}}>   \n//               <h3>{d.questionTextg}</h3>\n//               {d.questionImage!==null ?\n//               <div><img src={d.questionImage} style={{width: '20%'}} alt=\"\"/></div>\n//                 : null\n//               }\n//               {d.answerOptions.map((k,i) =>(\n//                 <div key={i}>\n//                   <input className=\"option\" type=\"checkbox\" id={i} onClick={() =>\n//                         handleAnswerOptionClick(k.isCorrect)\n//                       } onChange={handleChange}/> \n//                   <label>{k.answerText}</label>\n//                 </div>\n//               ))}\n//               <div className=\"question__submit\">\n//                 <button id=\"save-button\" onClick={handleButtonClick}>Сохранить</button>\n//               </div>\n//               {/* <div><input type=\"checkbox\"/> <label>{d.optionB}</label></div>\n//               <div><input type=\"checkbox\"/> <label>{d.optionC}</label></div>\n//               <div><input type=\"checkbox\"/> <label>{d.optionD}</label></div>\n//               <div><input type=\"checkbox\"/> <label>{d.optionE}</label></div> */}\n//             </div>\n//           ))}\n//           </Carousel>\n//           </div>\n//         )\n//   }","map":{"version":3,"names":["React","Component","useState","Slider","connect","Table","Input","Button","Typography","Divider","Icon","Modal","Popconfirm","Highlighter","ChangeQuestionSearchText","ChangeQuestionTableData","ChangeQuestionModalState","Alert","SecurePost","apis","Test2","Test3","Test","constructor","props","handleClick","state","count","questions","clickedLabel","answer","second","length","label","setState","currectAnswer","error","screenFinish","handleCountDown","clearInterval","timer","counter","setInterval","console","log","renderInitial","screen","renderScreenInitial","handleOptions","alternatives","map","alternative","index","renderQuestions","NewQuestions","Array","from","removeQuestions","slice","quest","question","renderResult","componentDidMount","id","render","details","d","i","questionText","body","questionImage","quesimg","answerOptions","answerText","answer1","isCorrect","trueans1","answer2","trueans2","answer3","trueans3","answer4","trueans4","answer5","trueans5","mapStateToProps","chapter","trainer"],"sources":["C:/React_project/EduTest/frontend/src/components/customer/Testing/test.js"],"sourcesContent":["import React, { Component, useState } from 'react'\r\nimport Slider from 'react-touch-drag-slider'\r\nimport { connect } from 'react-redux';\r\nimport { Table, Input, Button, Typography, Divider, Icon, Modal, Popconfirm } from 'antd';\r\nimport Highlighter from 'react-highlight-words';\r\nimport styled, { createGlobalStyle, css } from 'styled-components/macro'\r\nimport { \r\n    ChangeQuestionSearchText,\r\n    ChangeQuestionTableData,\r\n    ChangeQuestionModalState\r\n} from '../../../actions/trainerAction';\r\nimport Alert from '../../../components/common/alert';\r\nimport {SecurePost} from '../../../services/axiosCall';\r\nimport apis from '../../../services/Apis';\r\nimport Test2 from './test2';\r\nimport Test3 from './test3';\r\n\r\n\r\nclass Test extends Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state={\r\n        screen: true,\r\n        count: 0,\r\n        clickedLabel: {},\r\n        answer: 0,\r\n        error:false,\r\n        screenFinish:false,\r\n        second:1\r\n      }\r\n    }\r\n  \r\n    componentDidMount(){\r\n      this.props.ChangeQuestionTableData(this.props.id);\r\n    }\r\n\r\n    handleClick = ()=> {\r\n      const { count, questions, clickedLabel, answer, second } = this.state;\r\n\r\n      if (questions.length >= count && clickedLabel.label) {\r\n        this.setState({\r\n          count: count + 1,\r\n          clickedLabel: {},\r\n          answer: clickedLabel.currectAnswer ? answer + 1 : answer,\r\n          error: false\r\n          // second: 1\r\n        });\r\n      } \r\n      else {\r\n        this.setState({\r\n          count: count,\r\n          error: true\r\n        });\r\n      }\r\n\r\n      if (questions.length === count) {\r\n        this.setState({\r\n          screenFinish: true\r\n        });\r\n      }\r\n      this.handleCountDown();\r\n    }\r\n\r\n    handleCountDown = () => {\r\n      const { second, count } = this.state;\r\n      clearInterval(this.timer);\r\n  \r\n      let counter = 1;\r\n      this.timer = setInterval(() => {\r\n        if (counter >= 10) {\r\n          clearInterval(this.timer);\r\n          if (second >= 10) {\r\n            this.setState({\r\n              count: count + 1\r\n            });\r\n          }\r\n        }\r\n  \r\n        this.setState({\r\n          second: counter\r\n        });\r\n        console.log(counter++);\r\n      }, 1000);\r\n    };\r\n\r\n    renderInitial = () => {\r\n      const { second, count } = this.state;\r\n  \r\n      this.setState({\r\n        screen: false,\r\n        count: 1\r\n      });\r\n      this.handleCountDown();\r\n    };\r\n\r\n    renderScreenInitial = () => {\r\n      return (\r\n        <div>\r\n          <div screen={this.state.screen}>\r\n            <h2>Country Quiz</h2>\r\n            <h4>Click to start</h4>\r\n            <Button onClick={this.renderInitial}>Begin</Button>\r\n          </div>\r\n        </div>\r\n      );\r\n    };\r\n  \r\n    handleOptions = alternatives => {\r\n      const { clickedLabel } = this.state;\r\n  \r\n      return alternatives.map((alternative, index) => {\r\n        return (\r\n          <Label\r\n            key={index}\r\n            onClick={() =>\r\n              this.setState({\r\n                clickedLabel: alternative,\r\n                error: false\r\n              })\r\n            }\r\n          >\r\n            <Radio clickedLabel={clickedLabel.label === alternative.label}>\r\n              <IntoRadio />\r\n            </Radio>\r\n            <Paragraph>{alternative.label}</Paragraph>\r\n          </Label>\r\n        );\r\n      });\r\n    };\r\n  \r\n    renderQuestions = () => {\r\n      const { questions, count, error, second } = this.state;\r\n  \r\n      const NewQuestions = Array.from(questions);\r\n      const removeQuestions = NewQuestions.slice(count - 1, count);\r\n  \r\n      return removeQuestions.map((quest, index) => (\r\n        <Container key={index}>\r\n          <ScreenQuiz>\r\n            <p>{second}</p>\r\n            <Title>{quest.question}</Title>\r\n            <ContainerLabel>\r\n              {this.handleOptions(quest.alternatives)}\r\n            </ContainerLabel>\r\n            <Button onClick={this.handleClick}>Submit</Button>\r\n            {error && <Error>Please check an alternative.</Error>}\r\n          </ScreenQuiz>\r\n        </Container>\r\n      ));\r\n    };\r\n  \r\n    renderResult = () => {\r\n      const { answer, screenFinish } = this.state;\r\n  \r\n      return (\r\n        <Container>\r\n          <ScreenQuiz screen={screenFinish}>\r\n            <Title>you got {answer} out of 5 questions</Title>\r\n            <Button\r\n              onClick={() =>\r\n                this.setState({\r\n                  count: 0,\r\n                  screenFinish: false,\r\n                  screen: true,\r\n                  answer: 0\r\n                })\r\n              }\r\n            >\r\n              Play again\r\n            </Button>\r\n          </ScreenQuiz>\r\n        </Container>\r\n      );\r\n    };\r\n    \r\n    render() {\r\n      const { screenFinish, screen } = this.state;\r\n      var questions=[];\r\n      props.details.map((d,i)=>{\r\n        questions[i]=(\r\n          {\r\n            questionText : d.body,\r\n            questionImage : d.quesimg,\r\n            answerOptions: [\r\n              { answerText: d.answer1, isCorrect: d.trueans1 },\r\n              { answerText: d.answer2, isCorrect: d.trueans2 },\r\n              { answerText: d.answer3, isCorrect: d.trueans3 },\r\n              { answerText: d.answer4, isCorrect: d.trueans4 },\r\n              { answerText: d.answer5, isCorrect: d.trueans5}\r\n            ]\r\n          }\r\n        )\r\n            \r\n      });\r\n  \r\n      return !screenFinish ? (\r\n        <>{screen ? this.renderScreenInitial() : this.renderQuestions()}</>\r\n      ) : (\r\n        this.renderResult()\r\n      );\r\n    }\r\n\r\n    // render() {\r\n    //   console.log('qas',this.props.trainer.QuestionTableData);\r\n    //   console.log('qaz',this.state);\r\n    //   return (\r\n    //     <div>\r\n    //       <h1>Тестирование номер 1</h1>\r\n    //       {this.state.isStarted ? null : (\r\n    //         <div id=\"button\">\r\n    //           <Button variant=\"contained\" color=\"secondary\" onClick={()=>this.handleClick}>\r\n    //             Начать тест\r\n    //           </Button>\r\n    //         </div>\r\n    //       )}\r\n        \r\n    //     {this.state.isStarted ? (\r\n    //     // <Test2  details={this.props.trainer.QuestionTableData}/>\r\n    //     ) : null}\r\n    //     </div>\r\n    //   )\r\n    // }\r\n  }\r\n  \r\n  const mapStateToProps = state => ({\r\n      chapter : state.chapter,\r\n      trainer : state.trainer\r\n  });\r\n  \r\n  export default connect(mapStateToProps,{\r\n      ChangeQuestionSearchText,\r\n      ChangeQuestionTableData,\r\n      ChangeQuestionModalState\r\n  })(Test);\r\n\r\n\r\n  // const Test = (props) => {\r\n  //   var questions=[];\r\n  //   props.details.map((d,i)=>{\r\n  //     questions[i]=(\r\n  //       {\r\n  //         questionText : d.body,\r\n  //         questionImage : d.quesimg,\r\n  //                 // optionA : d.answer1,\r\n  //                 // optionB : d.answer2,\r\n  //                 // optionC : d.answer3,\r\n  //                 // optionD : d.answer4,\r\n  //                 // optionE : d.answer5,\r\n  //                 // answer : (d.trueans1===true ? d.answer1 : null) || (d.trueans2===true ? d.answer2 : null) || (d.trueans3===true ? d.answer3 : null) ||\r\n  //                 //          (d.trueans4===true ? d.answer4 : null) || (d.trueans5===true ? d.answer5 : null)\r\n  //                 answerOptions: [\r\n  //                   { answerText: d.answer1, isCorrect: d.trueans1 },\r\n  //                   { answerText: d.answer2, isCorrect: d.trueans2 },\r\n  //                   { answerText: d.answer3, isCorrect: d.trueans3 },\r\n  //                   { answerText: d.answer4, isCorrect: d.trueans4 },\r\n  //                   { answerText: d.answer5, isCorrect: d.trueans5}\r\n  //                 ]\r\n  //             }\r\n  //         )\r\n          \r\n  //     });\r\n      \r\n  //     const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  //     const [showScore, setShowScore] = useState(false);\r\n  //     const [score, setScore] = useState(0);\r\n  //     const [checked, setChecked] = useState(true);\r\n  //     const [numberOfQuestions, setNumberOfQuestions] = useState(0);\r\n  \r\n  //     const handleChange = (answerOption) => {\r\n  //       setChecked(!checked);\r\n  //     };\r\n  \r\n  //     const handleAnswerOptionClick = (isCorrect) => {\r\n  //       if (isCorrect && checked) {\r\n  //         setScore(score + 1);\r\n  \r\n  //       }\r\n  //     };\r\n  \r\n  //     const handleButtonClick = () =>{\r\n  //       const nextQuestion = currentQuestion + 1;\r\n  //       if(nextQuestion < questions.length){\r\n  //         setCurrentQuestion(nextQuestion);\r\n  //       } else {\r\n  //         setShowScore(true);\r\n  //       }\r\n  //     };\r\n  //     // render() {\r\n  //     let responsive = {\r\n  //       desktop: {\r\n  //         breakpoint: { max: 3000, min: 1024 },\r\n  //         items: 1,\r\n  //         slidesToSlide: 1 // optional, default to 1.\r\n  //       },\r\n  //       tablet: {\r\n  //         breakpoint: { max: 1024, min: 464 },\r\n  //         items: 1,\r\n  //         slidesToSlide: 1 // optional, default to 1.\r\n  //       },\r\n  //       mobile: {\r\n  //         breakpoint: { max: 464, min: 0 },\r\n  //         items: 1,\r\n  //         slidesToSlide: 1 // optional, default to 1.\r\n  //       }\r\n  //     };\r\n      \r\n  //       console.log('ptngjf:', questions);\r\n  //         return (\r\n  //           <div className=\"App\">\r\n  \r\n  //             <Carousel\r\n  //             swipeable={false}\r\n  //             draggable={false}\r\n  //             showDots={true}\r\n  //             responsive={responsive}\r\n  //             ssr={true} // means to render carousel on server-side.\r\n  //             infinite={true}\r\n  //             // focusOnSelect={true}\r\n  //             // autoPlay={this.props.deviceType !== \"mobile\" ? true : false}\r\n  //             autoPlaySpeed={1000}\r\n  //             keyBoardControl={true}\r\n  //             customTransition=\"all .5\"\r\n  //             transitionDuration={500}\r\n  //             containerClass=\"carousel-container\"\r\n  //             partialVisible=\"true\"\r\n  //             // removeArrowOnDeviceType={[\"tablet\", \"mobile\"]}\r\n  //             // deviceType={this.props.deviceType}\r\n  //             // dotListClass=\"custom-dot-list-style\"\r\n  //             itemClass=\"carousel-item-padding-left-400-px\"\r\n  //           >\r\n  //           {questions.map((d,i) => (\r\n  //             <div key={i} style={{paddingLeft:'500px', paddingBottom: '50px', fontSize:'22px'}}>   \r\n  //               <h3>{d.questionTextg}</h3>\r\n  //               {d.questionImage!==null ?\r\n  //               <div><img src={d.questionImage} style={{width: '20%'}} alt=\"\"/></div>\r\n  //                 : null\r\n  //               }\r\n  //               {d.answerOptions.map((k,i) =>(\r\n  //                 <div key={i}>\r\n  //                   <input className=\"option\" type=\"checkbox\" id={i} onClick={() =>\r\n  //                         handleAnswerOptionClick(k.isCorrect)\r\n  //                       } onChange={handleChange}/> \r\n  //                   <label>{k.answerText}</label>\r\n  //                 </div>\r\n  //               ))}\r\n                \r\n  //               <div className=\"question__submit\">\r\n  //                 <button id=\"save-button\" onClick={handleButtonClick}>Сохранить</button>\r\n  //               </div>\r\n  \r\n  //               {/* <div><input type=\"checkbox\"/> <label>{d.optionB}</label></div>\r\n  //               <div><input type=\"checkbox\"/> <label>{d.optionC}</label></div>\r\n  //               <div><input type=\"checkbox\"/> <label>{d.optionD}</label></div>\r\n  //               <div><input type=\"checkbox\"/> <label>{d.optionE}</label></div> */}\r\n  //             </div>\r\n  //           ))}\r\n            \r\n  //           </Carousel>\r\n  //           </div>\r\n  //         )\r\n  //   }\r\n\r\n\r\n"],"mappings":"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},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"C:\\\\React_project\\\\EduTest\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\React_project\\\\EduTest\\\\frontend\\\\src\\\\components\\\\admin\\\\Customer\\\\newcustomer.js\";\nimport React, { Component } from 'react';\nimport './newcustomer.css';\nimport { Form, Input, Button, Select, Icon, Upload } from 'antd';\nimport { SecurePost } from '../../../services/axiosCall';\nimport apis from '../../../services/Apis';\nimport { connect } from 'react-redux';\nimport { ChangeCustomerConfirmDirty, ChangeCustomerModalState, ChangeCustomerTableData } from '../../../actions/adminAction';\nimport Alert from '../../../components/common/alert';\nimport auth from '../../../services/AuthServices';\nconst Option = Select.Option;\n\nclass NewCustomer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('пароли не совпадают !');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.props.admin.CustomerconfirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.CustomerImageonChange = f => {\n      var newCusimg = this.state.customerDetails.customerimage;\n\n      if (!f) {\n        newCusimg = null;\n      } else {\n        newCusimg = \"\".concat(apis.BASE, \"/\").concat(f.link);\n      }\n\n      this.setState({\n        submitDisabled: false\n      });\n\n      if (newCusimg === 'undefined' || newCusimg === undefined || newCusimg === null || newCusimg === 'null') {\n        newCusimg = this.state.customerDetails.customerimage;\n      }\n\n      this.setState((ps, pp) => {\n        return {\n          customerDetails: _objectSpread({}, ps.customerDetails, {\n            customerimage: newCusimg\n          })\n        };\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Полученные значения формы: ', values);\n          SecurePost({\n            url: \"\".concat(apis.CREATE_CUSTOMER),\n            data: {\n              _id: this.props.admin.customerId,\n              name: values.name,\n              password: values.password,\n              emailid: values.emailid,\n              avatar: this.state.customerDetails.customerimage,\n              company: values.company,\n              division: values.division\n            }\n          }).then(response => {\n            if (response.data.success) {\n              // this.props.ChangeCustomerModalState(false,null,'Регистрация');\n              Alert('success', 'Успешно', response.data.message); // this.props.ChangeCustomerTableData(this.props.admin.selectedCompany);\n            } else {\n              console.log(response.data); // this.props.ChangeCustomerModalState(false,null,'Регистрация');\n\n              return Alert('warning', 'Предупреждение!', response.data.message);\n            }\n          }).catch(error => {\n            console.log(error);\n            this.setState({\n              customerDetails: {\n                customerimage: null\n              }\n            }); // this.props.ChangeCustomerModalState(false,null,'Регистрация');\n\n            return Alert('error', 'Ошибка!', 'Ошибка сервера');\n          });\n        }\n      });\n    };\n\n    this.changeqImage = f => {\n      this.setState((ps, pp) => {\n        return {\n          customerDetails: _objectSpread({}, ps.customerDetails, {\n            customerimage: f.link ? \"\".concat(apis.BASE, \"/\").concat(f.link) : null\n          }),\n          submitDisabled: false\n        };\n      });\n    };\n\n    this.upl = () => {\n      this.setState({\n        submitDisabled: false\n      });\n    };\n\n    this.state = {\n      customerDetails: {\n        customerimage: this.props.admin.customerdetails.avatar\n      },\n      submitDisabled: false\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    console.log('Company', this.props.admin.companyTableData);\n    console.log('Division', this.props.admin.divisionTableData);\n    const com = this.props.admin.divisionTableData;\n    console.log(com);\n    var CustomerImageprops = {\n      name: 'file',\n      action: \"\".concat(apis.BASE).concat(apis.FILE_UPLOAD, \"?Token=\").concat(auth.retriveToken()),\n      listType: 'picture'\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"register-division-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"register-customer-form-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"\\u0418\\u043C\\u044F\",\n      hasFeedback: true,\n      className: \"input-admin-customer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, getFieldDecorator('name', {\n      initialValue: this.props.admin.customerdetails.name,\n      rules: [{\n        required: true,\n        message: 'Пожалуйста, введите свое имя!',\n        whitespace: true\n      }]\n    })( /*#__PURE__*/React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }))), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"E-mail\",\n      hasFeedback: true,\n      className: \"input-admin-customer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, getFieldDecorator('emailid', {\n      initialValue: this.props.admin.customerdetails.emailid,\n      rules: [{\n        type: 'email',\n        message: 'Введен неверный адрес эл. почты!'\n      }, {\n        required: true,\n        message: 'Пожалуйста, введите свой адрес эл. почты!'\n      }]\n    })( /*#__PURE__*/React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }))), !this.props.admin.customerId ? /*#__PURE__*/React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n      hasFeedback: true,\n      className: \"input-admin-customer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      initialValue: this.props.admin.customerdetails.password,\n      rules: [{\n        required: true,\n        message: 'Пожалуйста, введите свой пароль!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })( /*#__PURE__*/React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }))), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"\\u041F\\u043E\\u0434\\u0442\\u0432\\u0435\\u0440\\u0434\\u0438\\u0442\\u0435 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\",\n      hasFeedback: true,\n      className: \"input-admin-customer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      initialValue: this.props.admin.customerdetails.confirmpassword,\n      rules: [{\n        required: true,\n        message: 'Пожалуйста, введите свой пароль!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })( /*#__PURE__*/React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    })))) : null, /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"\\u0410\\u0432\\u0430\\u0442\\u0430\\u0440\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, /*#__PURE__*/React.createElement(Upload, Object.assign({}, CustomerImageprops, {\n      beforeUpload: this.upl,\n      onRemove: f => this.CustomerImageonChange(null),\n      onSuccess: f => this.CustomerImageonChange(f),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), getFieldDecorator('avatar', {\n      initialValue: this.props.admin.customerdetails.avatar,\n      rules: [{\n        required: false,\n        message: 'Пожалуйста, загрузите ваш аватар!'\n      }]\n    })( /*#__PURE__*/React.createElement(\"img\", {\n      src: this.props.admin.customerdetails.avatar,\n      style: {\n        width: \"60px\",\n        height: \"60px\"\n      },\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    })), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginLeft: '100px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, /*#__PURE__*/React.createElement(Icon, {\n      type: \"upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), \" \\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C\"))), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"\\u041A\\u043E\\u043C\\u043F\\u0430\\u043D\\u0438\\u044F\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, getFieldDecorator('company', {\n      initialValue: this.props.admin.customerdetails.company,\n      rules: [{\n        required: false,\n        message: 'Пожалуйста, введите название компании!',\n        whitespace: true\n      }]\n    })( /*#__PURE__*/React.createElement(Select, {\n      showSearch: true,\n      style: {\n        width: '100%'\n      },\n      placeholder: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043A\\u043E\\u043C\\u043F\\u0430\\u043D\\u0438\\u044E\",\n      optionFilterProp: \"s\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, this.props.admin.companyTableData.map((c, i) => /*#__PURE__*/React.createElement(Option, {\n      key: c._id,\n      s: c.name,\n      value: c._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, c.name))))), /*#__PURE__*/React.createElement(Form.Item, {\n      label: \"\\u041E\\u0442\\u0434\\u0435\\u043B11\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, getFieldDecorator('division', {\n      initialValue: this.props.admin.customerdetails.division,\n      rules: [{\n        required: false,\n        message: 'Пожалуйста, введите название подразделения!',\n        whitespace: true\n      }]\n    })( /*#__PURE__*/React.createElement(Select, {\n      showSearch: true,\n      style: {\n        width: '100%'\n      },\n      placeholder: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043E\\u0442\\u0434\\u0435\\u043B\\u0430\",\n      optionFilterProp: \"s\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, this.props.admin.divisionTableData.map((d, i) => /*#__PURE__*/React.createElement(Option, {\n      key: d._id,\n      s: d.name,\n      value: d._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, d.name))))), /*#__PURE__*/React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      block: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, this.props.admin.Customermode)))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  admin: state.admin\n});\n\nconst NewCustomerForm = Form.create({\n  name: 'register'\n})(NewCustomer);\nexport default connect(mapStateToProps, {\n  ChangeCustomerConfirmDirty,\n  ChangeCustomerModalState,\n  ChangeCustomerTableData\n})(NewCustomerForm);","map":{"version":3,"names":["React","Component","Form","Input","Button","Select","Icon","Upload","SecurePost","apis","connect","ChangeCustomerConfirmDirty","ChangeCustomerModalState","ChangeCustomerTableData","Alert","auth","Option","NewCustomer","constructor","props","compareToFirstPassword","rule","value","callback","form","getFieldValue","validateToNextPassword","admin","CustomerconfirmDirty","validateFields","force","CustomerImageonChange","f","newCusimg","state","customerDetails","customerimage","BASE","link","setState","submitDisabled","undefined","ps","pp","handleSubmit","e","preventDefault","validateFieldsAndScroll","err","values","console","log","url","CREATE_CUSTOMER","data","_id","customerId","name","password","emailid","avatar","company","division","then","response","success","message","catch","error","changeqImage","upl","customerdetails","render","getFieldDecorator","companyTableData","divisionTableData","com","CustomerImageprops","action","FILE_UPLOAD","retriveToken","listType","initialValue","rules","required","whitespace","type","validator","confirmpassword","handleConfirmBlur","width","height","marginLeft","map","c","i","d","Customermode","mapStateToProps","NewCustomerForm","create"],"sources":["C:/React_project/EduTest/frontend/src/components/admin/Customer/newcustomer.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport './newcustomer.css';\r\nimport {\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Select,\r\n    Icon,\r\n    Upload\r\n} from 'antd';\r\nimport {SecurePost} from '../../../services/axiosCall';\r\nimport apis from '../../../services/Apis';\r\nimport { connect } from 'react-redux';\r\nimport { \r\n    ChangeCustomerConfirmDirty,\r\n    ChangeCustomerModalState,\r\n    ChangeCustomerTableData\r\n} from '../../../actions/adminAction';\r\nimport Alert from '../../../components/common/alert';\r\nimport auth from '../../../services/AuthServices';\r\nconst { Option } = Select;\r\nclass NewCustomer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            customerDetails:{\r\n                customerimage: this.props.admin.customerdetails.avatar,\r\n            },\r\n            submitDisabled:false,\r\n        }\r\n    }\r\n\r\n    compareToFirstPassword = (rule, value, callback) => {\r\n        const form = this.props.form;\r\n        if (value && value !== form.getFieldValue('password')) {\r\n            callback('пароли не совпадают !');\r\n        } else {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    validateToNextPassword = (rule, value, callback) => {\r\n        const form = this.props.form;\r\n        if (value && this.props.admin.CustomerconfirmDirty) {\r\n            form.validateFields(['confirm'], { force: true });\r\n        }\r\n        callback();\r\n    };\r\n\r\n    CustomerImageonChange = (f)=>{\r\n        var newCusimg = this.state.customerDetails.customerimage\r\n        if(!f){\r\n            newCusimg=null\r\n        }\r\n        else{\r\n            newCusimg=`${apis.BASE}/${f.link}`\r\n        }\r\n        this.setState({\r\n            submitDisabled:false\r\n        })\r\n        if(newCusimg==='undefined' || newCusimg===undefined || newCusimg===null || newCusimg==='null') {\r\n                newCusimg=this.state.customerDetails.customerimage;    \r\n        }\r\n        this.setState((ps,pp)=>{\r\n            return({\r\n                customerDetails:{\r\n                    ...ps.customerDetails,\r\n                    customerimage:newCusimg\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n            if (!err) {\r\n                console.log('Полученные значения формы: ', values);\r\n                \r\n                    SecurePost({\r\n                        url : `${apis.CREATE_CUSTOMER}`,\r\n                        data : {\r\n                            _id : this.props.admin.customerId,\r\n                            name : values.name, \r\n                            password : values.password,                           \r\n                            emailid : values.emailid,\r\n                            avatar: this.state.customerDetails.customerimage,\r\n                            company : values.company,\r\n                            division : values.division,\r\n                            \r\n                        }\r\n                    }).then((response)=>{\r\n                        if(response.data.success){\r\n                            // this.props.ChangeCustomerModalState(false,null,'Регистрация');\r\n                            Alert('success','Успешно',response.data.message);\r\n                            // this.props.ChangeCustomerTableData(this.props.admin.selectedCompany);\r\n                        }\r\n                        else{\r\n                            console.log(response.data);\r\n                            // this.props.ChangeCustomerModalState(false,null,'Регистрация');\r\n                            return Alert('warning','Предупреждение!',response.data.message);\r\n                        }\r\n                    }).catch((error)=>{\r\n                        console.log(error);\r\n                        this.setState({\r\n                            customerDetails: {\r\n                                customerimage: null,\r\n                            }\r\n                        })\r\n                        // this.props.ChangeCustomerModalState(false,null,'Регистрация');\r\n                        return Alert('error','Ошибка!','Ошибка сервера');\r\n                    })\r\n                \r\n            }\r\n        });\r\n    };\r\n\r\n    changeqImage = (f)=>{\r\n        this.setState((ps,pp)=>{\r\n            return({\r\n                customerDetails:{\r\n                    ...ps.customerDetails,\r\n                    customerimage:(f.link ?`${apis.BASE}/${f.link}`:null)\r\n                },\r\n                submitDisabled:false\r\n            })\r\n        })\r\n    }\r\n\r\n    upl=()=>{\r\n        this.setState({\r\n            submitDisabled: false\r\n        })\r\n    }\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        console.log('Company', this.props.admin.companyTableData);\r\n        console.log('Division', this.props.admin.divisionTableData);\r\n        const com = this.props.admin.divisionTableData;\r\n        console.log(com);\r\n        var CustomerImageprops={\r\n            name: 'file',\r\n            action: `${apis.BASE}${apis.FILE_UPLOAD}?Token=${auth.retriveToken()}`,\r\n            listType: 'picture',\r\n        }\r\n        return (\r\n            <div className=\"register-division-form\">\r\n                <div className=\"register-customer-form-body\">\r\n                    <Form  onSubmit={this.handleSubmit}>\r\n                        <Form.Item label=\"Имя\" hasFeedback className=\"input-admin-customer\">\r\n                            {getFieldDecorator('name', {\r\n                                initialValue : this.props.admin.customerdetails.name,\r\n                                rules: [{ required: true, message: 'Пожалуйста, введите свое имя!', whitespace: true }],\r\n                            })(<Input />)}\r\n                        </Form.Item>\r\n                    \r\n                        <Form.Item label=\"E-mail\" hasFeedback className=\"input-admin-customer\">\r\n                            {getFieldDecorator('emailid', {\r\n                                initialValue : this.props.admin.customerdetails.emailid,\r\n                                rules: [\r\n                                    {\r\n                                        type: 'email',\r\n                                        message: 'Введен неверный адрес эл. почты!',\r\n                                    },\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Пожалуйста, введите свой адрес эл. почты!',\r\n                                    },\r\n                                ],\r\n                            })(<Input />)}\r\n                        </Form.Item> \r\n\r\n                        { !this.props.admin.customerId ? <div><Form.Item label=\"Пароль\" hasFeedback className=\"input-admin-customer\">\r\n                                {getFieldDecorator('password', {\r\n                                    initialValue : this.props.admin.customerdetails.password,\r\n                                    rules: [\r\n                                        {\r\n                                            required: true,\r\n                                            message: 'Пожалуйста, введите свой пароль!',\r\n                                        },\r\n                                        {\r\n                                            validator: this.validateToNextPassword,\r\n                                        },\r\n                                    ],\r\n                                })(<Input.Password />)}\r\n                            </Form.Item>\r\n                        \r\n                            <Form.Item label=\"Подтвердите пароль\" hasFeedback className=\"input-admin-customer\">\r\n                                {getFieldDecorator('confirm', {\r\n                                    initialValue : this.props.admin.customerdetails.confirmpassword,\r\n                                    rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Пожалуйста, введите свой пароль!',\r\n                                    },\r\n                                    {\r\n                                        validator: this.compareToFirstPassword,\r\n                                    },\r\n                                    ],\r\n                                })(<Input.Password onBlur={this.handleConfirmBlur} />)}\r\n                            </Form.Item></div> : null}\r\n                        \r\n\r\n                       <Form.Item label=\"Аватар\">\r\n                       <Upload {...CustomerImageprops} beforeUpload={this.upl} onRemove={(f)=>this.CustomerImageonChange(null)} onSuccess={(f)=>this.CustomerImageonChange(f)}>\r\n                                {getFieldDecorator('avatar', {\r\n                                    initialValue : this.props.admin.customerdetails.avatar,\r\n                                    rules: [{ required: false, message: 'Пожалуйста, загрузите ваш аватар!'}],\r\n                                })(<img src={this.props.admin.customerdetails.avatar} style={{width: \"60px\",height: \"60px\",}} alt=\"\"/>)\r\n                                }\r\n                                \r\n                                <Button style={{marginLeft: '100px'}}>\r\n                                    <Icon type=\"upload\" /> Загрузить\r\n                                </Button>\r\n                                \r\n                            </Upload>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Компания\" hasFeedback>\r\n                            {getFieldDecorator('company', {\r\n                                initialValue : this.props.admin.customerdetails.company,\r\n                                rules: [{ required: false, message: 'Пожалуйста, введите название компании!', whitespace: true }],\r\n                            })(\r\n                            <Select \r\n                                showSearch\r\n                                style = {{width:'100%'}}\r\n                                placeholder=\"Выберите компанию\"\r\n                                optionFilterProp= \"s\"\r\n                            >\r\n                                {\r\n                                    this.props.admin.companyTableData.map((c,i)=><Option key={c._id} s={c.name} value={c._id}>{c.name}</Option>)\r\n                                }\r\n                            </Select>\r\n                            )}\r\n                        </Form.Item>\r\n\r\n                        \r\n                                <Form.Item label=\"Отдел11\" hasFeedback>\r\n                                    {getFieldDecorator('division', {\r\n                                        initialValue : this.props.admin.customerdetails.division,\r\n                                        rules: [{ required: false, message: 'Пожалуйста, введите название подразделения!', whitespace: true }],\r\n                                    })(\r\n                                    <Select \r\n                                        showSearch\r\n                                        style = {{width:'100%'}}\r\n                                        placeholder=\"Выберите отдела\"\r\n                                        optionFilterProp= \"s\"\r\n                                    >\r\n                                        {\r\n                                            this.props.admin.divisionTableData.map((d,i)=><Option key={d._id} s={d.name} value={d._id}>{d.name}</Option>)\r\n                                        }\r\n                                    </Select>\r\n                                    )}\r\n                                </Form.Item>\r\n                        \r\n\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\" block>\r\n                                {this.props.admin.Customermode}\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    admin : state.admin\r\n});\r\n\r\nconst NewCustomerForm = Form.create({ name: 'register' })(NewCustomer);\r\n\r\nexport default connect(mapStateToProps,{\r\n    ChangeCustomerConfirmDirty,\r\n    ChangeCustomerModalState,\r\n    ChangeCustomerTableData\r\n})(NewCustomerForm);\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
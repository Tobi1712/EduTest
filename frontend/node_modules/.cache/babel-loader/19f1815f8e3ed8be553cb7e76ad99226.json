{"ast":null,"code":"import _objectSpread from \"C:\\\\React_project\\\\EduTest\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\React_project\\\\EduTest\\\\frontend\\\\src\\\\components\\\\admin\\\\Questions\\\\newquestion.js\";\nimport React, { Component } from 'react';\nimport './newslide.css';\nimport auth from '../../../services/AuthServices';\nimport { Form, Input, Button, Select, Row, Col, Checkbox, Modal, Upload, Icon } from 'antd';\nimport { SecurePost } from '../../../services/axiosCall';\nimport apis from '../../../services/Apis';\nimport { connect } from 'react-redux';\nimport { ChangeQuestionConfirmDirty, ChangeQuestionTableData, ChangeQuestionModalState } from '../../../actions/trainerAction';\nimport Alert from '../../../components/common/alert'; //const { Option } = Select;\n\nclass NewQuestion extends Component {\n  constructor(props) {\n    super(props);\n\n    this.Customalert = () => {\n      Modal.confirm({\n        title: 'Подтверждать',\n        content: 'пустой параметр не может быть установлен в качестве ответа',\n        okText: 'Ok',\n        cancelText: null\n      });\n    };\n\n    this.SlideImageonChange = f => {\n      var newSlide = this.state.slideDetails.slideimage;\n\n      if (!f) {\n        newSlide = null;\n      } else {\n        newSlide = \"\".concat(apis.BASE, \"/\").concat(f.link);\n      }\n\n      this.setState({\n        submitDisabled: false\n      });\n\n      if (newSlide === 'undefined' || newSlide === undefined || newSlide === null || newSlide === 'null') {\n        //(newOptions[i].body==='undefined' || newOptions[i].body===undefined || newOptions[i].body==='null' || newOptions[i].body==='' || newOptions[i].body===null)){\n        newSlide = this.state.slideDetails.slideimage;\n      }\n\n      this.setState((ps, pp) => {\n        return {\n          slideDetails: _objectSpread({}, ps.slideDetails, {\n            slideimage: newSlide\n          })\n        };\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log(this.state.materialId);\n          console.log('Полученные значения формы: ', values);\n          SecurePost({\n            url: \"\".concat(apis.CREATE_SLIDES),\n            data: {\n              _id: this.props.trainer.questionId,\n              body: values.questionbody,\n              quesimg: this.steate.questionDetails.quesimg,\n              material: this.state.materialId\n            }\n          }).then(response => {\n            if (response.data.success) {\n              this.props.ChangeQuestionModalState(false, null, 'Регистрация');\n              Alert('success', 'Успешно', response.data.message); // this.props.ChangeSlideTableData();\n            } else {\n              console.log(response.data);\n              this.props.ChangeQuestionModalState(false, null, 'Регистрация');\n              return Alert('warning', 'Предупреждение!', response.data.message);\n            }\n          }).catch(error => {\n            this.props.ChangeQuestionModalState(false, null, 'Регистрация');\n            return Alert('error', 'Ошибка!', 'Ошибка сервера');\n          });\n        }\n      });\n    };\n\n    this.changeqImage = f => {\n      this.setState((ps, pp) => {\n        return {\n          slideDetails: _objectSpread({}, ps.slideDetails, {\n            slideimage: f.link ? \"\".concat(apis.BASE, \"/\").concat(f.link) : null\n          }),\n          submitDisabled: false\n        };\n      });\n    };\n\n    this.upl = () => {\n      this.setState({\n        submitDisabled: false\n      });\n    };\n\n    this.state = {\n      questionDetails: {\n        questionimage: null\n      },\n      adding: false,\n      submitDisabled: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      materialId: this.props.qnid\n    });\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const TextArea = Input.TextArea;\n    var QuestionImageprops = {\n      name: 'file',\n      action: \"\".concat(apis.BASE).concat(apis.FILE_UPLOAD, \"?Token=\").concat(auth.retriveToken()),\n      listType: 'picture'\n    };\n    return React.createElement(\"div\", {\n      className: \"register-slide-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"register-slide-form-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"\\u0422\\u0435\\u043A\\u0441\\u0442\",\n      hasFeedback: true,\n      className: \"input-admin-slide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, getFieldDecorator('slbody', {\n      initialValue: this.props.chapter.slidedetails.slbody,\n      rules: [{\n        required: true,\n        message: 'Пожалуйста, введите название подразделения!',\n        whitespace: true\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"\\u0421\\u043B\\u0430\\u0439\\u0434\",\n      className: \"input-admin-slide\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(Upload, Object.assign({}, SlideImageprops, {\n      beforeUpload: this.upl,\n      onRemove: f => this.SlideImageonChange(null),\n      onSuccess: f => this.SlideImageonChange(f),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), getFieldDecorator('slimage', {\n      initialValue: this.props.chapter.slidedetails.slimage,\n      rules: [{\n        required: false,\n        message: 'Пожалуйста, загрузите слайд!'\n      }]\n    })(React.createElement(\"img\", {\n      src: this.props.chapter.slidedetails.slimage,\n      style: {\n        width: \"60px\",\n        height: \"80px\"\n      },\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    })), React.createElement(Button, {\n      style: {\n        marginLeft: '100px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), \" \\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C\"))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      block: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, this.props.chapter.Slidemode)))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  admin: state.admin,\n  chapter: state.chapter\n});\n\nconst NewSlideForm = Form.create({\n  name: 'register'\n})(NewSlide);\nexport default connect(mapStateToProps, {\n  ChangeSlideConfirmDirty,\n  ChangeSlideModalState,\n  ChangeSlideTableData\n})(NewSlideForm);","map":{"version":3,"sources":["C:\\React_project\\EduTest\\frontend\\src\\components\\admin\\Questions\\newquestion.js"],"names":["React","Component","auth","Form","Input","Button","Select","Row","Col","Checkbox","Modal","Upload","Icon","SecurePost","apis","connect","ChangeQuestionConfirmDirty","ChangeQuestionTableData","ChangeQuestionModalState","Alert","NewQuestion","constructor","props","Customalert","confirm","title","content","okText","cancelText","SlideImageonChange","f","newSlide","state","slideDetails","slideimage","BASE","link","setState","submitDisabled","undefined","ps","pp","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","console","log","materialId","url","CREATE_SLIDES","data","_id","trainer","questionId","body","questionbody","quesimg","steate","questionDetails","material","then","response","success","message","catch","error","changeqImage","upl","questionimage","adding","componentDidMount","qnid","render","getFieldDecorator","TextArea","QuestionImageprops","name","action","FILE_UPLOAD","retriveToken","listType","initialValue","chapter","slidedetails","slbody","rules","required","whitespace","SlideImageprops","slimage","width","height","marginLeft","Slidemode","mapStateToProps","admin","NewSlideForm","create","NewSlide","ChangeSlideConfirmDirty","ChangeSlideModalState","ChangeSlideTableData"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport './newslide.css';\r\nimport auth from '../../../services/AuthServices';\r\nimport {\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Select,\r\n    Row,\r\n    Col,\r\n    Checkbox,\r\n    Modal,\r\n    Upload,\r\n    Icon\r\n} from 'antd';\r\nimport {SecurePost} from '../../../services/axiosCall';\r\nimport apis from '../../../services/Apis';\r\nimport { connect } from 'react-redux';\r\nimport { \r\n    ChangeQuestionConfirmDirty,\r\n    ChangeQuestionTableData,\r\n    ChangeQuestionModalState\r\n} from '../../../actions/trainerAction';\r\nimport Alert from '../../../components/common/alert';\r\n//const { Option } = Select;\r\nclass NewQuestion extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            questionDetails:{\r\n                questionimage:null,\r\n            },\r\n            adding:false,\r\n            submitDisabled:false,\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({\r\n            materialId:this.props.qnid\r\n        });\r\n    }\r\n\r\n    Customalert = ()=>{\r\n        Modal.confirm({\r\n            title: 'Подтверждать',\r\n            content: 'пустой параметр не может быть установлен в качестве ответа',\r\n            okText: 'Ok',\r\n            cancelText: null,\r\n        });\r\n    }\r\n\r\n    SlideImageonChange = (f)=>{\r\n        var newSlide = this.state.slideDetails.slideimage\r\n        if(!f){\r\n            newSlide=null\r\n        }\r\n        else{\r\n            newSlide=`${apis.BASE}/${f.link}`\r\n            \r\n        }\r\n        this.setState({\r\n            submitDisabled:false\r\n        })\r\n        if(newSlide==='undefined' || newSlide===undefined || newSlide===null || newSlide==='null') {\r\n            //(newOptions[i].body==='undefined' || newOptions[i].body===undefined || newOptions[i].body==='null' || newOptions[i].body==='' || newOptions[i].body===null)){\r\n                newSlide=this.state.slideDetails.slideimage;    \r\n        }\r\n        this.setState((ps,pp)=>{\r\n            return({\r\n                slideDetails:{\r\n                    ...ps.slideDetails,\r\n                    slideimage:newSlide\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n            if (!err) {\r\n                console.log(this.state.materialId);\r\n                console.log('Полученные значения формы: ', values);\r\n                \r\n                    SecurePost({\r\n                        url : `${apis.CREATE_SLIDES}`,\r\n                        data : {\r\n                            _id : this.props.trainer.questionId,\r\n                            body : values.questionbody,                            \r\n                            quesimg : this.steate.questionDetails.quesimg,\r\n                            material : this.state.materialId\r\n                        }\r\n                    }).then((response)=>{\r\n                        if(response.data.success){\r\n                            this.props.ChangeQuestionModalState(false,null,'Регистрация');\r\n                            Alert('success','Успешно',response.data.message);\r\n                            // this.props.ChangeSlideTableData();\r\n                        }\r\n                        else{\r\n                            console.log(response.data);\r\n                            this.props.ChangeQuestionModalState(false,null,'Регистрация');\r\n                            return Alert('warning','Предупреждение!',response.data.message);\r\n                        }\r\n                    }).catch((error)=>{\r\n                        this.props.ChangeQuestionModalState(false,null,'Регистрация');\r\n                        return Alert('error','Ошибка!','Ошибка сервера');\r\n                    })\r\n                \r\n            }\r\n        });\r\n    };\r\n\r\n    changeqImage = (f)=>{\r\n        this.setState((ps,pp)=>{\r\n            return({\r\n                slideDetails:{\r\n                    ...ps.slideDetails,\r\n                    slideimage:(f.link ?`${apis.BASE}/${f.link}`:null)\r\n                },\r\n                submitDisabled:false\r\n            })\r\n        })\r\n    }\r\n\r\n    upl=()=>{\r\n        this.setState({\r\n            submitDisabled: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        const { TextArea } = Input;\r\n        var QuestionImageprops={\r\n            name: 'file',\r\n            action: `${apis.BASE}${apis.FILE_UPLOAD}?Token=${auth.retriveToken()}`,\r\n            listType: 'picture',\r\n        }\r\n        return (\r\n            <div className=\"register-slide-form\">\r\n                <div className=\"register-slide-form-body\">\r\n                    <Form  onSubmit={this.handleSubmit}>\r\n                        <Form.Item label=\"Текст\" hasFeedback className=\"input-admin-slide\">\r\n                            {getFieldDecorator('slbody', {\r\n                                initialValue : this.props.chapter.slidedetails.slbody,\r\n                                rules: [{ required: true, message: 'Пожалуйста, введите название подразделения!', whitespace: true }],\r\n                            })(<Input />)}\r\n                        </Form.Item>\r\n                    \r\n                        <Form.Item label=\"Слайд\" className=\"input-admin-slide\">\r\n                            <Upload {...SlideImageprops} beforeUpload={this.upl} onRemove={(f)=>this.SlideImageonChange(null)} onSuccess={(f)=>this.SlideImageonChange(f)}>\r\n                                {getFieldDecorator('slimage', {\r\n                                    initialValue : this.props.chapter.slidedetails.slimage,\r\n                                    rules: [{ required: false, message: 'Пожалуйста, загрузите слайд!'}],\r\n                                })(<img src={this.props.chapter.slidedetails.slimage} style={{width: \"60px\",height: \"80px\",}} alt=\"\"/>)\r\n                                }\r\n                                \r\n                                <Button style={{marginLeft: '100px'}}>\r\n                                    <Icon type=\"upload\" /> Загрузить\r\n                                </Button>\r\n                                \r\n                            </Upload>\r\n                        </Form.Item>\r\n\r\n                        \r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\" block>\r\n                                {this.props.chapter.Slidemode}\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    admin : state.admin,\r\n    chapter : state.chapter\r\n});\r\n\r\n\r\n\r\nconst NewSlideForm = Form.create({ name: 'register' })(NewSlide);\r\n\r\nexport default connect(mapStateToProps,{\r\n    ChangeSlideConfirmDirty,\r\n    ChangeSlideModalState,\r\n    ChangeSlideTableData\r\n})(NewSlideForm);\r\n\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"C:\\\\React_project\\\\EduTest\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\React_project\\\\EduTest\\\\frontend\\\\src\\\\components\\\\admin\\\\Customer\\\\newcustomer.js\";\nimport React, { Component } from 'react';\nimport './newcustomer.css';\nimport { Form, Input, Button, Select, Icon, Upload } from 'antd';\nimport { SecurePost } from '../../../services/axiosCall';\nimport apis from '../../../services/Apis';\nimport { connect } from 'react-redux';\nimport { ChangeCustomerConfirmDirty, ChangeCustomerModalState, ChangeCustomerTableData } from '../../../actions/adminAction';\nimport Alert from '../../../components/common/alert';\nimport auth from '../../../services/AuthServices';\nconst Option = Select.Option;\n\nclass NewCustomer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.CustomerImageonChange = f => {\n      var newCusimg = this.state.customerDetails.customerimage;\n\n      if (!f) {\n        newCusimg = null;\n      } else {\n        newCusimg = \"\".concat(apis.BASE, \"/\").concat(f.link);\n      }\n\n      this.setState({\n        submitDisabled: false\n      });\n\n      if (newCusimg === 'undefined' || newCusimg === undefined || newCusimg === null || newCusimg === 'null') {\n        //(newOptions[i].body==='undefined' || newOptions[i].body===undefined || newOptions[i].body==='null' || newOptions[i].body==='' || newOptions[i].body===null)){\n        newCusimg = this.state.customerDetails.customerimage;\n      }\n\n      this.setState((ps, pp) => {\n        return {\n          customerDetails: _objectSpread({}, ps.customerDetails, {\n            customerimage: newCusimg\n          })\n        };\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('Полученные значения формы: ', values);\n          SecurePost({\n            url: \"\".concat(apis.CREATE_CUSTOMER),\n            data: {\n              _id: this.props.admin.customerId,\n              name: values.name,\n              emailid: values.emailid,\n              avatar: this.state.customerDetails.customerimage,\n              division: values.division\n            }\n          }).then(response => {\n            if (response.data.success) {\n              this.props.ChangeCustomerModalState(false, null, 'Регистрация');\n              Alert('success', 'Успешно', response.data.message);\n              this.props.ChangeCustomerTableData(this.props.admin.selectedDivisions);\n            } else {\n              console.log(response.data);\n              this.props.ChangeCustomerModalState(false, null, 'Регистрация');\n              return Alert('warning', 'Предупреждение!', response.data.message);\n            }\n          }).catch(error => {\n            console.log(error);\n            this.setState({\n              customerDetails: {\n                customerimage: null\n              }\n            });\n            this.props.ChangeCustomerModalState(false, null, 'Регистрация');\n            return Alert('error', 'Ошибка!', 'Ошибка сервера');\n          });\n        }\n      });\n    };\n\n    this.changeqImage = f => {\n      this.setState((ps, pp) => {\n        return {\n          customerDetails: _objectSpread({}, ps.customerDetails, {\n            customerimage: f.link ? \"\".concat(apis.BASE, \"/\").concat(f.link) : null\n          }),\n          submitDisabled: false\n        };\n      });\n    };\n\n    this.upl = () => {\n      this.setState({\n        submitDisabled: false\n      });\n    };\n\n    this.state = {\n      customerDetails: {\n        customerimage: this.props.admin.customerdetails.avatar\n      },\n      submitDisabled: false\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    var CustomerImageprops = {\n      name: 'file',\n      action: \"\".concat(apis.BASE).concat(apis.FILE_UPLOAD, \"?Token=\").concat(auth.retriveToken()),\n      listType: 'picture'\n    };\n    return React.createElement(\"div\", {\n      className: \"register-division-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"register-customer-form-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"\\u0418\\u043C\\u044F\",\n      hasFeedback: true,\n      className: \"input-admin-customer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, getFieldDecorator('name', {\n      initialValue: this.props.admin.customerdetails.name,\n      rules: [{\n        required: true,\n        message: 'Пожалуйста, введите свое имя!',\n        whitespace: true\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"E-mail\",\n      hasFeedback: true,\n      className: \"input-admin-customer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, getFieldDecorator('emailid', {\n      initialValue: this.props.admin.customerdetails.emailid,\n      rules: [{\n        type: 'email',\n        message: 'Введен неверный адрес эл. почты!'\n      }, {\n        required: true,\n        message: 'Пожалуйста, введите свой адрес эл. почты!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"\\u0410\\u0432\\u0430\\u0442\\u0430\\u0440\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(Upload, Object.assign({}, CustomerImageprops, {\n      beforeUpload: this.upl,\n      onRemove: f => this.CustomerImageonChange(null),\n      onSuccess: f => this.CustomerImageonChange(f),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), getFieldDecorator('avatar', {\n      initialValue: this.props.admin.customerdetails.avatar,\n      rules: [{\n        required: false,\n        message: 'Пожалуйста, загрузите ваш аватар!'\n      }]\n    })(React.createElement(\"img\", {\n      src: this.props.admin.customerdetails.avatar,\n      style: {\n        width: \"60px\",\n        height: \"80px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    })), React.createElement(Button, {\n      style: {\n        marginLeft: '100px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), \" \\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C\"))), React.createElement(Form.Item, {\n      label: \"\\u041E\\u0442\\u0434\\u0435\\u043B\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, getFieldDecorator('division', {\n      initialValue: this.props.admin.customerdetails.division,\n      rules: [{\n        required: false,\n        message: 'Пожалуйста, введите название подразделения!',\n        whitespace: true\n      }]\n    })(React.createElement(Select, {\n      showSearch: true,\n      style: {\n        width: '100%'\n      },\n      placeholder: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043E\\u0442\\u0434\\u0435\\u043B\\u0430\",\n      optionFilterProp: \"s\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, this.props.admin.divisionTableData.map((d, i) => React.createElement(Option, {\n      key: d._id,\n      s: d.name,\n      value: d._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, d.name))))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      block: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, this.props.admin.Customermode)))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  admin: state.admin\n});\n\nconst NewCustomerForm = Form.create({\n  name: 'register'\n})(NewCustomer);\nexport default connect(mapStateToProps, {\n  ChangeCustomerConfirmDirty,\n  ChangeCustomerModalState,\n  ChangeCustomerTableData\n})(NewCustomerForm);","map":{"version":3,"sources":["C:\\React_project\\EduTest\\frontend\\src\\components\\admin\\Customer\\newcustomer.js"],"names":["React","Component","Form","Input","Button","Select","Icon","Upload","SecurePost","apis","connect","ChangeCustomerConfirmDirty","ChangeCustomerModalState","ChangeCustomerTableData","Alert","auth","Option","NewCustomer","constructor","props","CustomerImageonChange","f","newCusimg","state","customerDetails","customerimage","BASE","link","setState","submitDisabled","undefined","ps","pp","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","console","log","url","CREATE_CUSTOMER","data","_id","admin","customerId","name","emailid","avatar","division","then","response","success","message","selectedDivisions","catch","error","changeqImage","upl","customerdetails","render","getFieldDecorator","CustomerImageprops","action","FILE_UPLOAD","retriveToken","listType","initialValue","rules","required","whitespace","type","width","height","marginLeft","divisionTableData","map","d","i","Customermode","mapStateToProps","NewCustomerForm","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport './newcustomer.css';\r\nimport {\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Select,\r\n    Icon,\r\n    Upload\r\n} from 'antd';\r\nimport {SecurePost} from '../../../services/axiosCall';\r\nimport apis from '../../../services/Apis';\r\nimport { connect } from 'react-redux';\r\nimport { \r\n    ChangeCustomerConfirmDirty,\r\n    ChangeCustomerModalState,\r\n    ChangeCustomerTableData\r\n} from '../../../actions/adminAction';\r\nimport Alert from '../../../components/common/alert';\r\nimport auth from '../../../services/AuthServices';\r\nconst { Option } = Select;\r\nclass NewCustomer extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            customerDetails:{\r\n                customerimage: this.props.admin.customerdetails.avatar,\r\n            },\r\n            submitDisabled:false,\r\n        }\r\n    }\r\n\r\n    CustomerImageonChange = (f)=>{\r\n        var newCusimg = this.state.customerDetails.customerimage\r\n        if(!f){\r\n            newCusimg=null\r\n        }\r\n        else{\r\n            newCusimg=`${apis.BASE}/${f.link}`\r\n            \r\n        }\r\n        this.setState({\r\n            submitDisabled:false\r\n        })\r\n        if(newCusimg==='undefined' || newCusimg===undefined || newCusimg===null || newCusimg==='null') {\r\n            //(newOptions[i].body==='undefined' || newOptions[i].body===undefined || newOptions[i].body==='null' || newOptions[i].body==='' || newOptions[i].body===null)){\r\n                newCusimg=this.state.customerDetails.customerimage;    \r\n        }\r\n        this.setState((ps,pp)=>{\r\n            return({\r\n                customerDetails:{\r\n                    ...ps.customerDetails,\r\n                    customerimage:newCusimg\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n            if (!err) {\r\n                console.log('Полученные значения формы: ', values);\r\n                \r\n                    SecurePost({\r\n                        url : `${apis.CREATE_CUSTOMER}`,\r\n                        data : {\r\n                            _id : this.props.admin.customerId,\r\n                            name :values.name,                            \r\n                            emailid : values.emailid,\r\n                            avatar: this.state.customerDetails.customerimage,\r\n                            division : values.division\r\n                        }\r\n                    }).then((response)=>{\r\n                        if(response.data.success){\r\n                            this.props.ChangeCustomerModalState(false,null,'Регистрация');\r\n                            Alert('success','Успешно',response.data.message);\r\n                            this.props.ChangeCustomerTableData(this.props.admin.selectedDivisions);\r\n                        }\r\n                        else{\r\n                            console.log(response.data);\r\n                            this.props.ChangeCustomerModalState(false,null,'Регистрация');\r\n                            return Alert('warning','Предупреждение!',response.data.message);\r\n                        }\r\n                    }).catch((error)=>{\r\n                        console.log(error);\r\n                        this.setState({\r\n                            customerDetails: {\r\n                                customerimage: null,\r\n                            }\r\n                        })\r\n                        this.props.ChangeCustomerModalState(false,null,'Регистрация');\r\n                        return Alert('error','Ошибка!','Ошибка сервера');\r\n                    })\r\n                \r\n            }\r\n        });\r\n    };\r\n\r\n    changeqImage = (f)=>{\r\n        this.setState((ps,pp)=>{\r\n            return({\r\n                customerDetails:{\r\n                    ...ps.customerDetails,\r\n                    customerimage:(f.link ?`${apis.BASE}/${f.link}`:null)\r\n                },\r\n                submitDisabled:false\r\n            })\r\n        })\r\n    }\r\n\r\n    upl=()=>{\r\n        this.setState({\r\n            submitDisabled: false\r\n        })\r\n    }\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        \r\n          var CustomerImageprops={\r\n            name: 'file',\r\n            action: `${apis.BASE}${apis.FILE_UPLOAD}?Token=${auth.retriveToken()}`,\r\n            listType: 'picture',\r\n        }\r\n        return (\r\n            <div className=\"register-division-form\">\r\n                <div className=\"register-customer-form-body\">\r\n                    <Form  onSubmit={this.handleSubmit}>\r\n                        <Form.Item label=\"Имя\" hasFeedback className=\"input-admin-customer\">\r\n                            {getFieldDecorator('name', {\r\n                                initialValue : this.props.admin.customerdetails.name,\r\n                                rules: [{ required: true, message: 'Пожалуйста, введите свое имя!', whitespace: true }],\r\n                            })(<Input />)}\r\n                        </Form.Item>\r\n                    \r\n                        <Form.Item label=\"E-mail\" hasFeedback className=\"input-admin-customer\">\r\n                            {getFieldDecorator('emailid', {\r\n                                initialValue : this.props.admin.customerdetails.emailid,\r\n                                rules: [\r\n                                    {\r\n                                        type: 'email',\r\n                                        message: 'Введен неверный адрес эл. почты!',\r\n                                    },\r\n                                    {\r\n                                        required: true,\r\n                                        message: 'Пожалуйста, введите свой адрес эл. почты!',\r\n                                    },\r\n                                ],\r\n                            })(<Input />)}\r\n                        </Form.Item> \r\n                        \r\n\r\n                       <Form.Item label=\"Аватар\">\r\n                       <Upload {...CustomerImageprops} beforeUpload={this.upl} onRemove={(f)=>this.CustomerImageonChange(null)} onSuccess={(f)=>this.CustomerImageonChange(f)}>\r\n                                {getFieldDecorator('avatar', {\r\n                                    initialValue : this.props.admin.customerdetails.avatar,\r\n                                    rules: [{ required: false, message: 'Пожалуйста, загрузите ваш аватар!'}],\r\n                                })(<img src={this.props.admin.customerdetails.avatar} style={{width: \"60px\",height: \"80px\",}}/>)\r\n                                }\r\n                                \r\n                                <Button style={{marginLeft: '100px'}}>\r\n                                    <Icon type=\"upload\" /> Загрузить\r\n                                </Button>\r\n                                \r\n                            </Upload>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item label=\"Отдел\" hasFeedback>\r\n                            {getFieldDecorator('division', {\r\n                                initialValue : this.props.admin.customerdetails.division,\r\n                                rules: [{ required: false, message: 'Пожалуйста, введите название подразделения!', whitespace: true }],\r\n                            })(\r\n                            <Select \r\n                                showSearch\r\n                                style = {{width:'100%'}}\r\n                                placeholder=\"Выберите отдела\"\r\n                                optionFilterProp= \"s\"\r\n                            >\r\n                                {\r\n                                    this.props.admin.divisionTableData.map((d,i)=><Option key={d._id} s={d.name} value={d._id}>{d.name}</Option>)\r\n                                }\r\n\r\n                            </Select>\r\n                            )}\r\n                        </Form.Item>\r\n                    \r\n\r\n                        \r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\" block>\r\n                                {this.props.admin.Customermode}\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    admin : state.admin\r\n});\r\n\r\n\r\n\r\nconst NewCustomerForm = Form.create({ name: 'register' })(NewCustomer);\r\n\r\nexport default connect(mapStateToProps,{\r\n    ChangeCustomerConfirmDirty,\r\n    ChangeCustomerModalState,\r\n    ChangeCustomerTableData\r\n})(NewCustomerForm);\r\n\r\n"]},"metadata":{},"sourceType":"module"}
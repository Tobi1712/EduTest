{"ast":null,"code":"import _objectSpread from \"C:\\\\React_project\\\\EduTest\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\React_project\\\\EduTest\\\\frontend\\\\src\\\\components\\\\trainer\\\\newquestion\\\\newquestion.js\";\nimport React, { Component } from 'react';\nimport './newquestion.css';\nimport { Form, Input, Button, Select, Row, Col, Checkbox, Modal, Upload, Icon, InputNumber } from 'antd';\nimport { connect } from 'react-redux';\nimport { ChangeQuestionConfirmDirty, ChangeQuestionTableData, ChangeQuestionModalState } from '../../../actions/trainerAction';\nimport { SecurePost, SecureGet } from '../../../services/axiosCall';\nimport apis from '../../../services/Apis';\nimport Alert from '../../../components/common/alert';\nimport auth from '../../../services/AuthServices';\n\nclass NewQuestion extends Component {\n  constructor(props) {\n    super(props);\n\n    this.Customalert = () => {\n      Modal.confirm({\n        title: 'Подтверждать',\n        content: 'пустой параметр не может быть установлен в качестве ответа',\n        okText: 'Ok',\n        cancelText: null\n      });\n    };\n\n    this.OptionTextChange = (e, i) => {\n      var newOptions = [...this.state.questioneditdetails.options];\n      newOptions[i] = _objectSpread({}, this.state.questioneditDetails.options[i], {\n        body: e.target.value\n      });\n\n      if ((newOptions[i].image === 'undefined' || newOptions[i].image === undefined || newOptions[i].image === null || newOptions[i].image === 'null') && (newOptions[i].body === 'undefined' || newOptions[i].body === undefined || newOptions[i].body === 'null' || newOptions[i].body === '' || newOptions[i].body === null)) {\n        newOptions[i] = _objectSpread({}, this.state.questioneditDetails.options[i], {\n          isAnswer: false\n        });\n        this.setState((ps, pp) => {\n          return {\n            questioneditdetails: _objectSpread({}, ps.questioneditdetails, {\n              options: newOptions\n            })\n          };\n        });\n      }\n\n      this.setState((ps, pp) => {\n        return {\n          questioneditdetails: _objectSpread({}, ps.questioneditdetails, {\n            options: newOptions\n          })\n        };\n      });\n    };\n\n    this.AnswerOptionSwitch = (e, i) => {\n      if (this.state.questioneditdetails.options[i].body !== '' && this.state.questioneditdetails.options[i].body !== null || this.state.questioneditdetails.options[i].image !== null && this.state.questioneditdetails.options[i].image !== 'undefined' && this.state.questionDetails.options[i].image !== undefined) {\n        var newOptions = [...this.state.questioneditdetails.options];\n        newOptions[i] = _objectSpread({}, this.state.questioneditdetails.options[i], {\n          isAnswer: e.target.checked\n        });\n        this.setState((ps, pp) => {\n          return {\n            questioneditdetails: _objectSpread({}, ps.questioneditdetails, {\n              options: newOptions\n            })\n          };\n        });\n      } else {\n        this.Customalert();\n        return;\n      }\n    };\n\n    this.OptionImageonChange = (f, i) => {\n      var newOptions = [...this.state.questioneditdetails.options];\n\n      if (!f) {\n        delete newOptions[i].image;\n        newOptions[i].image = null;\n      } else {\n        newOptions[i] = _objectSpread({}, this.state.questioneditdetails.options[i], {\n          image: \"\".concat(apis.BASE, \"/\").concat(f.link)\n        });\n      }\n\n      this.setState({\n        submitDisabled: false\n      });\n\n      if ((newOptions[i].image === 'undefined' || newOptions[i].image === undefined || newOptions[i].image === null || newOptions[i].image === 'null') && (newOptions[i].body === 'undefined' || newOptions[i].body === undefined || newOptions[i].body === 'null' || newOptions[i].body === '' || newOptions[i].body === null)) {\n        newOptions[i] = _objectSpread({}, this.state.questioneditdetails.options[i], {\n          isAnswer: false\n        });\n      }\n\n      this.setState((ps, pp) => {\n        return {\n          questioneditdetails: _objectSpread({}, ps.questioneditdetails, {\n            options: newOptions\n          })\n        };\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        console.log(values);\n\n        if (!err) {\n          var f = 1;\n          var ans = 0;\n          var opts = [];\n          console.log('Полученные значения формы: ', values);\n          this.state.questioneditdetails.options.forEach((element, i) => {\n            opts.push({\n              optbody: element.optbody,\n              optimg: element.optimg,\n              isAnswer: element.isAnswer\n            });\n\n            if ((element.optimg === 'undefined' || element.optimg === undefined || element.optimg === null || element.optimg === 'null') && (element.optbody === '' || element.optbody === null || element.optbody === 'null' || element.optbody === 'undefined' || element.optbody === undefined)) {\n              f = 0;\n            }\n\n            if (element.isAnswer) {\n              ans = ans + 1;\n            }\n          });\n\n          if (f) {\n            if (!ans) {\n              Alert('warning', 'Предупреждение!', 'Должен быть хотя бы один правильный ответ');\n            } else {\n              this.setState({\n                adding: true\n              });\n              SecurePost({\n                url: apis.CREATE_QUESTIONS,\n                data: {\n                  body: values.questionbody,\n                  options: opts,\n                  quesimg: this.state.questionDetails.questionimage,\n                  //chapter: values.chapter,\n                  material: this.state.materialId\n                }\n              }).then(response => {\n                console.log(response);\n                this.setState({\n                  adding: false\n                });\n\n                if (response.data.success) {\n                  this.props.ChangeQuestionModalState(false, null, 'Создать вопрос');\n                  Alert('success', 'Успешно', response.data.message);\n                } else {\n                  this.props.ChangeQuestionModalState(false, null, 'Создать вопрос');\n                  this.props.form.resetFields();\n                  return Alert('warning', 'Предупреждение!', response.data.message);\n                }\n              }).catch(error => {\n                console.log(error);\n                this.props.form.resetFields();\n                this.setState({\n                  adding: false,\n                  questionDetails: {\n                    questionimage: null // options :[\n                    //     {\n                    //         image :null,\n                    //         body : null,\n                    //         isAnswer :false\n                    //     },\n                    //     {\n                    //         image :null,\n                    //         body : null,\n                    //         isAnswer :false\n                    //     },\n                    //     {\n                    //         image :null,\n                    //         body : null,\n                    //         isAnswer :false\n                    //     },\n                    //     {\n                    //         image :null,\n                    //         body : null,\n                    //         isAnswer :false\n                    //     },\n                    //     {\n                    //         image :null,\n                    //         body : null,\n                    //         isAnswer :false\n                    //     }\n                    // ] ,  \n\n                  }\n                });\n                this.props.ChangeQuestionModalState(false, null, 'Создать вопрос');\n                return Alert('error', 'Ошибка!', 'Ошибка сервера');\n              });\n            }\n          } else {\n            Alert('warning', 'Предупреждение!', 'Пожалуйста, заполните все варианты');\n          }\n        }\n      });\n    };\n\n    this.changeqImage = f => {\n      this.setState((ps, pp) => {\n        return {\n          questionDetails: _objectSpread({}, ps.questionDetails, {\n            questionimage: f.link ? \"\".concat(apis.BASE, \"/\").concat(f.link) : null\n          }),\n          submitDisabled: false\n        };\n      });\n    };\n\n    this.upl = () => {\n      this.setState({\n        submitDisabled: true\n      });\n    };\n\n    this.state = {\n      questionDetails: {\n        questionimage: null // options :[\n        //     {\n        //         image :null,\n        //         body : null,\n        //         isAnswer :false\n        //     },\n        //     {\n        //         image :null,\n        //         body : null,\n        //         isAnswer :false\n        //     },\n        //     {\n        //         image :null,\n        //         body : null,\n        //         isAnswer :false\n        //     },\n        //     {\n        //         image :null,\n        //         body : null,\n        //         isAnswer :false\n        //     },\n        //     {\n        //         image :null,\n        //         body : null,\n        //         isAnswer :false\n        //     }\n        // ] ,  \n\n      },\n      adding: false,\n      submitDisabled: false\n    };\n  }\n\n  componentDidMount() {\n    // console.log(\"Hello:\",this.props.trainer.questioneditdetails);\n    this.setState({\n      materialId: this.props.qnid\n    });\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const Option = Select.Option;\n    const TextArea = Input.TextArea;\n    const optn = ['A', 'B', 'C', 'D', 'E'];\n    const Optiondata = this.props.trainer.questioneditdetails.options;\n    console.log(\"OptionData:\", Optiondata);\n    console.log(\"Opt2\", this.state.questionDetails);\n    var QuestionImageprops = {\n      name: 'file',\n      action: \"\".concat(apis.BASE).concat(apis.FILE_UPLOAD, \"?Token=\").concat(auth.retriveToken()),\n      listType: 'picture'\n    };\n    return React.createElement(\"div\", {\n      className: \"register-subject-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"register-trainer-form-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(Col, {\n      span: 18,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"\\u0412\\u043E\\u043F\\u0440\\u043E\\u0441\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, getFieldDecorator('questionbody', {\n      initialValue: this.props.trainer.questioneditdetails.body,\n      rules: [{\n        required: true,\n        message: 'Пожалуйста, введите вопрос!'\n      }]\n    })(React.createElement(TextArea, {\n      rows: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    })))), React.createElement(Col, {\n      span: 6,\n      style: {\n        padding: '0px 20px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"\\u0418\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u0435 \\u0432\\u043E\\u043F\\u0440\\u043E\\u0441\\u0430\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, React.createElement(Upload, Object.assign({}, QuestionImageprops, {\n      beforeUpload: this.upl,\n      onRemove: this.changeqImage,\n      onSuccess: this.changeqImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"upload\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }), \" \\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C\"))))), React.createElement(\"div\", {\n      style: {\n        paddingTop: '20px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, Optiondata.options.map((option, i) => {\n      return React.createElement(Row, {\n        key: i,\n        className: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, React.createElement(Col, {\n        offset: 1,\n        span: 13,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      }, React.createElement(Form.Item, {\n        label: \"\\u0432\\u0430\\u0440\\u0438\\u0430\\u043D\\u0442 \".concat(i + 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344\n        },\n        __self: this\n      }, getFieldDecorator('option.optbody', {\n        initialValue: option.optbody,\n        rules: [{\n          required: false,\n          message: 'Пожалуйста, введите вопрос!'\n        }]\n      })(React.createElement(TextArea, {\n        value: this.state.trainer.questioneditdetails.options[i].optbody,\n        onChange: e => this.OptionTextChange(e, i),\n        rows: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      })))), React.createElement(Col, {\n        offset: 2,\n        span: 6,\n        style: {\n          textAlign: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }, React.createElement(Form.Item, {\n        label: \"\\u041A\\u0430\\u0440\\u0442\\u0438\\u043D\\u043A\\u0430 \\u0432\\u0430\\u0440\\u0438\\u0430\\u043D\\u0442\\u0430 \".concat(i + 1),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }, React.createElement(Upload, Object.assign({}, QuestionImageprops, {\n        beforeUpload: this.upl,\n        onRemove: f => this.OptionImageonChange(null, i),\n        onSuccess: f => this.OptionImageonChange(f, i),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      }), React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        type: \"upload\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }), \" \\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C\")))), React.createElement(Col, {\n        span: 2,\n        style: {\n          padding: '55px 10px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }, React.createElement(Form.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371\n        },\n        __self: this\n      }, React.createElement(Checkbox, {\n        checked: option.isAnswer,\n        onChange: e => this.AnswerOptionSwitch(e, i),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376\n        },\n        __self: this\n      }), \" \")));\n    })), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, React.createElement(Col, {\n      offset: 20,\n      span: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      block: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }, this.props.trainer.Questionmode))))))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  trainer: state.trainer,\n  admin: state.admin,\n  chapter: state.chapter\n});\n\nconst NewQuestionForm = Form.create({\n  name: 'newQuestion'\n})(NewQuestion);\nexport default connect(mapStateToProps, {\n  ChangeQuestionConfirmDirty,\n  ChangeQuestionModalState,\n  ChangeQuestionTableData\n})(NewQuestionForm);","map":{"version":3,"sources":["C:\\React_project\\EduTest\\frontend\\src\\components\\trainer\\newquestion\\newquestion.js"],"names":["React","Component","Form","Input","Button","Select","Row","Col","Checkbox","Modal","Upload","Icon","InputNumber","connect","ChangeQuestionConfirmDirty","ChangeQuestionTableData","ChangeQuestionModalState","SecurePost","SecureGet","apis","Alert","auth","NewQuestion","constructor","props","Customalert","confirm","title","content","okText","cancelText","OptionTextChange","e","i","newOptions","state","questioneditdetails","options","questioneditDetails","body","target","value","image","undefined","isAnswer","setState","ps","pp","AnswerOptionSwitch","questionDetails","checked","OptionImageonChange","f","BASE","link","submitDisabled","handleSubmit","preventDefault","form","validateFieldsAndScroll","err","values","console","log","ans","opts","forEach","element","push","optbody","optimg","adding","url","CREATE_QUESTIONS","data","questionbody","quesimg","questionimage","material","materialId","then","response","success","message","resetFields","catch","error","changeqImage","upl","componentDidMount","qnid","render","getFieldDecorator","Option","TextArea","optn","Optiondata","trainer","QuestionImageprops","name","action","FILE_UPLOAD","retriveToken","listType","initialValue","rules","required","padding","paddingTop","map","option","textAlign","Questionmode","mapStateToProps","admin","chapter","NewQuestionForm","create"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport './newquestion.css';\r\nimport {\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Select,\r\n    Row,\r\n    Col,\r\n    Checkbox,\r\n    Modal,\r\n    Upload,\r\n    Icon,\r\n    InputNumber \r\n} from 'antd';\r\nimport { connect } from 'react-redux';\r\nimport { \r\n    ChangeQuestionConfirmDirty,\r\n    ChangeQuestionTableData,\r\n    ChangeQuestionModalState\r\n} from '../../../actions/trainerAction';\r\nimport { SecurePost,SecureGet } from '../../../services/axiosCall';\r\nimport apis from '../../../services/Apis';\r\nimport Alert from '../../../components/common/alert';\r\nimport auth from '../../../services/AuthServices';\r\n\r\n\r\n\r\nclass NewQuestion extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            \r\n            questionDetails:{\r\n                questionimage:null,\r\n                // options :[\r\n                //     {\r\n                //         image :null,\r\n                //         body : null,\r\n                //         isAnswer :false\r\n                //     },\r\n                //     {\r\n                //         image :null,\r\n                //         body : null,\r\n                //         isAnswer :false\r\n                //     },\r\n                //     {\r\n                //         image :null,\r\n                //         body : null,\r\n                //         isAnswer :false\r\n                //     },\r\n                //     {\r\n                //         image :null,\r\n                //         body : null,\r\n                //         isAnswer :false\r\n                //     },\r\n                //     {\r\n                //         image :null,\r\n                //         body : null,\r\n                //         isAnswer :false\r\n                //     }\r\n                // ] ,  \r\n            },\r\n            adding:false,\r\n            submitDisabled:false,\r\n        }\r\n        \r\n    }\r\n\r\n    componentDidMount(){\r\n        // console.log(\"Hello:\",this.props.trainer.questioneditdetails);\r\n        this.setState({\r\n            materialId:this.props.qnid\r\n        });\r\n    }\r\n\r\n    Customalert = ()=>{\r\n        Modal.confirm({\r\n            title: 'Подтверждать',\r\n            content: 'пустой параметр не может быть установлен в качестве ответа',\r\n            okText: 'Ok',\r\n            cancelText: null,\r\n        });\r\n    }\r\n    \r\n    OptionTextChange =(e,i)=>{\r\n        var newOptions = [...this.state.questioneditdetails.options]\r\n        newOptions[i]={\r\n            ...this.state.questioneditDetails.options[i],\r\n            body : e.target.value\r\n        }\r\n        if((newOptions[i].image==='undefined' || newOptions[i].image===undefined || newOptions[i].image===null || newOptions[i].image==='null') && \r\n            (newOptions[i].body==='undefined' || newOptions[i].body===undefined || newOptions[i].body==='null' || newOptions[i].body==='' || newOptions[i].body===null)){\r\n                newOptions[i]={\r\n                    ...this.state.questioneditDetails.options[i],\r\n                    isAnswer : false\r\n                }\r\n                this.setState((ps,pp)=>{\r\n                    return({\r\n                        questioneditdetails:{\r\n                            ...ps.questioneditdetails,\r\n                            options:newOptions\r\n                        }\r\n                    })\r\n                })\r\n        }\r\n        this.setState((ps,pp)=>{\r\n            return({\r\n                questioneditdetails:{\r\n                    ...ps.questioneditdetails,\r\n                    options:newOptions\r\n                }\r\n            })\r\n        })     \r\n    }\r\n\r\n    AnswerOptionSwitch = (e,i)=>{\r\n        if((this.state.questioneditdetails.options[i].body!=='' && this.state.questioneditdetails.options[i].body!==null)\r\n            || (this.state.questioneditdetails.options[i].image!==null && this.state.questioneditdetails.options[i].image!=='undefined' && this.state.questionDetails.options[i].image!==undefined)\r\n        ){\r\n            var newOptions = [...this.state.questioneditdetails.options]\r\n            newOptions[i]={\r\n                ...this.state.questioneditdetails.options[i],\r\n                isAnswer : e.target.checked\r\n            }\r\n            this.setState((ps,pp)=>{\r\n                return({\r\n                    questioneditdetails:{\r\n                        ...ps.questioneditdetails,\r\n                        options:newOptions\r\n                    }\r\n                })\r\n            })\r\n        }\r\n        else{   \r\n            this.Customalert()\r\n            return;\r\n        }\r\n    }\r\n\r\n    OptionImageonChange = (f,i)=>{\r\n        var newOptions = [...this.state.questioneditdetails.options]\r\n        if(!f){\r\n            delete newOptions[i].image\r\n            newOptions[i].image=null\r\n        }\r\n        else{\r\n            newOptions[i]={\r\n                ...this.state.questioneditdetails.options[i],\r\n                image :`${apis.BASE}/${f.link}`\r\n            }\r\n        }\r\n        this.setState({\r\n            submitDisabled:false\r\n        })\r\n        if((newOptions[i].image==='undefined' || newOptions[i].image===undefined || newOptions[i].image===null || newOptions[i].image==='null') && \r\n            (newOptions[i].body==='undefined' || newOptions[i].body===undefined || newOptions[i].body==='null' || newOptions[i].body==='' || newOptions[i].body===null)){\r\n                newOptions[i]={\r\n                    ...this.state.questioneditdetails.options[i],\r\n                    isAnswer : false\r\n                }\r\n        }\r\n        this.setState((ps,pp)=>{\r\n            return({\r\n                questioneditdetails:{\r\n                    ...ps.questioneditdetails,\r\n                    options:newOptions\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n            console.log(values);\r\n            if (!err) {\r\n                var f=1;\r\n                var ans=0;\r\n                var opts=[]\r\n                console.log('Полученные значения формы: ', values);\r\n                this.state.questioneditdetails.options.forEach((element,i) => {\r\n                    opts.push({\r\n                        optbody:element.optbody,\r\n                        optimg:element.optimg,\r\n                        isAnswer:element.isAnswer\r\n                    });\r\n                    if((element.optimg==='undefined' || element.optimg===undefined || element.optimg===null || element.optimg==='null')&&(element.optbody==='' ||element.optbody===null || element.optbody==='null' || element.optbody==='undefined' || element.optbody===undefined )){\r\n                        f=0;\r\n                    }\r\n                    if(element.isAnswer){\r\n                        ans=ans+1\r\n                    }\r\n                })\r\n                if(f){\r\n                    if(!ans){\r\n                        Alert('warning','Предупреждение!','Должен быть хотя бы один правильный ответ');\r\n                    }\r\n                    else{\r\n                        this.setState({\r\n                            adding:true\r\n                        });\r\n                        SecurePost({\r\n                            url:apis.CREATE_QUESTIONS,\r\n                            data:{\r\n                                body:values.questionbody,\r\n                                options:opts,\r\n                                quesimg:this.state.questionDetails.questionimage,\r\n                                //chapter: values.chapter,\r\n                                material: this.state.materialId,\r\n                            }\r\n                        }).then((response)=>{\r\n                            console.log(response);\r\n                            this.setState({\r\n                                adding:false\r\n                            });\r\n                            if(response.data.success){\r\n                                this.props.ChangeQuestionModalState(false,null,'Создать вопрос');\r\n                                Alert('success','Успешно',response.data.message);\r\n                            }\r\n                            else{\r\n                                this.props.ChangeQuestionModalState(false,null,'Создать вопрос');\r\n                                this.props.form.resetFields();\r\n                                return Alert('warning','Предупреждение!',response.data.message);\r\n                            }\r\n\r\n                        }).catch((error)=>{\r\n                            console.log(error);\r\n                            this.props.form.resetFields();\r\n                            this.setState({\r\n                                adding:false,\r\n                                questionDetails:{\r\n                                    questionimage:null,\r\n                                    // options :[\r\n                                    //     {\r\n                                    //         image :null,\r\n                                    //         body : null,\r\n                                    //         isAnswer :false\r\n                                    //     },\r\n                                    //     {\r\n                                    //         image :null,\r\n                                    //         body : null,\r\n                                    //         isAnswer :false\r\n                                    //     },\r\n                                    //     {\r\n                                    //         image :null,\r\n                                    //         body : null,\r\n                                    //         isAnswer :false\r\n                                    //     },\r\n                                    //     {\r\n                                    //         image :null,\r\n                                    //         body : null,\r\n                                    //         isAnswer :false\r\n                                    //     },\r\n                                    //     {\r\n                                    //         image :null,\r\n                                    //         body : null,\r\n                                    //         isAnswer :false\r\n                                    //     }\r\n                                    // ] ,  \r\n                                }\r\n                            });\r\n                            this.props.ChangeQuestionModalState(false,null,'Создать вопрос');\r\n                            return Alert('error','Ошибка!','Ошибка сервера');\r\n                        })\r\n                        \r\n                    }\r\n                }\r\n                else{\r\n                    Alert('warning','Предупреждение!','Пожалуйста, заполните все варианты');\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    changeqImage = (f)=>{\r\n        this.setState((ps,pp)=>{\r\n            return({\r\n                questionDetails:{\r\n                    ...ps.questionDetails,\r\n                    questionimage:(f.link ?`${apis.BASE}/${f.link}`:null)\r\n                },\r\n                submitDisabled:false\r\n            })\r\n        })\r\n    }\r\n\r\n    upl=()=>{\r\n        this.setState({\r\n            submitDisabled:true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        const { Option } = Select;\r\n        const { TextArea } = Input;\r\n        const optn =['A','B','C','D','E']\r\n        const Optiondata = this.props.trainer.questioneditdetails.options;\r\n        console.log(\"OptionData:\",Optiondata);\r\n        console.log(\"Opt2\",this.state.questionDetails);\r\n        var QuestionImageprops={\r\n            name: 'file',\r\n            action: `${apis.BASE}${apis.FILE_UPLOAD}?Token=${auth.retriveToken()}`,\r\n            listType: 'picture',\r\n        }\r\n        \r\n        return (\r\n            <div className=\"register-subject-form\" >\r\n                <div className=\"register-trainer-form-body\">\r\n                    <Form  onSubmit={this.handleSubmit}>\r\n                        <div>\r\n                            \r\n                            <Row>\r\n                                <Col span={18}>\r\n                                    <Form.Item label=\"Вопрос\" hasFeedback>\r\n                                        {getFieldDecorator('questionbody', {\r\n                                            initialValue : this.props.trainer.questioneditdetails.body,\r\n                                            rules: [{ required: true, message: 'Пожалуйста, введите вопрос!' }],\r\n                                        })(\r\n                                            <TextArea rows={5} />\r\n                                        )}\r\n                                    </Form.Item>\r\n                                </Col>\r\n                                <Col span={6} style={{padding : '0px 20px'}}>\r\n                                    <Form.Item label=\"Изображение вопроса\">\r\n                                        <Upload {...QuestionImageprops} beforeUpload={this.upl} onRemove={this.changeqImage} onSuccess={this.changeqImage}>\r\n                                            <Button>\r\n                                                <Icon type=\"upload\" /> Загрузить\r\n                                            </Button>\r\n                                        </Upload>\r\n                                    </Form.Item>\r\n                                </Col>\r\n                            </Row>\r\n                            \r\n                            <div style={{paddingTop:'20px'}}>\r\n                                \r\n                                { \r\n                                    Optiondata.options.map((option,i)=>{\r\n                                        return(\r\n                                            <Row key={i} className=\"\">\r\n                                                <Col offset={1} span={13}>\r\n                                                    <Form.Item label={`вариант ${i+1}`}>\r\n                                                    {getFieldDecorator('option.optbody', {\r\n                                                        initialValue : option.optbody,\r\n                                                        rules: [{ required: false, message: 'Пожалуйста, введите вопрос!' }],\r\n                                                    })(\r\n                                                    \r\n                                                         <TextArea value={this.state.trainer.questioneditdetails.options[i].optbody} onChange={ (e)=>this.OptionTextChange(e,i)} rows={3} />\r\n                                                     )} \r\n                                                        {/* <TextArea value={this.state.questionDetails.options[i].body} onChange={ (e)=>this.OptionTextChange(e,i)} rows={3} /> */}\r\n                                                    </Form.Item>\r\n                                                </Col>\r\n                                                <Col offset={2} span={6} style={{textAlign:'center'}}>\r\n                                                    <Form.Item label={`Картинка варианта ${i+1}`}>\r\n                                                        <Upload {...QuestionImageprops} beforeUpload={this.upl} onRemove={(f)=>this.OptionImageonChange(null,i)} onSuccess={(f)=>this.OptionImageonChange(f,i)}>\r\n                                                        {/* {getFieldDecorator('option.optimg', {\r\n                                                            initialValue : option.optimg,\r\n                                                            rules: [{ required: false, message: 'Пожалуйста, загрузите ваш аватар!'}],\r\n                                                        })(<img src={option.optimg} style={{width: \"60px\",height: \"80px\",}} alt=\"\"/>)\r\n                                                        }\r\n                                                             */}\r\n                                                            <Button>\r\n                                                                <Icon type=\"upload\" /> Загрузить\r\n                                                            </Button>\r\n                                                        </Upload>\r\n                                                    </Form.Item>\r\n                                                </Col>\r\n                                                <Col span={2} style={{padding : '55px 10px'}}>\r\n                                                    <Form.Item>\r\n                                                    {/* {getFieldDecorator('option.isAnswer', {\r\n                                                        initialValue : option.isAnswer,\r\n                                                        rules: [{ required: true, message: 'Пожалуйста, введите вопрос!' }],\r\n                                                    })( */}\r\n                                                        <Checkbox checked={option.isAnswer} onChange={(e)=>this.AnswerOptionSwitch(e,i)}/>\r\n                                                       {// <TextArea value={this.state.questionDetails.options[i].body} onChange={ (e)=>this.OptionTextChange(e,i)} rows={3} />\r\n                                                    // )}\r\n                                     } {/* <Checkbox checked={this.state.questionDetails.options[i].isAnswer} onChange={(e)=>this.AnswerOptionSwitch(e,i)} ></Checkbox> */}\r\n                                                   \r\n                                                        </Form.Item>\r\n                                                </Col>\r\n                                            </Row>                                                \r\n                                        )\r\n                                    })\r\n                                }\r\n                                \r\n                            </div>\r\n\r\n                                {/* <div>\r\n                                    {Optiondata.options.map((d,i)=>{\r\n                                        return(\r\n                                            <div key={i}>\r\n                                                <Row type=\"flex\" justify=\"center\" className=\"QuestionDetailsOptions\">\r\n                                                    <Col span={2}>\r\n                                                        {\r\n                                                            d.isAnswer?<Button className=\"green\" shape=\"circle\">{optn[i]}</Button>:<Button type=\"primary\" shape=\"circle\">{optn[i]}</Button>\r\n                                                        }\r\n                                                        \r\n                                                    </Col>\r\n                                                    {d.optimg?\r\n                                                        <Col span={6} style={{padding:'5px'}}>\r\n                                                            <img alt=\"unable to load\" className=\"questionDetailsImage\" src={d.optimg} />\r\n                                                        </Col>\r\n                                                    :\r\n                                                        null\r\n                                                    }\r\n                                                    {d.optimg?\r\n                                                        <Col span={14}>{d.optbody}</Col>\r\n                                                    :\r\n                                                        <Col span={20}>{d.optbody}</Col>\r\n                                                    }\r\n                                                </Row>\r\n                                            \r\n                                            </div>\r\n                                        )\r\n                                    })}\r\n                                </div> */}\r\n\r\n\r\n                            {/* <Row>\r\n                                <Col span={12}>\r\n                                    { this.state.fifthoptioAddButtonVisible ? <Button type=\"primary\" onClick={(e)=>this.addfifthOption(e)}>Добавить 5-й вариант</Button> : null}\r\n                                </Col>\r\n                            </Row> */}\r\n                            <Row>\r\n                                <Col offset={20}  span={4}>\r\n                                    <Form.Item>\r\n                                        {/* <Button type=\"primary\" htmlType=\"submit\" disabled={this.state.submitDisabled} loading={this.state.adding} block>\r\n                                            Создать Вопрос\r\n                                        </Button> */}\r\n                                        <Button type=\"primary\" htmlType=\"submit\" block>\r\n                                            {this.props.trainer.Questionmode}\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Col>\r\n                            </Row>\r\n                            \r\n                        </div>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    trainer : state.trainer,\r\n    admin : state.admin,\r\n    chapter : state.chapter\r\n});\r\n\r\n\r\n\r\nconst NewQuestionForm = Form.create({ name: 'newQuestion' })(NewQuestion);\r\n\r\nexport default connect(mapStateToProps,{\r\n    ChangeQuestionConfirmDirty,\r\n    ChangeQuestionModalState,\r\n    ChangeQuestionTableData\r\n})(NewQuestionForm);\r\n\r\n"]},"metadata":{},"sourceType":"module"}
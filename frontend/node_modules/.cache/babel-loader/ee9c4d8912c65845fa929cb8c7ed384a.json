{"ast":null,"code":"var _jsxFileName = \"C:\\\\React_project\\\\EduTest\\\\frontend\\\\src\\\\components\\\\trainer\\\\newtest\\\\basicForm.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Form, InputNumber, Input, Button, Select } from 'antd';\nimport { changeStep, changeBasicNewTestDetails } from '../../../actions/testAction';\nimport { SecurePost } from '../../../services/axiosCall';\nimport './newtest.css';\nimport apis from '../../../services/Apis';\nconst Option = Select.Option;\n\nclass BasicTestFormO extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFields((err, values) => {\n        if (!err) {\n          console.log(values);\n          this.props.changeBasicNewTestDetails({\n            testType: values.type,\n            testTitle: values.title,\n            testDuration: values.duration,\n            OrganisationName: values.organisation,\n            testChapter: values.chapter,\n            testMaterial: values.materials\n          });\n          this.props.changeStep(1);\n        }\n      });\n    };\n\n    this.validateTestName = (rule, value, callback) => {\n      if (value.length >= 5) {\n        this.setState({\n          checkingName: \"validating\"\n        });\n        SecurePost({\n          url: apis.CHECK_TEST_NAME,\n          data: {\n            testname: value\n          }\n        }).then(data => {\n          console.log(data);\n\n          if (data.data.success) {\n            if (data.data.can_use) {\n              this.setState({\n                checkingName: \"success\"\n              });\n              callback();\n            } else {\n              this.setState({\n                checkingName: \"error\"\n              });\n              callback('Another test exist with same name.');\n            }\n          } else {\n            this.setState({\n              checkingName: \"success\"\n            });\n            callback();\n          }\n        }).catch(ee => {\n          console.log(ee);\n          this.setState({\n            checkingName: \"success\"\n          });\n          callback();\n        });\n      } else {\n        callback();\n      }\n    };\n\n    this.state = {\n      checkingName: \"\"\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(\"div\", {\n      className: \"basic-test-form-outer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"basic-test-form-inner\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      label: \"\\u0422\\u0438\\u043F \\u0442\\u0435\\u0441\\u0442\\u0430\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, getFieldDecorator('type', {\n      initialValue: this.props.test.newtestFormData.testType,\n      rules: [{\n        required: true,\n        message: 'Пожалуйста, выберите тип теста'\n      }]\n    })(React.createElement(Select, {\n      placeholder: \"\\u0422\\u0438\\u043F \\u0442\\u0435\\u0441\\u0442\\u0430\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"pre-test\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Pre Test\"), React.createElement(Option, {\n      value: \"post-test\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Post Test\")))), React.createElement(Form.Item, {\n      label: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0442\\u0435\\u0441\\u0442\\u0430\",\n      hasFeedback: true,\n      validateStatus: this.state.checkingName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, getFieldDecorator('title', {\n      initialValue: this.props.test.newtestFormData.testTitle,\n      rules: [{\n        required: true,\n        message: 'Пожалуйста, укажите название теста'\n      }, {\n        min: 5,\n        message: 'Заголовок должен содержать не менее 5 символов'\n      }, {\n        validator: this.validateTestName\n      }]\n    })(React.createElement(Input, {\n      placeholder: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0442\\u0435\\u0441\\u0442\\u0430\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"\\u0420\\u0430\\u0437\\u0434\\u0435\\u043B\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, getFieldDecorator('chapter', {\n      initialValue: this.props.test.newtestFormData.testChapter,\n      rules: [{\n        required: true,\n        message: 'Пожалуйста, выберите раздел'\n      }]\n    })(React.createElement(Select, {\n      mode: \"multiple\",\n      placeholder: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043E\\u0434\\u043D\\u0443 \\u0438\\u043B\\u0438 \\u043D\\u0435\\u0441\\u043A\\u043E\\u043B\\u044C\\u043A\\u043E \\u0433\\u043B\\u0430\\u0432\",\n      style: {\n        width: '100%'\n      },\n      allowClear: true,\n      optionFilterProp: \"s\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, this.props.chapter.chapterTableData.map(item => React.createElement(Select.Option, {\n      key: item._id,\n      value: item._id,\n      s: item.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, item.name))))), React.createElement(Form.Item, {\n      label: \"\\u041C\\u0430\\u0442\\u0435\\u0440\\u0438\\u0430\\u043B\\u044B\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, getFieldDecorator('materials', {\n      initialValue: this.props.test.newtestFormData.testMaterial,\n      rules: [{\n        required: true,\n        message: 'Выберите материал'\n      }]\n    })(React.createElement(Select //mode=\"multiple\"\n    , {\n      placeholder: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u043E\\u0434\\u0438\\u043D \\u0438\\u043B\\u0438 \\u043D\\u0435\\u0441\\u043A\\u043E\\u043B\\u044C\\u043A\\u043E \\u043C\\u0430\\u0442\\u0435\\u0440\\u0438\\u0430\\u043B\\u043E\\u0432\",\n      style: {\n        width: '100%'\n      },\n      allowClear: true,\n      optionFilterProp: \"s\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, this.props.chapter.materialTableData.map(item => React.createElement(Select.Option, {\n      key: item._id,\n      value: item._id,\n      s: item.topic,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, item.topic))))), React.createElement(Form.Item, {\n      label: \"\\u041F\\u0440\\u043E\\u0434\\u043E\\u043B\\u0436\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E\\u0441\\u0442\\u044C \\u0442\\u0435\\u0441\\u0442\\u0430 ( \\u041C\\u0438\\u043D. \\u043F\\u0440\\u043E\\u0434\\u043E\\u043B\\u0436\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E\\u0441\\u0442\\u044C \\u0442\\u0435\\u0441\\u0442\\u0430 - 60 \\u043C\\u0438\\u043D\\u0443\\u0442)\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, getFieldDecorator('duration', {\n      initialValue: this.props.test.newtestFormData.testDuration,\n      rules: [{\n        required: true,\n        message: 'Пожалуйста, укажите продолжительность теста'\n      }]\n    })(React.createElement(InputNumber, {\n      style: {\n        width: '100%'\n      },\n      placeholder: \"\\u041F\\u0440\\u043E\\u0434\\u043E\\u043B\\u0436\\u0438\\u0442\\u0435\\u043B\\u044C\\u043D\\u043E\\u0441\\u0442\\u044C \\u0442\\u0435\\u0441\\u0442\\u0430\",\n      min: 60,\n      max: 180,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u0438\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, getFieldDecorator('organisation', {\n      initialValue: this.props.test.newtestFormData.OrganisationName\n    })(React.createElement(Input, {\n      placeholder: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u043E\\u0440\\u0433\\u0430\\u043D\\u0438\\u0437\\u0430\\u0446\\u0438\\u0438\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      block: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"\\u0421\\u043B\\u0435\\u0434\\u0443\\u044E\\u0449\\u0438\\u0439\")))));\n  }\n\n}\n\nconst BasicTestForm = Form.create({\n  name: 'Основная форма'\n})(BasicTestFormO);\n\nconst mapStateToProps = state => ({\n  test: state.test,\n  admin: state.admin,\n  chapter: state.chapter\n});\n\nexport default connect(mapStateToProps, {\n  changeStep,\n  changeBasicNewTestDetails\n})(BasicTestForm);","map":{"version":3,"sources":["C:\\React_project\\EduTest\\frontend\\src\\components\\trainer\\newtest\\basicForm.js"],"names":["React","Component","connect","Form","InputNumber","Input","Button","Select","changeStep","changeBasicNewTestDetails","SecurePost","apis","Option","BasicTestFormO","constructor","props","handleSubmit","e","preventDefault","form","validateFields","err","values","console","log","testType","type","testTitle","title","testDuration","duration","OrganisationName","organisation","testChapter","chapter","testMaterial","materials","validateTestName","rule","value","callback","length","setState","checkingName","url","CHECK_TEST_NAME","data","testname","then","success","can_use","catch","ee","state","render","getFieldDecorator","initialValue","test","newtestFormData","rules","required","message","min","validator","width","chapterTableData","map","item","_id","name","materialTableData","topic","BasicTestForm","create","mapStateToProps","admin"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { Form, InputNumber , Input, Button,Select  } from 'antd';\r\nimport { changeStep,changeBasicNewTestDetails } from '../../../actions/testAction';\r\nimport { SecurePost } from '../../../services/axiosCall';\r\nimport './newtest.css';\r\nimport apis from '../../../services/Apis'\r\nconst { Option } = Select;\r\n\r\n\r\nclass BasicTestFormO extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            checkingName:\"\"\r\n        }\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log(values)\r\n                this.props.changeBasicNewTestDetails({\r\n                    testType:values.type,\r\n                    testTitle: values.title,\r\n                    testDuration : values.duration,\r\n                    OrganisationName:values.organisation,\r\n                    testChapter : values.chapter,\r\n                    testMaterial : values.materials\r\n                })\r\n                this.props.changeStep(1);\r\n            }\r\n        });\r\n    };\r\n\r\n    validateTestName = (rule, value, callback) => {\r\n        if(value.length>=5){\r\n            this.setState({\r\n                checkingName:\"validating\"\r\n            })\r\n            SecurePost({\r\n                url:apis.CHECK_TEST_NAME,\r\n                data:{\r\n                    testname:value\r\n                }\r\n            }).then((data)=>{\r\n                console.log(data);\r\n                if(data.data.success){\r\n                    if(data.data.can_use){\r\n                        this.setState({\r\n                            checkingName:\"success\"\r\n                        })\r\n                        callback();\r\n                    }\r\n                    else{\r\n                        this.setState({\r\n                            checkingName:\"error\"\r\n                        })\r\n                        callback('Another test exist with same name.');\r\n                    }\r\n                }\r\n                else{\r\n                    this.setState({\r\n                        checkingName:\"success\"\r\n                    })\r\n                    callback()\r\n                }\r\n            }).catch((ee)=>{\r\n                console.log(ee);\r\n                this.setState({\r\n                    checkingName:\"success\"\r\n                })\r\n                callback()\r\n            })\r\n        }\r\n        else{\r\n            callback();\r\n        }        \r\n    };\r\n\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <div className=\"basic-test-form-outer\">\r\n                <div className=\"basic-test-form-inner\">\r\n                    <Form onSubmit={this.handleSubmit}>\r\n                        <Form.Item label=\"Тип теста\"  hasFeedback>\r\n                            {getFieldDecorator('type', {\r\n                                initialValue : this.props.test.newtestFormData.testType,\r\n                                rules: [{ required: true, message: 'Пожалуйста, выберите тип теста' }],\r\n                            })(\r\n                                <Select \r\n                                placeholder=\"Тип теста\"\r\n                                >\r\n                                    <Option value=\"pre-test\">Pre Test</Option>\r\n                                    <Option value=\"post-test\">Post Test</Option>   \r\n                                </Select>\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item label=\"Название теста\"  hasFeedback validateStatus={this.state.checkingName}>\r\n                            {getFieldDecorator('title', {\r\n                                initialValue : this.props.test.newtestFormData.testTitle,\r\n                                rules: [\r\n                                    { required: true, message: 'Пожалуйста, укажите название теста' },\r\n                                    { min:5, message: 'Заголовок должен содержать не менее 5 символов' },\r\n                                    { validator: this.validateTestName }\r\n                                ],\r\n                                \r\n                            })(\r\n                                <Input placeholder=\"Название теста\" />\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item label=\"Раздел\"  hasFeedback>\r\n                            {getFieldDecorator('chapter', {\r\n                                initialValue : this.props.test.newtestFormData.testChapter,\r\n                                rules: [{ required: true, message: 'Пожалуйста, выберите раздел' }],\r\n                            })(\r\n                                <Select\r\n                                mode=\"multiple\"\r\n                                placeholder=\"Выберите одну или несколько глав\"\r\n                                style={{ width: '100%' }}\r\n                                allowClear={true}\r\n                                optionFilterProp=\"s\"\r\n                                >\r\n                                    {this.props.chapter.chapterTableData.map(item => (\r\n                                        <Select.Option key={item._id} value={item._id} s={item.name}>\r\n                                        {item.name}\r\n                                        </Select.Option>\r\n                                    ))}\r\n                                </Select>\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item label=\"Материалы\"  hasFeedback>\r\n                            {getFieldDecorator('materials', {\r\n                                initialValue : this.props.test.newtestFormData.testMaterial,\r\n                                rules: [{ required: true, message: 'Выберите материал' }],\r\n                            })(\r\n                                <Select\r\n                                //mode=\"multiple\"\r\n                                placeholder=\"Выберите один или несколько материалов\"\r\n                                style={{ width: '100%' }}\r\n                                allowClear={true}\r\n                                optionFilterProp=\"s\"\r\n                                >\r\n                                    {this.props.chapter.materialTableData.map(item => (\r\n                                        <Select.Option key={item._id} value={item._id} s={item.topic}>\r\n                                        {item.topic}\r\n                                        </Select.Option>\r\n                                    ))}\r\n                                </Select>\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item label=\"Продолжительность теста ( Мин. продолжительность теста - 60 минут)\" hasFeedback>\r\n                            {getFieldDecorator('duration', {\r\n                                initialValue : this.props.test.newtestFormData.testDuration,\r\n                                rules: [{ required: true, message: 'Пожалуйста, укажите продолжительность теста' }],\r\n                            })(\r\n                                <InputNumber style={{width:'100%'}}  placeholder=\"Продолжительность теста\" min={60} max={180}/>\r\n                            )}\r\n                        </Form.Item> \r\n                        <Form.Item label=\"Название организации\"  hasFeedback>\r\n                            {getFieldDecorator('organisation', {\r\n                                initialValue : this.props.test.newtestFormData.OrganisationName\r\n                            })(\r\n                                <Input placeholder=\"Название организации\" />\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\" block>\r\n                                Следующий\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst BasicTestForm = Form.create({ name: 'Основная форма' })(BasicTestFormO);\r\n\r\nconst mapStateToProps = state => ({\r\n    test : state.test,\r\n    admin:state.admin,\r\n    chapter : state.chapter\r\n});\r\n\r\nexport default connect(mapStateToProps,{\r\n    changeStep,\r\n    changeBasicNewTestDetails\r\n})(BasicTestForm);"]},"metadata":{},"sourceType":"module"}